{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>My Leetcode profile.</p> <ul> <li>I used to like Ruby a lot, so I did a bunch with Ruby. It's a good language   for leetcode, but in general I prefer languages with an \"only one way to do   things\" philosophy.</li> <li>I like Go, so I did a bunch with Go.</li> <li>Recently I tried to do a bunch with Python. I've come to the conclusion that   Python is probably the best language for leetcoding. All the solutions here   are in Python.</li> </ul> <p>You can see some of the older Ruby and Go solutions in the repo.</p>"},{"location":"#particularly-interesting-solutions-or-problems","title":"Particularly interesting solutions or problems","text":"<p>The Blind 75 Must Do Leetcode is a nice list. Others are:</p> <ul> <li>146. LRU Cache</li> <li>295. Find Median from Data Stream</li> <li>594. Longest Harmonious Subsequence</li> <li>62. Unique Paths</li> <li>46. Permutations</li> <li>142. Linked List Cycle II</li> <li>102. Binary Tree Level Order Traversal</li> <li>200. Number of Islands</li> <li>394. Decode String</li> <li>208. Implement Trie</li> </ul>"},{"location":"about/","title":"About","text":"<p>\ud83d\udc4b My name is Craig Pastro. I'm a minimalist.</p>"},{"location":"problems/1002_find_common_characters/","title":"1002. Find Common Characters","text":"<p>Easy</p> <p>Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.</p>"},{"location":"problems/1002_find_common_characters/#example-1","title":"Example 1:","text":"<pre><code>Input: words = [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\n</code></pre>"},{"location":"problems/1002_find_common_characters/#example-2","title":"Example 2:","text":"<pre><code>Input: words = [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\n</code></pre>"},{"location":"problems/1002_find_common_characters/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= words.length &lt;= 100</li> <li>1 &lt;= words[i].length &lt;= 100</li> <li>words[i] consists of lowercase English letters.</li> </ul>"},{"location":"problems/1002_find_common_characters/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def commonChars(self, words: List[str]) -&gt; List[str]:\n        count = [100 * 100 + 1] * 26\n\n        for word in words:\n            word_count = [0] * 26\n            for c in word:\n                word_count[ord(c) - ord(\"a\")] += 1\n\n            for i in range(26):\n                count[i] = min(count[i], word_count[i])\n\n        ans = []\n        for i in range(26):\n            if count[i] &gt; 0:\n                ans.extend([chr(i + ord(\"a\"))] * count[i])\n\n        return ans\n</code></pre>"},{"location":"problems/1005_maximize_sum_of_array_after_k_negations/","title":"1005. Maximize Sum Of Array After K Negations","text":"<p>Easy</p> <p>Given an integer array nums and an integer k, modify the array in the following way:</p> <ul> <li>choose an index i and replace nums[i] with -nums[i].</li> </ul> <p>You should apply this process exactly k times. You may choose the same index i multiple times.</p> <p>Return the largest possible sum of the array after modifying it in this way.</p>"},{"location":"problems/1005_maximize_sum_of_array_after_k_negations/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -&gt; int:\n        negs = sorted(filter(lambda x: x &lt; 0, nums))\n        pos = sorted(filter(lambda x: x &gt; 0, nums))\n        zeros = nums.count(0) &gt; 0\n\n        i = 0\n        while i &lt; len(negs) and k &gt; 0:\n            negs[i] = -negs[i]\n            i += 1\n            k -= 1\n\n        res = sorted(negs + pos)\n\n        if zeros &gt; 0:\n            return sum(res)\n\n        k %= 2\n\n        if k == 1:\n            res[0] = -res[0]\n\n        return sum(res)\n</code></pre>"},{"location":"problems/1009_complement_of_base_10_integer/","title":"1009. Complement of Base 10 Integer","text":"<p>Easy</p> <p>The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.</p> <ul> <li>For example, The integer 5 is \"101\" in binary and its complement is \"010\"   which is the integer 2.</li> </ul> <p>Given an integer n, return its complement.</p>"},{"location":"problems/1009_complement_of_base_10_integer/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def bitwiseComplement(self, n: int) -&gt; int:\n        if n == 0:\n            return 1\n\n        mask = n\n        mask |= mask &gt;&gt; 1\n        mask |= mask &gt;&gt; 2\n        mask |= mask &gt;&gt; 4\n        mask |= mask &gt;&gt; 8\n        mask |= mask &gt;&gt; 16\n\n        return n ^ mask\n</code></pre>"},{"location":"problems/100_same_tree/","title":"100. Same Tree","text":"<p>Easy</p> <p>Given the roots of two binary trees p and q, write a function to check if they are the same or not.</p> <p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>"},{"location":"problems/100_same_tree/#example-1","title":"Example 1:","text":"<pre><code>Input: p = [1,2,3], q = [1,2,3]\nOutput: true\n</code></pre>"},{"location":"problems/100_same_tree/#example-2","title":"Example 2:","text":"<pre><code>Input: p = [1,2], q = [1,null,2]\nOutput: false\n</code></pre>"},{"location":"problems/100_same_tree/#example-3","title":"Example 3:","text":"<pre><code>Input: p = [1,2,1], q = [1,1,2]\nOutput: false\n</code></pre>"},{"location":"problems/100_same_tree/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in both trees is in the range [0, 100].</li> <li>-10^4 &lt;= Node.val &lt;= 10^4</li> </ul>"},{"location":"problems/100_same_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n\n        return (\n            p.val == q.val\n            and self.isSameTree(p.left, q.left)\n            and self.isSameTree(p.right, q.right)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/","title":"1013. Partition Array Into Three Parts With Equal Sum","text":"<p>Easy</p> <p>Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.</p> <p>Formally, we can partition the array if we can find indexes i + 1 &lt; j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</p>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/#example-1","title":"Example 1:","text":"<pre><code>Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</code></pre>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/#example-2","title":"Example 2:","text":"<pre><code>Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n</code></pre>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/#example-3","title":"Example 3:","text":"<pre><code>Input: arr = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</code></pre>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/#constraints","title":"Constraints:","text":"<ul> <li>3 &lt;= arr.length &lt;= 5 * 104</li> <li>-104 &lt;= arr[i] &lt;= 104</li> </ul>"},{"location":"problems/1013_partition_array_into_three_parts_with_equal_sum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -&gt; bool:\n        total = sum(arr)\n        if total % 3 != 0:\n            return False\n\n        partSum = total // 3\n\n        parts = 0\n        partialSum = 0\n\n        for a in arr:\n            partialSum += a\n            if partialSum == partSum:\n                parts += 1\n                partialSum = 0\n\n        # &gt;= 3 as arr could be an array of zeros\n        return parts &gt;= 3\n</code></pre>"},{"location":"problems/1018_binary_prefix_divisible_by_5/","title":"1018. Binary Prefix Divisible By 5","text":"<p>Easy</p> <p>You are given a binary array nums (0-indexed).</p> <p>We define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).</p> <p>For example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5. Return an array of booleans answer where answer[i] is true if xi is divisible by 5.</p>"},{"location":"problems/1018_binary_prefix_divisible_by_5/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [0,1,1]\nOutput: [true,false,false]\nExplanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true.\n</code></pre>"},{"location":"problems/1018_binary_prefix_divisible_by_5/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1,1,1]\nOutput: [false,false,false]\n</code></pre>"},{"location":"problems/1018_binary_prefix_divisible_by_5/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 105</li> <li>nums[i] is either 0 or 1.</li> </ul>"},{"location":"problems/1018_binary_prefix_divisible_by_5/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def prefixesDivBy5(self, nums: List[int]) -&gt; List[bool]:\n        res = []\n        acc = 0\n\n        for num in nums:\n            acc = (2 * acc + num) % 5\n            res.append(acc == 0)\n\n        return res\n</code></pre>"},{"location":"problems/101_symmetric_tree/","title":"101. Symmetric Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p> <pre><code>class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -&gt; bool:\n        return self.helper(root.left, root.right)\n\n    def helper(self, left: Optional[TreeNode], right: Optional[TreeNode]) -&gt; bool:\n        if left is None and right is None:\n            return True\n        if left is None or right is None:\n            return False\n\n        return (\n            left.val == right.val\n            and self.helper(left.left, right.right)\n            and self.helper(left.right, right.left)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1021_remove_outermost_parentheses/","title":"1021. Remove Outermost Parentheses","text":"<p>Easy</p> <p>A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.</p> <ul> <li>For example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses   strings.</li> </ul> <p>A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.</p> <p>Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.</p> <p>Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.</p>"},{"location":"problems/1021_remove_outermost_parentheses/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeOuterParentheses(self, s: str) -&gt; str:\n        res = []\n        count = 0\n\n        for c in s:\n            if c == \"(\":\n                if count != 0:\n                    res.append(c)\n                count += 1\n            elif c == \")\":\n                count -= 1\n                if count != 0:\n                    res.append(c)\n\n        return \"\".join(res)\n</code></pre>"},{"location":"problems/1022_sum_of_root_to_leaf_binary_numbers/","title":"1022. Sum of Root To Leaf Binary Numbers","text":"<p>Easy</p> <p>You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.</p> <ul> <li>For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent   <code>01101</code> in binary, which is 13.</li> </ul> <p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.</p> <p>The test cases are generated so that the answer fits in a 32-bits integer.</p>"},{"location":"problems/1022_sum_of_root_to_leaf_binary_numbers/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def sumRootToLeaf(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return 0\n\n        return self.helper(root, [])\n\n    def helper(self, root: TreeNode, bnum: List[str]) -&gt; int:\n        num = bnum + [str(root.val)]\n\n        if root.left is None and root.right is None:\n            return int(\"\".join(num), 2)\n\n        l = 0\n        if root.left is not None:\n            l = self.helper(root.left, num)\n\n        r = 0\n        if root.right is not None:\n            r = self.helper(root.right, num)\n\n        return l + r\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1025_divisor_game/","title":"1025. Divisor Game","text":"<p>Easy</p> <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:</p> <p>Choosing any x with 0 &lt; x &lt; n and n % x == 0. Replacing the number n on the chalkboard with n - x. Also, if a player cannot make a move, they lose the game.</p> <p>Return true if and only if Alice wins the game, assuming both players play optimally.</p>"},{"location":"problems/1025_divisor_game/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.\n</code></pre>"},{"location":"problems/1025_divisor_game/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n</code></pre>"},{"location":"problems/1025_divisor_game/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= n &lt;= 1000</li> </ul>"},{"location":"problems/1025_divisor_game/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def divisorGame(self, n: int) -&gt; bool:\n        # If n is even Alice can subtract 1 and give Bob an odd number.\n        # Odd numbers have odd factors so Bob will give an even number back to Alice.\n        # The base case is 2 which can be won by choosing 1.\n        return n % 2 == 0\n</code></pre>"},{"location":"problems/102_binary_tree_level_order_traversal/","title":"102. Binary Tree Level Order Traversal","text":"<p>Medium</p> <p>Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).</p>"},{"location":"problems/102_binary_tree_level_order_traversal/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n</code></pre>"},{"location":"problems/102_binary_tree_level_order_traversal/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [1]\nOutput: [[1]]\n</code></pre>"},{"location":"problems/102_binary_tree_level_order_traversal/#example-3","title":"Example 3:","text":"<pre><code>Input: root = []\nOutput: []\n</code></pre>"},{"location":"problems/102_binary_tree_level_order_traversal/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is in the range [0, 2000].</li> <li>-1000 &lt;= Node.val &lt;= 1000</li> </ul>"},{"location":"problems/102_binary_tree_level_order_traversal/#solution","title":"Solution","text":"<pre><code>from collections import deque\n\n\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        if root is None:\n            return None\n\n        res = []\n        queue = deque([root])\n\n        while len(queue) &gt; 0:\n            level = []\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n\n                level.append(curr.val)\n                if curr.left is not None:\n                    queue.append(curr.left)\n                if curr.right is not None:\n                    queue.append(curr.right)\n\n            res.append(level)\n\n        return res\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1037_valid_boomerang/","title":"1037. Valid Boomerang","text":"<p>Easy</p> <p>Given an array points where <code>points[i] = [xi, yi]</code> represents a point on the X-Y plane, return true if these points are a boomerang.</p> <p>A boomerang is a set of three points that are all distinct and not in a straight line.</p>"},{"location":"problems/1037_valid_boomerang/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isBoomerang(self, points: List[List[int]]) -&gt; bool:\n        p1, p2, p3 = points[0], points[1], points[2]\n\n        if p1 == p2 or p1 == p3 or p2 == p3:\n            return False\n\n        if p2[0] - p1[0] == 0 or p3[0] - p2[0] == 0:\n            if p2[0] - p1[0] == 0 and p3[0] - p2[0] == 0:\n                return False\n            else:\n                return True\n\n        m1 = (p2[1] - p1[1]) / (p2[0] - p1[0])\n        m2 = (p3[1] - p2[1]) / (p3[0] - p2[0])\n\n        return m1 != m2\n</code></pre>"},{"location":"problems/103_binary_tree_zigzag_level_order_traversal/","title":"103. Binary Tree Zigzag Level Order Traversal","text":"<p>Medium</p> <p>Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).</p> <pre><code>from collections import deque\n\n\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        if root is None:\n            return None\n\n        res = []\n        queue = deque([root])\n        reverse = False\n\n        while len(queue) &gt; 0:\n            level = []\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n\n                level.append(curr.val)\n                if curr.left is not None:\n                    queue.append(curr.left)\n                if curr.right is not None:\n                    queue.append(curr.right)\n\n            if reverse:\n                level.reverse()\n\n            res.append(level)\n            reverse = not reverse\n\n        return res\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1041_robot_bounded_in_circle/","title":"1041. Robot Bounded In Circle","text":"<p>Medium</p> <p>On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:</p> <ul> <li>The north direction is the positive direction of the y-axis.</li> <li>The south direction is the negative direction of the y-axis.</li> <li>The east direction is the positive direction of the x-axis.</li> <li> <p>The west direction is the negative direction of the x-axis. The robot can   receive one of three instructions:</p> </li> <li> <p>\"G\": go straight 1 unit.</p> </li> <li>\"L\": turn 90 degrees to the left (i.e., anti-clockwise direction).</li> <li>\"R\": turn 90 degrees to the right (i.e., clockwise direction). The robot   performs the instructions given in order, and repeats them forever.</li> </ul> <p>Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>"},{"location":"problems/1041_robot_bounded_in_circle/#example-1","title":"Example 1:","text":"<pre><code>Input: instructions = \"GGLLGG\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 1) --&gt; (0, 0).\nBased on that, we return true.\n</code></pre>"},{"location":"problems/1041_robot_bounded_in_circle/#example-2","title":"Example 2:","text":"<pre><code>Input: instructions = \"GG\"\nOutput: false\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n</code></pre>"},{"location":"problems/1041_robot_bounded_in_circle/#example-3","title":"Example 3:","text":"<pre><code>Input: instructions = \"GL\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (-1, 1) --&gt; (-1, 0) --&gt; (0, 0).\nBased on that, we return true.\n</code></pre>"},{"location":"problems/1041_robot_bounded_in_circle/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= instructions.length &lt;= 100</li> <li>instructions[i] is 'G', 'L' or, 'R'.</li> </ul>"},{"location":"problems/1041_robot_bounded_in_circle/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isRobotBounded(self, instructions: str) -&gt; bool:\n        coords = [0, 0]\n        dir = [0, 1]\n\n        for op in instructions:\n            if op == \"G\":\n                coords = list(map(sum, zip(coords, dir)))\n            elif op == \"L\":\n                dir = [-dir[1], dir[0]]\n            elif op == \"R\":\n                dir = [dir[1], -dir[0]]\n\n        if coords == [0, 0] or dir != [0, 1]:\n            return True\n\n        return False\n</code></pre>"},{"location":"problems/1046_last_stone_weight/","title":"1046. Last Stone Weight","text":"<p>Easy</p> <p>You are given an array of integers stones where <code>stones[i]</code> is the weight of the ith stone.</p> <p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p> <ul> <li>If <code>x == y</code>, both stones are destroyed, and</li> <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code>   has new weight <code>y - x</code>.</li> </ul> <p>At the end of the game, there is at most one stone left.</p> <p>Return the weight of the last remaining stone. If there are no stones left, return <code>0</code>.</p>"},{"location":"problems/1046_last_stone_weight/#solution","title":"Solution","text":"<pre><code>import heapq\n\n\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -&gt; int:\n        stones = [-s for s in stones]\n        heapq.heapify(stones)\n\n        while len(stones) &gt; 1:\n            y = heapq.heappop(stones)\n            x = heapq.heappop(stones)\n            if x != y:\n                heapq.heappush(stones, y - x)\n\n        if len(stones) == 0:\n            return 0\n\n        return -heapq.heappop(stones)\n</code></pre>"},{"location":"problems/1047_remove_all_adjacent_duplicates_in_string/","title":"1047. Remove All Adjacent Duplicates In String","text":"<p>Easy</p> <p>You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.</p> <p>We repeatedly make duplicate removals on s until we no longer can.</p> <p>Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.</p>"},{"location":"problems/1047_remove_all_adjacent_duplicates_in_string/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"abbaca\"\nOutput: \"ca\"\nExplanation: \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n</code></pre>"},{"location":"problems/1047_remove_all_adjacent_duplicates_in_string/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"azxxzy\"\nOutput: \"ay\"\n</code></pre>"},{"location":"problems/1047_remove_all_adjacent_duplicates_in_string/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 105</li> <li>s consists of lowercase English letters.</li> </ul>"},{"location":"problems/1047_remove_all_adjacent_duplicates_in_string/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeDuplicates(self, s: str) -&gt; str:\n        res = []\n\n        for c in s:\n            if res and res[-1] == c:\n                res.pop()\n            else:\n                res.append(c)\n\n        return ''.join(res)\n</code></pre>"},{"location":"problems/104_maximum_depth_of_binary_tree/","title":"104. Maximum Depth of Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, return its maximum depth.</p> <p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>"},{"location":"problems/104_maximum_depth_of_binary_tree/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: 3\n</code></pre>"},{"location":"problems/104_maximum_depth_of_binary_tree/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [1,null,2]\nOutput: 2\n</code></pre>"},{"location":"problems/104_maximum_depth_of_binary_tree/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is in the range [0, 104].</li> <li>-100 &lt;= Node.val &lt;= 100</li> </ul>"},{"location":"problems/104_maximum_depth_of_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -&gt; int:\n        return self.helper(root, 0)\n\n    def helper(self, root, res):\n        if root is None:\n            return res\n        else:\n            return max(\n                self.helper(root.left, res + 1), self.helper(root.right, res + 1)\n            )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1051_height_checker/","title":"1051. Height Checker","text":"<p>Easy</p> <p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where <code>expected[i]</code> is the expected height of the ith student in line.</p> <p>You are given an integer array heights representing the current order that the students are standing in. Each <code>heights[i]</code> is the height of the ith student in line (0-indexed).</p> <p>Return the number of indices where <code>heights[i] != expected[i]</code>.</p>"},{"location":"problems/1051_height_checker/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def heightChecker(self, heights: List[int]) -&gt; int:\n        sheights = sorted(heights)\n        res = 0\n\n        for i in range(len(heights)):\n            if heights[i] != sheights[i]:\n                res += 1\n\n        return res\n</code></pre>"},{"location":"problems/105_construct_binary_tree_from_preorder_and_inorder/","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","text":"<p>Medium</p> <p>Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.</p>"},{"location":"problems/105_construct_binary_tree_from_preorder_and_inorder/#example-1","title":"Example 1:","text":"<pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n</code></pre>"},{"location":"problems/105_construct_binary_tree_from_preorder_and_inorder/#example-2","title":"Example 2:","text":"<pre><code>Input: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</code></pre>"},{"location":"problems/105_construct_binary_tree_from_preorder_and_inorder/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= preorder.length &lt;= 3000</li> <li>inorder.length == preorder.length</li> <li>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</li> <li>preorder and inorder consist of unique values.</li> <li>Each value of inorder also appears in preorder.</li> <li>preorder is guaranteed to be the preorder traversal of the tree.</li> <li>inorder is guaranteed to be the inorder traversal of the tree.</li> </ul>"},{"location":"problems/105_construct_binary_tree_from_preorder_and_inorder/#solution","title":"Solution","text":"<pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -&gt; Optional[TreeNode]:\n        if not preorder or not inorder:\n            return None\n\n        root = preorder[0]\n        idx = inorder.index(root)\n        n = len(inorder[:idx]) + 1\n\n        return TreeNode(\n            root,\n            self.buildTree(preorder[1:n], inorder[:idx]),\n            self.buildTree(preorder[n:], inorder[idx + 1 :]),\n        )\n</code></pre>"},{"location":"problems/107_binary_tree_level_order_traversal_ii/","title":"107. Binary Tree Level Order Traversal II","text":"<p>Medium</p> <p>Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).</p> <pre><code>from collections import deque\n\n\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        if root is None:\n            return None\n\n        res = []\n        queue = deque([root])\n\n        while len(queue) &gt; 0:\n            level = []\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n\n                level.append(curr.val)\n                if curr.left is not None:\n                    queue.append(curr.left)\n                if curr.right is not None:\n                    queue.append(curr.right)\n\n            res.append(level)\n\n        res.reverse()\n        return res\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/108_convert_sorted_array_to_bst/","title":"108. Convert Sorted Array to Binary Search Tree","text":"<p>Easy</p> <p>Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p> <p>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p> <pre><code>class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -&gt; Optional[TreeNode]:\n        if len(nums) == 0:\n            return None\n\n        mid = len(nums) // 2\n\n        return TreeNode(\n            nums[mid],\n            self.sortedArrayToBST(nums[:mid]),\n            self.sortedArrayToBST(nums[mid + 1 :]),\n        )\n</code></pre>"},{"location":"problems/1108_defanging_an_ip_address/","title":"1108. Defanging an IP Address","text":"<p>Easy</p> <p>Given a valid (IPv4) IP address, return a defanged version of that IP address.</p> <p>A defanged IP address replaces every period \".\" with \"[.]\".</p>"},{"location":"problems/1108_defanging_an_ip_address/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def defangIPaddr(self, address: str) -&gt; str:\n        return re.sub(\"\\.\", \"[.]\", address)\n</code></pre>"},{"location":"problems/110_balanced_binary_tree/","title":"110. Balanced Binary Tree","text":"<p>Easy</p> <p>Given a binary tree, determine if it is height-balanced.</p> <p>For this problem, a height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1.</p> <pre><code>class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -&gt; bool:\n        _, ok = self.helper(root)\n        return ok\n\n\n    def helper(self, root: Optional[TreeNode]) -&gt; Tuple[int, bool]:\n        if root is None:\n            return -1, True\n\n        depth1, ok1 = self.helper(root.left)\n        depth2, ok2 = self.helper(root.right)\n\n        if not ok1 or not ok2 or abs(depth1 - depth2) &gt; 1:\n            return -1, False\n\n        return max(depth1, depth2) + 1, True\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/111_minimum_depth_of_binary_tree/","title":"111. Minimum Depth of Binary Tree","text":"<p>Easy</p> <p>Given a binary tree, find its minimum depth.</p> <p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p> <p>Note: A leaf is a node with no children.</p> <pre><code>max_depth = 100000\n\n\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return 0\n\n        left = max_depth\n        if root.left is not None:\n            left = self.minDepth(root.left)\n\n        right = max_depth\n        if root.right is not None:\n            right = self.minDepth(root.right)\n\n        res = min(left, right) + 1\n        if res &gt;= max_depth:\n            return 1\n\n        return res\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1122_relative_sort_array/","title":"1122. Relative Sort Array","text":"<p>Easy</p> <p>Given two arrays <code>arr1</code> and <code>arr2</code>, the elements of <code>arr2</code> are distinct, and all elements in <code>arr2</code> are also in <code>arr1</code>.</p> <p>Sort the elements of <code>arr1</code> such that the relative ordering of items in <code>arr1</code> are the same as in <code>arr2</code>. Elements that do not appear in <code>arr2</code> should be placed at the end of <code>arr1</code> in ascending order.</p>"},{"location":"problems/1122_relative_sort_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -&gt; List[int]:\n        res = []\n        for e in arr2:\n            res.extend(filter(lambda x: x == e, arr1))\n\n        res.extend(sorted(filter(lambda x: x not in arr2, arr1)))\n\n        return res\n</code></pre>"},{"location":"problems/112_path_sum/","title":"112. Path Sum","text":"<p>Easy</p> <p>Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.</p> <p>A leaf is a node with no children.</p> <pre><code>class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -&gt; bool:\n        if root is None:\n            return False\n\n        if root.left is None and root.right is None:\n            return root.val == targetSum\n\n        new_target = targetSum - root.val\n\n        return self.hasPathSum(root.left, new_target) or self.hasPathSum(\n            root.right, new_target\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1137_n-th_tribonacci_number/","title":"1137. N-th Tribonacci Number","text":"<p>Easy</p> <p>The Tribonacci sequence Tn is defined as follows:</p> <p>T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n &gt;= 0.</p> <p>Given <code>n</code>, return the value of <code>Tn</code>.</p>"},{"location":"problems/1137_n-th_tribonacci_number/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def tribonacci(self, n: int) -&gt; int:\n        if n == 0:\n            return 0\n        if n == 1 or n == 2:\n            return 1\n\n        t0, t1, t2 = 0, 1, 1\n        for i in range(3, n + 1):\n            t = t0 + t1 + t2\n            t2, t1, t0 = t, t2, t1\n\n        return t\n</code></pre>"},{"location":"problems/118_pascals_triangle/","title":"118. Pascal's Triangle","text":"<p>Easy</p> <p>Given an integer numRows, return the first numRows of Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p> <pre><code>class Solution:\n    def generate(self, numRows: int) -&gt; List[List[int]]:\n        pascal = []\n\n        for row in range(numRows):\n            r = []\n            for col in range(row + 1):\n                if col == 0 or col == row:\n                    r.append(1)\n                else:\n                    r.append(pascal[row - 1][col - 1] + pascal[row - 1][col])\n            pascal.append(r)\n\n        return pascal\n</code></pre>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/","title":"1190. Reverse Substrings Between Each Pair of Parentheses","text":"<p>Medium</p> <p>You are given a string s that consists of lower case English letters and brackets.</p> <p>Reverse the strings in each pair of matching parentheses, starting from the innermost one.</p> <p>Your result should not contain any brackets.</p>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"(abcd)\"\nOutput: \"dcba\"\n</code></pre>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.\n</code></pre>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n</code></pre>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 2000</li> <li>s only contains lower case English characters and parentheses.</li> <li>It is guaranteed that all parentheses are balanced.</li> </ul>"},{"location":"problems/1190_reverse_substrings_between_each_pair_of_parentheses/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseParentheses(self, s: str) -&gt; str:\n        stackish = []\n\n        for c in s:\n            if c == \")\":\n                r = []\n                while True:\n                    v = stackish.pop()\n                    if v == \"(\":\n                        break\n                    r.append(v)\n                stackish.extend(r)\n            else:\n                stackish.append(c)\n\n        return ''.join(stackish) \n</code></pre>"},{"location":"problems/119_pascals_triangle_ii/","title":"119. Pascal's Triangle II","text":"<p>Easy</p> <p>Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p> <pre><code>class Solution:\n    def getRow(self, rowIndex: int) -&gt; List[int]:\n        pascal = []\n\n        for row in range(rowIndex + 1):\n            r = []\n            for col in range(row + 1):\n                if col == 0 or col == row:\n                    r.append(1)\n                else:\n                    r.append(pascal[row - 1][col - 1] + pascal[row - 1][col])\n            pascal.append(r)\n\n        return pascal[rowIndex]\n</code></pre>"},{"location":"problems/11_container_with_most_water/","title":"11. Container With Most Water","text":"<p>Medium</p> <p>You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return the maximum amount of water a container can store.</p> <p>Notice that you may not slant the container.</p>"},{"location":"problems/11_container_with_most_water/#example-1","title":"Example 1:","text":"<pre><code>Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</code></pre>"},{"location":"problems/11_container_with_most_water/#example-2","title":"Example 2:","text":"<pre><code>Input: height = [1,1]\nOutput: 1\n</code></pre>"},{"location":"problems/11_container_with_most_water/#constraints","title":"Constraints:","text":"<ul> <li>n == height.length</li> <li>2 &lt;= n &lt;= 105</li> <li>0 &lt;= height[i] &lt;= 104</li> </ul>"},{"location":"problems/11_container_with_most_water/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxArea(self, height: List[int]) -&gt; int:\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n\n        while left &lt; right:\n            max_area = max(min(height[left], height[right]) * (right - left), max_area)\n            if height[left] &lt; height[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return max_area\n</code></pre>"},{"location":"problems/1200_minimum_absolute_difference/","title":"1200. Minimum Absolute Difference","text":"<p>Easy</p> <p>Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.</p> <p>Return a list of pairs in ascending order(with respect to pairs), each pair <code>[a, b]</code> follows</p> <ul> <li><code>a</code>, <code>b</code> are from <code>arr</code></li> <li><code>a &lt; b</code></li> <li><code>b - a</code> equals to the minimum absolute difference of any two elements in <code>arr</code></li> </ul>"},{"location":"problems/1200_minimum_absolute_difference/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minimumAbsDifference(self, arr: List[int]) -&gt; List[List[int]]:\n        arr.sort()\n        pairs = list(zip(arr[:-1], arr[1:]))\n        m = min([y - x for [x, y] in pairs])\n        return [[x, y] for [x, y] in pairs if y - x == m]\n</code></pre>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/","title":"1217. Minimum Cost to Move Chips to The Same Position","text":"<p>Easy</p> <p>We have n chips, where the position of the ith chip is position[i].</p> <p>We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:</p> <ul> <li>position[i] + 2 or position[i] - 2 with cost = 0.</li> <li>position[i] + 1 or position[i] - 1 with cost = 1. Return the minimum cost   needed to move all the chips to the same position.</li> </ul>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/#example-1","title":"Example 1:","text":"<pre><code>Input: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n</code></pre>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/#example-2","title":"Example 2:","text":"<pre><code>Input: position = [2,2,2,3,3]\nOutput: 2\nExplanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n</code></pre>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/#example-3","title":"Example 3:","text":"<pre><code>Input: position = [1,1000000000]\nOutput: 1\n</code></pre>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= position.length &lt;= 100</li> <li>1 &lt;= position[i] &lt;= 10^9</li> </ul>"},{"location":"problems/1217_minimum_cost_to_move_chips_to_the_same_position/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minCostToMoveChips(self, position: List[int]) -&gt; int:\n        evens, odds = 0, 0\n\n        for p in position:\n            if p % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n\n        return min(evens, odds)\n</code></pre>"},{"location":"problems/121_best_time_to_buy_and_sell_stock/","title":"121. Best Time to Buy and Sell Stock","text":"<p>Easy</p> <p>You are given an array prices where prices[i] is the price of a given stock on the ith day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.</p>"},{"location":"problems/121_best_time_to_buy_and_sell_stock/#example-1","title":"Example 1:","text":"<pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</code></pre>"},{"location":"problems/121_best_time_to_buy_and_sell_stock/#example-2","title":"Example 2:","text":"<pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</code></pre>"},{"location":"problems/121_best_time_to_buy_and_sell_stock/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= prices.length &lt;= 105</li> <li>0 &lt;= prices[i] &lt;= 104</li> </ul>"},{"location":"problems/121_best_time_to_buy_and_sell_stock/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        min_price = prices[0]\n        max_profit = 0\n\n        for price in prices:\n            if price &lt;= min_price:\n                min_price = price\n            elif price - min_price &gt; max_profit:\n                max_profit = price - min_price\n\n        return max_profit\n</code></pre>"},{"location":"problems/122_best_time_to_buy_and_sell_stock_ii/","title":"122. Best Time to Buy and Sell Stock II","text":"<p>Medium</p> <p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] &gt; prices[i - 1]:\n                max_profit += prices[i] - prices[i - 1]\n\n        return max_profit\n</code></pre>"},{"location":"problems/125_valid_palindrome/","title":"125. Valid Palindrome","text":"<p>Easy</p> <p>Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p> <pre><code>import re\n\n\nclass Solution:\n    def isPalindrome(self, s: str) -&gt; bool:\n        t = re.sub(\"[^A-Za-z0-9]\", \"\", s).lower()\n        return t == t[::-1]\n</code></pre>"},{"location":"problems/1275_find_winner_on_a_tic_tac_toe_game/","title":"1275 find winner on a tic tac toe game","text":"<ol> <li>Find Winner on a Tic Tac Toe Game</li> </ol> <p>Easy</p> <p>Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:</p> <ul> <li>Players take turns placing characters into empty squares ' '.</li> <li>The first player A always places 'X' characters, while the second player B   always places 'O' characters.</li> <li>'X' and 'O' characters are always placed into empty squares, never on filled   ones.</li> <li>The game ends when there are three of the same (non-empty) character filling   any row, column, or diagonal.</li> <li>The game also ends if all squares are non-empty.</li> <li>No more moves can be played if the game is over.</li> </ul> <p>Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".</p> <p>You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.</p>"},{"location":"problems/1275_find_winner_on_a_tic_tac_toe_game/#example-1","title":"Example 1:","text":"<pre><code>Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: A wins, they always play first.\n</code></pre>"},{"location":"problems/1275_find_winner_on_a_tic_tac_toe_game/#example-2","title":"Example 2:","text":"<pre><code>Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: B wins.\n</code></pre>"},{"location":"problems/1275_find_winner_on_a_tic_tac_toe_game/#example-3","title":"Example 3:","text":"<pre><code>Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.\n</code></pre> <p>Constraints:</p> <ul> <li>1 &lt;= moves.length &lt;= 9</li> <li>moves[i].length == 2</li> <li>0 &lt;= rowi, coli &lt;= 2</li> <li>There are no repeated elements on moves.</li> <li>moves follow the rules of tic tac toe.</li> </ul>"},{"location":"problems/1275_find_winner_on_a_tic_tac_toe_game/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def tictactoe(self, moves: List[List[int]]) -&gt; str:\n        rows = [[0] * 3 for _ in range(2)]\n        cols = [[0] * 3 for _ in range(2)]\n        diag1 = [0] * 2\n        diag2 = [0] * 2\n        p = 0\n\n        for r, c in moves:\n            rows[p][r] += 1\n            cols[p][c] += 1\n            if r == c:\n                diag1[p] += 1\n            if r + c == 2:\n                diag2[p] += 1\n\n            if 3 in (rows[p][r], cols[p][c], diag1[p], diag2[p]):\n                if p == 0:\n                    return \"A\"\n                else:\n                    return \"B\"\n\n            p = 1 - p\n\n        if len(moves) &lt; 9:\n            return \"Pending\"\n        else:\n            return \"Draw\"\n</code></pre>"},{"location":"problems/1283_find_the_smallest_divisor_given_a_threshold/","title":"1283. Find the Smallest Divisor Given a Threshold","text":"<p>Medium</p> <p>Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.</p> <p>Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).</p> <p>The test cases are generated so that there will be an answer.</p>"},{"location":"problems/1283_find_the_smallest_divisor_given_a_threshold/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def smallestDivisor(self, nums: List[int], threshold: int) -&gt; int:\n        minD = 1\n        maxD = max(nums) + 1\n\n        while minD &lt; maxD:\n            mid = (maxD + minD) // 2\n            res = sum([math.ceil(num / mid) for num in nums])\n\n            print(minD, mid, maxD, res)\n            if res &lt;= threshold:\n                maxD = mid\n            else:\n                minD = mid + 1\n\n        return maxD\n</code></pre>"},{"location":"problems/128_longest_consecutive_sequence/","title":"128. Longest Consecutive Sequence","text":"<p>Medium</p> <p>Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.</p> <p>You must write an algorithm that runs in O(n) time.</p>"},{"location":"problems/128_longest_consecutive_sequence/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n</code></pre>"},{"location":"problems/128_longest_consecutive_sequence/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n</code></pre>"},{"location":"problems/128_longest_consecutive_sequence/#constraints","title":"Constraints:","text":"<ul> <li>0 &lt;= nums.length &lt;= 105</li> <li>-109 &lt;= nums[i] &lt;= 109</li> </ul>"},{"location":"problems/128_longest_consecutive_sequence/#solution","title":"Solution","text":"<pre><code>class Solution:\n  def longestConsecutive(self, nums: List[int]) -&gt; int:\n    res = 0\n    seen = set(nums)\n\n    for num in nums:\n      if num - 1 not in seen:\n          length = 0\n\n          while num in seen:\n            num += 1\n            length += 1\n\n          res = max(res, length)\n\n    return res\n</code></pre>"},{"location":"problems/12_integer_to_roman/","title":"12. Integer to Roman","text":"<p>Medium</p> <p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p> Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 <p>For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p> <ul> <li>I can be placed before V (5) and X (10) to make 4 and 9.</li> <li>X can be placed before L (50) and C (100) to make 40 and 90.</li> <li>C can be placed before D (500) and M (1000) to make 400 and 900.</li> </ul> <p>Given an integer, convert it to a roman numeral.</p>"},{"location":"problems/12_integer_to_roman/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def intToRoman(self, num: int) -&gt; str:\n        res = []\n        for val, rom in int_to_roman_dict.items():\n            while val &lt;= num:\n                num -= val\n                res.append(rom)\n\n        return \"\".join(res)\n\n\nint_to_roman_dict = {\n    1000: \"M\",\n    900: \"CM\",\n    500: \"D\",\n    400: \"CD\",\n    100: \"C\",\n    90: \"XC\",\n    50: \"L\",\n    40: \"XL\",\n    10: \"X\",\n    9: \"IX\",\n    5: \"V\",\n    4: \"IV\",\n    1: \"I\",\n}\n</code></pre>"},{"location":"problems/1309_decrypt_string_from_alphabet_to_integer_mapping/","title":"1309. Decrypt String from Alphabet to Integer Mapping","text":"<p>Easy</p> <p>You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:</p> <ul> <li>Characters ('a' to 'i') are represented by ('1' to '9') respectively.</li> <li>Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.</li> </ul> <p>Return the string formed after mapping.</p> <p>The test cases are generated so that a unique mapping will always exist.</p>"},{"location":"problems/1309_decrypt_string_from_alphabet_to_integer_mapping/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -&gt; \"10#\" , \"k\" -&gt; \"11#\" , \"a\" -&gt; \"1\" , \"b\" -&gt; \"2\".\n</code></pre>"},{"location":"problems/1309_decrypt_string_from_alphabet_to_integer_mapping/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"1326#\"\nOutput: \"acz\"\n</code></pre>"},{"location":"problems/1309_decrypt_string_from_alphabet_to_integer_mapping/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 1000</li> <li>s consists of digits and the '#' letter.</li> <li>s will be a valid string such that mapping is always possible.</li> </ul>"},{"location":"problems/1309_decrypt_string_from_alphabet_to_integer_mapping/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def freqAlphabets(self, s: str) -&gt; str:\n        res = \"\"\n        i = 0\n\n        while i &lt; len(s):\n            if i + 2 &lt; len(s) and s[i + 2] == \"#\":\n                v = int(s[i : i + 2])\n                i += 3\n            else:\n                v = int(s[i])\n                i += 1\n\n            res += chr(v - 1 + ord(\"a\"))\n\n        return res\n</code></pre>"},{"location":"problems/1331_rank_transform_of_an_array/","title":"1331. Rank Transform of an Array","text":"<p>Easy</p> <p>Given an array of integers arr, replace each element with its rank.</p> <p>The rank represents how large the element is. The rank has the following rules:</p> <ul> <li>Rank is an integer starting from 1.</li> <li>The larger the element, the larger the rank. If two elements are equal, their   rank must be the same.</li> <li>Rank should be as small as possible.</li> </ul>"},{"location":"problems/1331_rank_transform_of_an_array/#example-1","title":"Example 1:","text":"<pre><code>Input: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n</code></pre>"},{"location":"problems/1331_rank_transform_of_an_array/#example-2","title":"Example 2:","text":"<pre><code>Input: arr = [100,100,100]\nOutput: [1,1,1]\nExplanation: Same elements share the same rank.\n</code></pre>"},{"location":"problems/1331_rank_transform_of_an_array/#example-3","title":"Example 3:","text":"<pre><code>Input: arr = [37,12,28,9,100,56,80,5,12]\nOutput: [5,3,4,2,8,6,7,1,3]\n</code></pre>"},{"location":"problems/1331_rank_transform_of_an_array/#constraints","title":"Constraints:","text":"<p>0 &lt;= arr.length &lt;= 105 -109 &lt;= arr[i] &lt;= 109</p>"},{"location":"problems/1331_rank_transform_of_an_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def arrayRankTransform(self, arr: List[int]) -&gt; List[int]:\n        if arr == []:\n            return []\n\n        sorted_arr = sorted(arr)\n        m = {}\n\n        rank = 1\n        last = sorted_arr[0]\n\n        for a in sorted_arr:\n            if a != last:\n                last = a\n                rank += 1\n            m[a] = rank\n\n        return [m[a] for a in arr]\n</code></pre>"},{"location":"problems/1332_remove_palindromic_subsequences/","title":"1332. Remove Palindromic Subsequences","text":"<p>Easy</p> <p>You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.</p> <p>Return the minimum number of steps to make the given string empty.</p> <p>A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.</p> <p>A string is called palindrome if is one that reads the same backward as well as forward.</p>"},{"location":"problems/1332_remove_palindromic_subsequences/#craigs-notes","title":"Craig's notes","text":"<ul> <li>If the input is not a palindrome, then we can do it in two steps by deleting   all 'a's, then deleting all 'b's.</li> </ul>"},{"location":"problems/1332_remove_palindromic_subsequences/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.\n</code></pre>"},{"location":"problems/1332_remove_palindromic_subsequences/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -&gt; \"bb\" -&gt; \"\".\nRemove palindromic subsequence \"a\" then \"bb\".\n</code></pre>"},{"location":"problems/1332_remove_palindromic_subsequences/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -&gt; \"b\" -&gt; \"\".\nRemove palindromic subsequence \"baab\" then \"b\".\n</code></pre>"},{"location":"problems/1332_remove_palindromic_subsequences/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 1000</li> <li>s[i] is either 'a' or 'b'.</li> </ul>"},{"location":"problems/1332_remove_palindromic_subsequences/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removePalindromeSub(self, s: str) -&gt; int:\n        l, r = 0, len(s) - 1\n\n        while l &lt; r:\n            if s[l] == s[r]:\n                l += 1\n                r -= 1\n            else:\n                return 2\n\n        return 1\n</code></pre>"},{"location":"problems/136_single_number/","title":"136. Single Number","text":"<p>Easy</p> <p>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</p> <p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p> <pre><code>class Solution:\n    def singleNumber(self, nums: List[int]) -&gt; int:\n        d = {}\n        for num in nums:\n            d[num] = d.get(num, 0) + 1\n\n        for k, v in d.items():\n            if v == 1:\n                return k\n</code></pre>"},{"location":"problems/139_word_break/","title":"139 word break","text":"<ol> <li>Word Break</li> </ol> <p>Medium</p> <p>Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p>"},{"location":"problems/139_word_break/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n</code></pre>"},{"location":"problems/139_word_break/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n</code></pre>"},{"location":"problems/139_word_break/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n</code></pre>"},{"location":"problems/139_word_break/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 300</li> <li>1 &lt;= wordDict.length &lt;= 1000</li> <li>1 &lt;= wordDict[i].length &lt;= 20</li> <li>s and wordDict[i] consist of only lowercase English letters.</li> <li>All the strings of wordDict are unique.</li> </ul>"},{"location":"problems/139_word_break/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        wordSet = set(wordDict)\n\n        @functools.cache\n        def wordBreak(s: str):\n            if s in wordSet:\n                return True\n\n            for i in range(len(s)):\n                if s[:i] in wordSet and wordBreak(s[i:]):\n                    return True\n\n        return wordBreak(s)\n</code></pre>"},{"location":"problems/13_roman_to_integer/","title":"13. Roman to Integer","text":"<p>Easy</p> <p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p> Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 <p>For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p> <ul> <li>I can be placed before V (5) and X (10) to make 4 and 9.</li> <li>X can be placed before L (50) and C (100) to make 40 and 90.</li> <li>C can be placed before D (500) and M (1000) to make 400 and 900.</li> </ul> <p>Given a roman numeral, convert it to an integer.</p>"},{"location":"problems/13_roman_to_integer/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def romanToInt(self, s: str) -&gt; int:\n        res = 0\n\n        for i, v in enumerate(s):\n            if i + 1 &lt; len(s) and d[s[i]] &lt; d[s[i + 1]]:\n                res -= d[v]\n            else:\n                res += d[v]\n\n        return res\n\n\nd = {\n    \"I\": 1,\n    \"V\": 5,\n    \"X\": 10,\n    \"L\": 50,\n    \"C\": 100,\n    \"D\": 500,\n    \"M\": 1000,\n}\n</code></pre>"},{"location":"problems/141_linked_list_cycle/","title":"141. Linked List Cycle","text":"<p>Easy</p> <p>Given head, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.</p> <p>Return true if there is a cycle in the linked list. Otherwise, return false.</p>"},{"location":"problems/141_linked_list_cycle/#example-1","title":"Example 1:","text":"<pre><code>Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</code></pre>"},{"location":"problems/141_linked_list_cycle/#example-2","title":"Example 2:","text":"<pre><code>Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</code></pre>"},{"location":"problems/141_linked_list_cycle/#example-3","title":"Example 3:","text":"<pre><code>Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</code></pre>"},{"location":"problems/141_linked_list_cycle/#constraints","title":"Constraints:","text":"<ul> <li>The number of the nodes in the list is in the range [0, 104].</li> <li>-105 &lt;= Node.val &lt;= 105</li> <li>pos is -1 or a valid index in the linked-list.</li> </ul> <p>Follow up: Can you solve it using O(1) (i.e. constant) memory?</p>"},{"location":"problems/141_linked_list_cycle/#solution","title":"Solution","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -&gt; bool:\n        slow = head\n        fast = head\n\n        while slow is not None and fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                return True\n\n        return False\n</code></pre>"},{"location":"problems/142_linked_list_cycle_ii/","title":"142. Linked List Cycle II","text":"<p>Medium</p> <p>Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.</p> <p>Do not modify the linked list.</p> <pre><code>class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = head\n        fast = head\n\n        while slow is not None and fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                seek = head\n                while True:\n                    if seek == slow:\n                        return seek\n\n                    seek = seek.next\n                    slow = slow.next\n\n        return None\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n</code></pre>"},{"location":"problems/143_reorder_list/","title":"143. Reorder List","text":"<p>Medium</p> <p>You are given the head of a singly linked-list. The list can be represented as:</p> <pre><code>L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n</code></pre> <p>Reorder the list to be on the following form:</p> <pre><code>L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n</code></pre> <p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p>"},{"location":"problems/143_reorder_list/#example-1","title":"Example 1:","text":"<pre><code>Input: head = [1,2,3,4]\nOutput: [1,4,2,3]\n</code></pre>"},{"location":"problems/143_reorder_list/#example-2","title":"Example 2:","text":"<pre><code>Input: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n</code></pre>"},{"location":"problems/143_reorder_list/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the list is in the range [1, 5 * 104].</li> <li>1 &lt;= Node.val &lt;= 1000</li> </ul>"},{"location":"problems/143_reorder_list/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reorderList(self, head: ListNode) -&gt; None:\n        def splitAtMid(head: ListNode):\n            prev = None\n            slow = head\n            fast = head\n\n            while fast and fast.next:\n                prev = slow\n                slow = slow.next\n                fast = fast.next.next\n\n            prev.next = None\n\n            return slow\n\n        def reverse(head: ListNode) -&gt; ListNode:\n            prev = None\n            curr = head\n\n            while curr:\n                next = curr.next\n                curr.next = prev\n                prev = curr\n                curr = next\n\n            return prev\n\n        def merge(l1: ListNode, l2: ListNode) -&gt; None:\n            while l2:\n                next = l1.next\n                l1.next = l2\n                l1 = l2\n                l2 = next\n\n        if not head or not head.next:\n            return\n\n        mid = splitAtMid(head)\n        reversed = reverse(mid)\n        merge(head, reversed)\n</code></pre>"},{"location":"problems/144_binary_tree_preorder_traversal/","title":"144. Binary Tree Preorder Traversal","text":"<p>Easy</p> <p>Given the root of a binary tree, return the preorder traversal of its nodes' values</p> <pre><code>class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            [root.val]\n            + self.preorderTraversal(root.left)\n            + self.preorderTraversal(root.right)\n        )\n\n\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/145_binary_tree_postorder_traversal/","title":"145. Binary Tree Postorder Traversal","text":"<p>Easy</p> <p>Given the root of a binary tree, return the postorder traversal of its nodes' values.</p> <pre><code>class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            self.postorderTraversal(root.left)\n            + self.postorderTraversal(root.right)\n            + [root.val]\n        )\n\n\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1460_make_two_arrays_equal_by_reversing_subarrays/","title":"1460. Make Two Arrays Equal by Reversing Subarrays","text":"<p>Easy</p> <p>You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty subarray of arr and reverse it. You are allowed to make any number of steps.</p> <p>Return true if you can make arr equal to target or false otherwise.</p>"},{"location":"problems/1460_make_two_arrays_equal_by_reversing_subarrays/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def canBeEqual(self, target: List[int], arr: List[int]) -&gt; bool:\n        return sorted(target) == sorted(arr)\n</code></pre>"},{"location":"problems/146_lru_cache/","title":"146. LRU Cache","text":"<p>Medium</p> <p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> <li><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size capacity.</li> <li><code>int get(int key)</code> Return the value of the key if the key exists, otherwise return -1.</li> <li><code>void put(int key, int value)</code> Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.</li> </ul> <p>The functions<code>get</code> and <code>put</code> must each run in O(1) average time complexity.</p> <pre><code>NOT_IN_CACHE = -1\n\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.key_to_node = {}\n        self.list = LinkedList()\n\n    def get(self, key: int) -&gt; int:\n        if key not in self.key_to_node:\n            return NOT_IN_CACHE\n\n        node = self.key_to_node[key]\n        self.list.delete(node)\n        self.list.insert_at_head(node)\n        return node.val\n\n    def put(self, key: int, value: int) -&gt; None:\n        if key in self.key_to_node:\n            node = self.key_to_node[key]\n            node.val = value\n            self.list.delete(node)\n            self.list.insert_at_head(node)\n            return\n\n        if len(self.key_to_node) &gt;= self.capacity:\n            node = self.list.tail.prev\n            del self.key_to_node[node.key]\n            self.list.delete(node)\n\n        node = Node(key, value)\n        self.list.insert_at_head(node)\n        self.key_to_node[key] = node\n\n\nclass Node:\n    def __init__(self, key, val, prev=None, next=None):\n        self.key = key\n        self.val = val\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = Node(\"head\", \"head\")\n        self.tail = Node(\"tail\", \"tail\")\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def insert_at_head(self, node):\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n        node.prev = self.head\n\n    def delete(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n</code></pre>"},{"location":"problems/1480_running_sum_of_1d_array/","title":"1480. Running Sum of 1d Array","text":"<p>Easy</p> <p>Given an array <code>nums</code>. We define a running sum of an array as <code>runningSum[i] = sum(nums[0]\u2026nums[i])</code>.</p> <p>Return the running sum of <code>nums</code>.</p>"},{"location":"problems/1480_running_sum_of_1d_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def runningSum(self, nums: List[int]) -&gt; List[int]:\n        sums = [nums[0]]\n        for i in range(1, len(nums)):\n            sums.append(sums[i - 1] + nums[i])\n\n        return sums\n</code></pre>"},{"location":"problems/14_longest_common_prefix/","title":"14. Longest Common Prefix","text":"<p>Easy</p> <p>Write a function to find the longest common prefix string amongst an array of strings.</p> <p>If there is no common prefix, return an empty string \"\".</p>"},{"location":"problems/14_longest_common_prefix/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -&gt; str:\n        l = min([len(str) for str in strs])\n\n        res = []\n        for i in range(l):\n            if len(set([str[i] for str in strs])) == 1:\n                res.append(strs[0][i])\n            else:\n                break\n\n        return \"\".join(res)\n</code></pre>"},{"location":"problems/152_maximum_product_subarray/","title":"152. Maximum Product Subarray","text":"<p>Medium</p> <p>Given an integer array nums, find a subarray that has the largest product, and return the product.</p> <p>The test cases are generated so that the answer will fit in a 32-bit integer.</p>"},{"location":"problems/152_maximum_product_subarray/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n</code></pre>"},{"location":"problems/152_maximum_product_subarray/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n</code></pre>"},{"location":"problems/152_maximum_product_subarray/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 2 * 104</li> <li>-10 &lt;= nums[i] &lt;= 10</li> <li>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</li> </ul>"},{"location":"problems/152_maximum_product_subarray/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxProduct(self, nums: List[int]) -&gt; int:\n        res = nums[0]\n        currMin = nums[0]  # for negative numbers\n        currMax = nums[0]\n\n        for i in range(1, len(nums)):\n            mini = currMin * nums[i]\n            maxi = currMax * nums[i]\n            currMin = min(nums[i], mini, maxi)\n            currMax = max(nums[i], mini, maxi)\n            res = max(res, currMax)\n\n        return res\n</code></pre>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/","title":"153. Find Minimum in Rotated Sorted Array","text":"<p>Medium</p> <p>Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:</p> <ul> <li>[4,5,6,7,0,1,2] if it was rotated 4 times.</li> <li>[0,1,2,4,5,6,7] if it was rotated 7 times.</li> </ul> <p>Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].</p> <p>Given the sorted rotated array nums of unique elements, return the minimum element of this array.</p> <p>You must write an algorithm that runs in O(log n) time.</p>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n</code></pre>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n</code></pre>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n</code></pre>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/#constraints","title":"Constraints:","text":"<ul> <li>n == nums.length</li> <li>1 &lt;= n &lt;= 5000</li> <li>-5000 &lt;= nums[i] &lt;= 5000</li> <li>All the integers of nums are unique.</li> <li>nums is sorted and rotated between 1 and n times.</li> </ul>"},{"location":"problems/153_find_minimum_in_rotated_sorted_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findMin(self, nums: List[int]) -&gt; int:\n        return self.helper(nums, 0, len(nums) - 1)\n\n    def helper(self, nums: List[int], low: int, high: int) -&gt; int:\n        if low &gt; high:\n            return nums[0]\n\n        if low == high:\n            return nums[low]\n\n        mid = (high + low) // 2\n\n        if nums[mid] &gt; nums[mid + 1]:\n            return nums[mid + 1]\n\n        if nums[mid - 1] &gt; nums[mid]:\n            return nums[mid]\n\n        if nums[mid] &lt; nums[high]:\n            return self.helper(nums, low, mid - 1)\n\n        return self.helper(nums, mid + 1, high)\n</code></pre>"},{"location":"problems/155_min_stack/","title":"155. Min Stack","text":"<p>Medium</p> <p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p> <p>Implement the <code>MinStack</code> class:</p> <ul> <li><code>MinStack()</code> initializes the stack object.</li> <li><code>void push(val)</code> pushes the element val onto the stack.</li> <li><code>void pop()</code> removes the element on the top of the stack.</li> <li><code>int top()</code> gets the top element of the stack.</li> <li><code>int getMin()</code> retrieves the minimum element in the stack.</li> </ul> <p>You must implement a solution with O(1) time complexity for each function.</p> <pre><code>class MinStack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, val: int) -&gt; None:\n        if len(self.stack) == 0:\n            m = val\n        else:\n            m = min(val, self.getMin())\n\n        self.stack.append((val, m))\n\n    def pop(self) -&gt; None:\n        self.stack.pop()\n\n    def top(self) -&gt; int:\n        return self.stack[-1][0]\n\n    def getMin(self) -&gt; int:\n        return self.stack[-1][1]\n</code></pre>"},{"location":"problems/1578_minimum_time_to_make_rope_colorful/","title":"1578. Minimum Time to Make Rope Colorful","text":"<p>Medium</p> <p>Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where <code>colors[i]</code> is the color of the ith balloon.</p> <p>Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where <code>neededTime[i]</code> is the time (in seconds) that Bob needs to remove the ith balloon from the rope.</p> <p>Return the minimum time Bob needs to make the rope colorful.</p>"},{"location":"problems/1578_minimum_time_to_make_rope_colorful/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -&gt; int:\n        res = 0\n\n        for i in range(1, len(colors)):\n            if colors[i - 1] == colors[i]:\n                if neededTime[i - 1] &lt; neededTime[i]:\n                    res += neededTime[i - 1]\n                else:\n                    res += neededTime[i]\n                    neededTime[i] = neededTime[i - 1]\n\n        return res\n</code></pre>"},{"location":"problems/15_3sum/","title":"15. 3Sum","text":"<p>Medium</p> <p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p>"},{"location":"problems/15_3sum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        res = set()\n\n        for i in range(n):\n            j, k = i + 1, n - 1\n            while j &lt; k:\n                potential = nums[i] + nums[j] + nums[k]\n                if potential == 0:\n                    res.add((nums[i], nums[j], nums[k]))\n                    j += 1\n                elif potential &lt; 0:\n                    j += 1\n                else:\n                    k -= 1\n\n        return list(res)\n</code></pre>"},{"location":"problems/160_intersection_of_two_linked_lists/","title":"160. Intersection of Two Linked Lists","text":"<p>Easy</p> <p>Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return nil.</p> <p>It is guaranteed that there are no cycles anywhere in the entire linked structure.</p> <p>Note that the linked lists must retain their original structure after the function returns.</p> <pre><code>class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def getIntersectionNode(\n        self, headA: ListNode, headB: ListNode\n    ) -&gt; Optional[ListNode]:\n        s = set()\n        curr = headA\n\n        while curr is not None:\n            s.add(curr)\n            curr = curr.next\n\n        curr = headB\n        while curr is not None:\n            if curr in s:\n                return curr\n            curr = curr.next\n\n        return None\n</code></pre>"},{"location":"problems/165_compare_version_numbers/","title":"165. Compare Version Numbers","text":"<p>Medium</p> <p>Given two version numbers, version1 and version2, compare them.</p> <p>Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.</p> <p>To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 &lt; 1.</p> <p>Return the following:</p> <ul> <li>If version1 &lt; version2, return -1.</li> <li>If version1 &gt; version2, return 1.</li> <li>Otherwise, return 0.</li> </ul> <pre><code>class Solution:\n    def compareVersion(self, version1: str, version2: str) -&gt; int:\n        v1 = [int(c) for c in version1.split(\".\")]\n        v2 = [int(c) for c in version2.split(\".\")]\n\n        lenv1 = len(v1)\n        lenv2 = len(v2)\n        l = max(lenv1, lenv2)\n\n        v1 = v1 + [0] * (l - lenv1)\n        v2 = v2 + [0] * (l - lenv2)\n\n        for i in range(l):\n            if v1[i] &lt; v2[i]:\n                return -1\n            elif v1[i] &gt; v2[i]:\n                return 1\n\n        return 0\n</code></pre>"},{"location":"problems/167_two_sum_ii/","title":"167. Two Sum II - Input array is sorted","text":"<p>Medium</p> <p>Given an array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.</p> <p>Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length.</p> <p>The tests are generated such that there is exactly one solution. You may not use the same element twice.</p> <p>Your solution must use only constant extra space.</p> <pre><code>class Solution:\n    def twoSum(self, numbers: List[int], target: int) -&gt; List[int]:\n        n = len(numbers)\n        i, j = 0, n - 1\n        while i &lt; j:\n            candidate = numbers[i] + numbers[j]\n            if candidate &lt; target or (i &gt; 0 and numbers[i - 1] == numbers[i]):\n                i += 1\n            elif candidate &gt; target:\n                j -= 1\n            else:\n                # the answer is supposed to be 1-indexed\n                return [i + 1, j + 1]\n</code></pre>"},{"location":"problems/168_excel_style_column_title/","title":"168. Excel Sheet Column Title","text":"<p>Easy</p> <p>Given an integer column_number, return its corresponding column title as it appears in an Excel sheet.</p> <p>For example: <pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28\n...\n</code></pre></p> <pre><code>class Solution:\n    def convertToTitle(self, columnNumber: int) -&gt; str:\n        a = ord(\"A\")\n        res = \"\"\n\n        while columnNumber &gt; 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + a) + res\n            columnNumber //= 26\n\n        return res\n</code></pre>"},{"location":"problems/169_majority_element/","title":"169. Majority Element","text":"<p>Easy</p> <p>Given an array nums of size n, return the majority element.</p> <p>The majority element is the element that appears more than <code>floor(n/2)</code> times. You may assume that the majority element always exists in the array.</p> <pre><code>class Solution:\n    def majorityElement(self, nums: List[int]) -&gt; int:\n        majority = len(nums) // 2\n        d = {}\n\n        for num in nums:\n            d[num] = d.get(num, 0) + 1\n\n            if d[num] &gt; majority:\n                return num\n</code></pre>"},{"location":"problems/16_3sum_closest/","title":"16. 3Sum Closest","text":"<p>Medium</p> <p>Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.</p> <p>Return the sum of the three integers.</p> <p>You may assume that each input would have exactly one solution.</p>"},{"location":"problems/16_3sum_closest/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        nums.sort()\n        best_candidate = nums[0] + nums[1] + nums[2]\n\n        n = len(nums)\n        for i in range(n):\n            j, k = i + 1, n - 1\n            while j &lt; k:\n                candidate = nums[i] + nums[j] + nums[k]\n\n                if candidate == target:\n                    return candidate\n\n                if abs(target - candidate) &lt; abs(target - best_candidate):\n                    best_candidate = candidate\n\n                if candidate &lt; target:\n                    j += 1\n                else:\n                    k -= 1\n\n        return best_candidate\n</code></pre>"},{"location":"problems/171_excel_sheet_column_number/","title":"171. Excel Sheet Column Number","text":"<p>Easy</p> <p>Given a string column_title that represents the column title as appear in an Excel sheet, return its corresponding column number.</p> <p>For example: <pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28\n...\n</code></pre></p> <pre><code>class Solution:\n    def titleToNumber(self, columnTitle: str) -&gt; int:\n        a = ord(\"A\")\n        res = 0\n\n        for c in columnTitle:\n            res = res * 26 + (ord(c) - a) + 1\n\n        return res\n</code></pre>"},{"location":"problems/172_factorial_trailing_zeros/","title":"172. Factorial Trailing Zeroes","text":"<p>Medium</p> <p>Given an integer n, return the number of trailing zeroes in n!.</p> <pre><code>class Solution:\n    def trailingZeroes(self, n: int) -&gt; int:\n        res = 0\n\n        while n &gt; 0:\n            n //= 5\n            res += 1\n\n        return res\n</code></pre>"},{"location":"problems/173_binary_search_tree_iterator/","title":"173. Binary Search Tree Iterator","text":"<p>Medium</p> <p>Implement the <code>BSTIterator</code> class that represents an iterator over the in-order traversal of a binary search tree (BST):</p> <ul> <li><code>BSTIterator(TreeNode root)</code> Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li> <li><code>boolean hasNext()</code> Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.</li> <li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li> </ul> <p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p> <p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p> <pre><code>class BSTIterator:\n    def __init__(self, root: Optional[TreeNode]):\n        self.elements = self.reverse_flatten(root)\n\n    def next(self) -&gt; int:\n        return self.elements.pop()\n\n    def hasNext(self) -&gt; bool:\n        if len(self.elements) &gt; 0:\n            return True\n\n        return False\n\n    def reverse_flatten(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            self.reverse_flatten(root.right)\n            + [root.val]\n            + self.reverse_flatten(root.left)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/1752_check_if_array_is_sorted_and_rotated/","title":"1752. Check if Array Is Sorted and Rotated","text":"<p>Easy</p> <p>Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.</p> <p>There may be duplicates in the original array.</p> <p>Note: An array <code>A</code> rotated by <code>x</code> positions results in an array <code>B</code> of the same length such that <code>A[i] == B[(i+x) % A.length]</code>, where <code>%</code> is the modulo operation.</p>"},{"location":"problems/1752_check_if_array_is_sorted_and_rotated/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def check(self, nums: List[int]) -&gt; bool:\n        n = len(nums)\n        pivot = 0\n\n        for i in range(1, n):\n            if nums[i - 1] &gt; nums[i]:\n                pivot = i\n                break\n\n        if pivot == 0:\n            return True\n\n        rotatedNums = nums[pivot:] + nums[:pivot]\n        for i in range(1, n):\n            if rotatedNums[i - 1] &gt; rotatedNums[i]:\n                return False\n\n        return True\n</code></pre>"},{"location":"problems/17_letter_combinations_of_a_phone_number/","title":"17. Letter Combinations of a Phone Number","text":"<p>Medium</p> <p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>"},{"location":"problems/17_letter_combinations_of_a_phone_number/#solution","title":"Solution","text":"<pre><code>from itertools import product\n\n\nclass Solution:\n    def letterCombinations(self, digits: str) -&gt; List[str]:\n        if len(digits) == 0:\n            return []\n        elif len(digits) == 1:\n            return phone[digits]\n        else:\n            return [\"\".join(r) for r in product(*[phone[d] for d in digits])]\n\n\nphone = {\n    \"2\": [\"a\", \"b\", \"c\"],\n    \"3\": [\"d\", \"e\", \"f\"],\n    \"4\": [\"g\", \"h\", \"i\"],\n    \"5\": [\"j\", \"k\", \"l\"],\n    \"6\": [\"m\", \"n\", \"o\"],\n    \"7\": [\"p\", \"q\", \"r\", \"s\"],\n    \"8\": [\"t\", \"u\", \"v\"],\n    \"9\": [\"w\", \"x\", \"y\", \"z\"],\n}\n</code></pre>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/","title":"1846. Maximum Element After Decreasing and Rearranging","text":"<p>Medium</p> <p>You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:</p> <ul> <li>The value of the first element in arr must be 1.</li> <li> <p>The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) &lt;= 1 for each i where 1 &lt;= i &lt; arr.length (0-indexed). abs(x) is the absolute value of x. There are 2 types of operations that you can perform any number of times:</p> </li> <li> <p>Decrease the value of any element of arr to a smaller positive integer.</p> </li> <li>Rearrange the elements of arr to be in any order.</li> </ul> <p>Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.</p>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/#example-1","title":"Example 1:","text":"<pre><code>Input: arr = [2,2,1,2,1]\nOutput: 2\nExplanation: \nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2.\n</code></pre>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/#example-2","title":"Example 2:","text":"<pre><code>Input: arr = [100,1,1000]\nOutput: 3\nExplanation: \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3.\n</code></pre>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/#example-3","title":"Example 3:","text":"<pre><code>Input: arr = [1,2,3,4,5]\nOutput: 5\nExplanation: The array already satisfies the conditions, and the largest element is 5.\n</code></pre>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= arr.length &lt;= 105</li> <li>1 &lt;= arr[i] &lt;= 109</li> </ul>"},{"location":"problems/1846_maximum_element_after_decreasing_and_rearranging/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -&gt; int:\n        sarr = sorted(arr)\n        res = 0\n        for n in sarr:\n            if n &gt; res:\n                res += 1\n\n        return res\n</code></pre>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/","title":"1869. Longer Contiguous Segments of Ones than Zeros","text":"<p>Easy</p> <p>Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.</p> <ul> <li>For example, in s = \"110100010\" the longest continuous segment of 1s has   length 2, and the longest continuous segment of 0s has length 3.</li> </ul> <p>Note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.</p>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"1101\"\nOutput: true\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true.\n</code></pre>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"111000\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false.\n</code></pre>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"110100010\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false.\n</code></pre>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 100</li> <li>s[i] is either '0' or '1'.</li> </ul>"},{"location":"problems/1869_longer_contiguous_segments_of_ones_than_zeros/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def checkZeroOnes(self, s: str) -&gt; bool:\n        zeros, ones = 0, 0\n        max_zeros, max_ones = 0, 0\n\n        for c in s:\n            if c == \"0\":\n                zeros += 1\n                ones = 0\n                max_zeros = max(max_zeros, zeros)\n            else:\n                zeros = 0\n                ones += 1\n                max_ones = max(max_ones, ones)\n\n        return max_ones &gt; max_zeros\n</code></pre>"},{"location":"problems/1876_substring_of_size_three_with_distinct_characters/","title":"1876. Substrings of Size Three with Distinct Characters","text":"<p>Easy</p> <p>A string is good if there are no repeated characters.</p> <p>Given a string s\u200b\u200b\u200b\u200b\u200b, return the number of good substrings of length three in s\u200b\u200b\u200b\u200b\u200b\u200b.</p> <p>Note that if there are multiple occurrences of the same substring, every occurrence should be counted.</p> <p>A substring is a contiguous sequence of characters in a string.</p>"},{"location":"problems/1876_substring_of_size_three_with_distinct_characters/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"xyzzaz\"\nOutput: 1\nExplanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n</code></pre>"},{"location":"problems/1876_substring_of_size_three_with_distinct_characters/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"aababcabc\"\nOutput: 4\nExplanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n</code></pre>"},{"location":"problems/1876_substring_of_size_three_with_distinct_characters/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 100</li> <li>s\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.</li> </ul>"},{"location":"problems/1876_substring_of_size_three_with_distinct_characters/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def countGoodSubstrings(self, s: str) -&gt; int:\n        count = 0\n\n        for a, b, c in zip(s, s[1:], s[2:]):\n            if a != b and a != c and b != c:\n                count += 1\n\n        return count\n</code></pre>"},{"location":"problems/18_4sum/","title":"18. 4Sum","text":"<p>Medium</p> <p>Given an array nums of n integers, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p> <ul> <li><code>0 &lt;= a, b, c, d &lt; n</code></li> <li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are distinct.</li> <li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li> </ul> <p>You may return the answer in any order.</p>"},{"location":"problems/18_4sum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        return ksum(4, nums, target)\n\n\ndef ksum(k, nums, target):\n    nums.sort()\n\n    if k == 2:\n        return twoSum(nums, target)\n\n    res = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i - 1] != nums[i]:\n            for s in ksum(k - 1, nums[i + 1 :], target - nums[i]):\n                res.append([nums[i]] + s)\n\n    return res\n\n\n# assumes nums is sorted\ndef twoSum(nums, target):\n    n = len(nums)\n    res = []\n\n    i, j = 0, n - 1\n    while i &lt; j:\n        candidate = nums[i] + nums[j]\n        if candidate &lt; target or (i &gt; 0 and nums[i - 1] == nums[i]):\n            i += 1\n        elif candidate &gt; target:\n            j -= 1\n        else:\n            res.append([nums[i], nums[j]])\n            i += 1\n            j -= 1\n\n    return res\n</code></pre>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/","title":"1909. Remove One Element to Make the Array Strictly Increasing","text":"<p>Easy</p> <p>Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.</p> <p>The array nums is strictly increasing if nums[i - 1] &lt; nums[i] for each index (1 &lt;= i &lt; nums.length).</p>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [1,2,10,5,7]\nOutput: true\nExplanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true.\n</code></pre>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [2,3,1,2]\nOutput: false\nExplanation:\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false.\n</code></pre>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [1,1,1]\nOutput: false\nExplanation: The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false.\n</code></pre>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= nums.length &lt;= 1000</li> <li>1 &lt;= nums[i] &lt;= 1000</li> </ul>"},{"location":"problems/1909_remove_one_element_to_make_the_array_strictly_increasing/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def canBeIncreasing(self, nums: List[int]) -&gt; bool:\n        removed = False\n\n        for i in range(len(nums)-1):\n            if nums[i] &gt;= nums[i+1]:\n                if removed:\n                    return False\n\n                removed = True  # remove nums[i]\n\n                if i &gt; 0 and nums[i - 1] &gt;= nums[i + 1]:\n                    nums[i+1] = nums[i]  # remove nums[i+1]\n\n        return True\n</code></pre>"},{"location":"problems/190_reverse_bits/","title":"190. Reverse Bits","text":"<p>Easy</p> <p>Reverse bits of a given 32 bits unsigned integer.</p>"},{"location":"problems/190_reverse_bits/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n</code></pre>"},{"location":"problems/190_reverse_bits/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n</code></pre>"},{"location":"problems/190_reverse_bits/#constraints","title":"Constraints:","text":"<ul> <li>The input must be a binary string of length 32</li> </ul> <p>Follow up: If this function is called many times, how would you optimize it?</p>"},{"location":"problems/190_reverse_bits/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseBits(self, n: int) -&gt; int:\n        return int(format(n, \"b\").zfill(32)[::-1], 2)\n</code></pre>"},{"location":"problems/191_number_of_1_bits/","title":"191. Number of 1 Bits","text":"<p>Easy</p> <p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).</p>"},{"location":"problems/191_number_of_1_bits/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n</code></pre>"},{"location":"problems/191_number_of_1_bits/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n</code></pre>"},{"location":"problems/191_number_of_1_bits/#example-3","title":"Example 3:","text":"<pre><code>Input: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n</code></pre>"},{"location":"problems/191_number_of_1_bits/#constraints","title":"Constraints:","text":"<ul> <li>The input must be a binary string of length 32.</li> </ul>"},{"location":"problems/191_number_of_1_bits/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def hammingWeight(self, n: int) -&gt; int:\n        return format(n, \"b\").count(\"1\")\n</code></pre>"},{"location":"problems/198_house_robber/","title":"198. House Robber","text":"<p>Medium</p> <p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p> <p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>"},{"location":"problems/198_house_robber/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</code></pre>"},{"location":"problems/198_house_robber/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</code></pre>"},{"location":"problems/198_house_robber/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 100</li> <li>0 &lt;= nums[i] &lt;= 400</li> </ul>"},{"location":"problems/198_house_robber/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n\n        n = len(nums)\n\n        if n == 1:\n            return nums[0]\n\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n\n        return dp[n - 1]\n</code></pre>"},{"location":"problems/19_remove_nth_node/","title":"19. Remove Nth Node From End of List","text":"<p>Medium</p> <p>Given the head of a linked list, remove the nth node from the end of the list and return its head.</p>"},{"location":"problems/19_remove_nth_node/#example-1","title":"Example 1:","text":"<pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n</code></pre>"},{"location":"problems/19_remove_nth_node/#example-2","title":"Example 2:","text":"<pre><code>Input: head = [1], n = 1\nOutput: []\n</code></pre>"},{"location":"problems/19_remove_nth_node/#example-3","title":"Example 3:","text":"<pre><code>Input: head = [1,2], n = 1\nOutput: [1]\n</code></pre>"},{"location":"problems/19_remove_nth_node/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the list is sz.</li> <li>1 &lt;= sz &lt;= 30</li> <li>0 &lt;= Node.val &lt;= 100</li> <li>1 &lt;= n &lt;= sz</li> </ul> <p>Follow up: Could you do this in one pass?</p>"},{"location":"problems/19_remove_nth_node/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]:\n        if head is None:\n            return None\n\n        l = length(head)\n\n        d = l - n\n        if d == 0:\n            return head.next\n\n        prev = None\n        curr = head\n        for _ in range(d):\n            prev = curr\n            curr = curr.next\n\n        if curr.next is not None:\n            prev.next = curr.next\n        else:\n            prev.next = None\n\n        return head\n\n\ndef length(head: Optional[ListNode]) -&gt; int:\n    l = 0\n    curr = head\n    while curr is not None:\n        l += 1\n        curr = curr.next\n    return l\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/1_two_sum/","title":"1. Two Sum","text":"<p>Link</p> <p>Easy</p> <p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p>"},{"location":"problems/1_two_sum/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre>"},{"location":"problems/1_two_sum/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</code></pre>"},{"location":"problems/1_two_sum/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</code></pre>"},{"location":"problems/1_two_sum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        d = {}\n        for i, num in enumerate(nums):\n            d[num] = i\n\n        for x in nums:\n            y = target - x\n\n            if x == y and nums.count(x) &gt; 1:\n                f = nums.index(x)\n                s = nums.index(x, f + 1)\n                return f, s\n\n            if x != y and y in d:\n                return d[x], d[y]\n</code></pre>"},{"location":"problems/200_number_of_islands/","title":"200. Number of Islands","text":"<p>Medium</p> <p>Given an <code>m x n</code> 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.</p> <p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>"},{"location":"problems/200_number_of_islands/#example-1","title":"Example 1:","text":"<pre><code>Input: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n</code></pre>"},{"location":"problems/200_number_of_islands/#example-2","title":"Example 2:","text":"<pre><code>Input: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n</code></pre>"},{"location":"problems/200_number_of_islands/#constraints","title":"Constraints:","text":"<ul> <li>m == grid.length</li> <li>n == grid[i].length</li> <li>1 &lt;= m, n &lt;= 300</li> <li>grid[i][j] is '0' or '1'.</li> </ul>"},{"location":"problems/200_number_of_islands/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def numIslands(self, grid: List[List[str]]) -&gt; int:\n        m = len(grid)\n        n = len(grid[0])\n        num_islands = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\":\n                    num_islands += 1\n                    self.turn_land_into_water(grid, i, j)\n\n        return num_islands\n\n    def turn_land_into_water(self, grid: List[List[int]], i: int, j: int):\n        m = len(grid)\n        n = len(grid[0])\n\n        if i &lt; 0 or i &gt;= m or j &lt; 0 or j &gt;= n or grid[i][j] == \"0\":\n            return\n\n        grid[i][j] = \"0\"\n        self.turn_land_into_water(grid, i, j - 1)\n        self.turn_land_into_water(grid, i, j + 1)\n        self.turn_land_into_water(grid, i - 1, j)\n        self.turn_land_into_water(grid, i + 1, j)\n</code></pre>"},{"location":"problems/202_happy_number/","title":"202. Happy Number","text":"<p>Easy</p> <p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p> <pre><code>class Solution:\n    def isHappy(self, n: int) -&gt; bool:\n        seen = set()\n        seen.add(n)\n\n        while n != 1:\n            n = sum([int(d) ** 2 for d in str(n)])\n            if n in seen:\n                return False\n            seen.add(n)\n\n        return True\n</code></pre>"},{"location":"problems/203_remove_linked_list_elements/","title":"203. Remove Linked List Elements","text":"<p>Easy</p> <p>Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.</p> <pre><code>class Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -&gt; Optional[ListNode]:\n        if head is None:\n            return None\n\n        while head is not None and head.val == val:\n            head = head.next\n\n        if head is None:\n            return None\n\n        prev = head\n        curr = head.next\n\n        while curr is not None:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = prev.next\n            else:\n                curr = curr.next\n                prev = prev.next\n\n        return head\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/204_count_primes/","title":"204. Count Primes","text":"<p>Medium</p> <p>Given an integer <code>n</code>, return the number of prime numbers that are strictly less than <code>n</code>.</p> <pre><code># Sieve of Eratosthenes\nclass Solution:\n    def countPrimes(self, n: int) -&gt; int:\n        if n &lt; 2:\n            return 0\n\n        sieve = [1] * n\n        sieve[0], sieve[1] = 0, 0\n        res = 0\n\n        for i in range(2, n):\n            if sieve[i] == 1:\n                res += 1\n                for j in range(i + i, n, i):\n                    sieve[j] = 0\n\n        return res\n</code></pre>"},{"location":"problems/205_isomorphic_strings/","title":"205. Isomorphic Strings","text":"<p>Easy</p> <p>Given two strings <code>s</code> and <code>t</code>, determine if they are isomorphic.</p> <p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p> <p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p> <pre><code>class Solution:\n    def isIsomorphic(self, s: str, t: str) -&gt; bool:\n        return t == s.translate(str.maketrans(s, t)) and s == t.translate(\n            str.maketrans(t, s)\n        )\n</code></pre>"},{"location":"problems/206_reverse_linked_list/","title":"206. Reverse Linked List","text":"<p>Easy</p> <p>Given the head of a singly linked list, reverse the list, and return the reversed list.</p>"},{"location":"problems/206_reverse_linked_list/#example-1","title":"Example 1:","text":"<pre><code>Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n</code></pre>"},{"location":"problems/206_reverse_linked_list/#example-2","title":"Example 2:","text":"<pre><code>Input: head = [1,2]\nOutput: [2,1]\n</code></pre>"},{"location":"problems/206_reverse_linked_list/#example-3","title":"Example 3:","text":"<pre><code>Input: head = []\nOutput: []\n</code></pre>"},{"location":"problems/206_reverse_linked_list/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the list is the range [0, 5000].</li> <li>-5000 &lt;= Node.val &lt;= 5000</li> </ul>"},{"location":"problems/206_reverse_linked_list/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prev = None\n        curr = head\n        next = None\n\n        while curr is not None:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n\n        return prev\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/208_implement_trie/","title":"208. Implement Trie (Prefix Tree)","text":"<p>Medium</p> <p>A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p> <p>Implement the Trie class:</p> <ul> <li>Trie() Initializes the trie object.</li> <li>void insert(String word) Inserts the string word into the trie.</li> <li>boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.</li> <li>boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.</li> </ul>"},{"location":"problems/208_implement_trie/#example-1","title":"Example 1:","text":"<pre><code>Input\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</code></pre>"},{"location":"problems/208_implement_trie/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= word.length, prefix.length &lt;= 2000</li> <li>word and prefix consist only of lowercase English letters.</li> <li>At most 3 * 104 calls in total will be made to insert, search, and startsWith.</li> </ul>"},{"location":"problems/208_implement_trie/#solution","title":"Solution","text":"<pre><code>class Trie:\n    END_CHARACTER = \"#\"\n\n    def __init__(self):\n        self.root = {}\n\n    def insert(self, word: str) -&gt; None:\n        curr = self.root\n\n        for c in word:\n            if c not in curr:\n                curr[c] = {}\n            curr = curr[c]\n\n        curr[self.END_CHARACTER] = {}\n\n    def search(self, word: str) -&gt; bool:\n        curr = self.root\n\n        for c in word:\n            if c not in curr:\n                return False\n            curr = curr[c]\n\n        return self.END_CHARACTER in curr\n\n    def startsWith(self, prefix: str) -&gt; bool:\n        curr = self.root\n\n        for c in prefix:\n            if c not in curr:\n                return False\n            curr = curr[c]\n\n        return True\n</code></pre>"},{"location":"problems/20_valid_parentheses/","title":"20. Valid Parentheses","text":"<p>Easy</p> <p>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> </ol>"},{"location":"problems/20_valid_parentheses/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"()\"\nOutput: true\n</code></pre>"},{"location":"problems/20_valid_parentheses/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"()[]{}\"\nOutput: true\n</code></pre>"},{"location":"problems/20_valid_parentheses/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"(]\"\nOutput: false\n</code></pre>"},{"location":"problems/20_valid_parentheses/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 104</li> <li>s consists of parentheses only '()[]{}'.</li> </ul>"},{"location":"problems/20_valid_parentheses/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isValid(self, s: str) -&gt; bool:\n        t = []\n\n        for c in s:\n            if c in ['(', '{', '[']:\n                t.append(c)\n\n            if c in [')', '}', ']']:\n                if len(t) == 0 or (not is_match(t.pop(), c)):\n                    return False\n\n        return len(t) == 0\n\ndef is_match(l: str, r: str) -&gt; bool:\n    match l:\n        case '(':\n            return r == ')'\n        case '{':\n            return r == '}'\n        case '[':\n            return r == ']'\n        case _:\n            return False\n</code></pre>"},{"location":"problems/211_design_add_and_search_word_data_structure/","title":"211. Design Add and Search Words Data Structure","text":"<p>Medium</p> <p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p> <p>Implement the WordDictionary class:</p> <ul> <li>WordDictionary() Initializes the object.</li> <li>void addWord(word) Adds word to the data structure, it can be matched later.</li> <li>bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.</li> </ul>"},{"location":"problems/211_design_add_and_search_word_data_structure/#example","title":"Example:","text":"<pre><code>Input\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n</code></pre>"},{"location":"problems/211_design_add_and_search_word_data_structure/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= word.length &lt;= 25</li> <li>word in addWord consists of lowercase English letters.</li> <li>word in search consist of '.' or lowercase English letters.</li> <li>There will be at most 2 dots in word for search queries.</li> <li>At most 104 calls will be made to addWord and search.</li> </ul>"},{"location":"problems/211_design_add_and_search_word_data_structure/#solution","title":"Solution","text":"<pre><code>class WordDictionary:\n    END_CHARACTER = \"$\"\n\n    def __init__(self):\n        self.root = {}\n\n    def addWord(self, word: str) -&gt; None:\n        curr = self.root\n\n        for c in word:\n            if c not in curr:\n                curr[c] = {}\n            curr = curr[c]\n\n        curr[self.END_CHARACTER] = {}\n\n    def search(self, word: str) -&gt; bool:\n        return self.search_helper(word, self.root)\n\n    def search_helper(self, word: str, curr):\n        if not word:\n            return self.END_CHARACTER in curr\n\n        c = word[0]\n        rest = word[1:]\n\n        if c == \".\":\n            return any(self.search_helper(rest, v) for v in curr.values())\n        elif c not in curr:\n            return False\n        else:\n            return self.search_helper(rest, curr[c])\n</code></pre>"},{"location":"problems/213_house_robber_ii/","title":"213. House Robber II","text":"<p>Medium</p> <p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.</p> <p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p>"},{"location":"problems/213_house_robber_ii/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</code></pre>"},{"location":"problems/213_house_robber_ii/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</code></pre>"},{"location":"problems/213_house_robber_ii/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [1,2,3]\nOutput: 3\n</code></pre>"},{"location":"problems/213_house_robber_ii/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 100</li> <li>0 &lt;= nums[i] &lt;= 1000</li> </ul>"},{"location":"problems/213_house_robber_ii/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n\n        def rob(nums: List[int]) -&gt; int:\n            n = len(nums)\n\n            dp = [0] * n\n            dp[0] = nums[0]\n            dp[1] = max(nums[0], nums[1])\n\n            for i in range(2, n):\n                dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n\n            return dp[n - 1]\n\n        return max(rob(nums[:-1]), rob(nums[1:]))\n</code></pre>"},{"location":"problems/217_contains_duplicate/","title":"217. Contains Duplicate","text":"<p>https://leetcode.com/problems/contains-duplicate/</p> <p>Easy</p> <p>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.</p>"},{"location":"problems/217_contains_duplicate/#example-1","title":"Example 1:","text":"<p>```Input: nums = [1,2,3,1] Output: true <pre><code>#### Example 2:\n</code></pre> Input: nums = [1,2,3,4] Output: false <pre><code>#### Example 3:\n</code></pre> Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true <pre><code>#### Constraints:\n\n- 1 &lt;= nums.length &lt;= 105\n- -109 &lt;= nums[i] &lt;= 109\n\n## Solution\n\n```python\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -&gt; bool:\n        return len(set(nums)) != len(nums)\n</code></pre></p>"},{"location":"problems/219_contains_duplicate_ii/","title":"219. Contains Duplicate II","text":"<p>Easy</p> <p>Given an integer array nums and an integer <code>k</code>, return true if there are two distinct indices <code>i</code> and <code>j</code> in the array such that <code>nums[i] == nums[j]</code> and <code>abs(i - j) &lt;= k</code>.</p> <pre><code>class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -&gt; bool:\n        d = {}\n\n        for i, num in enumerate(nums):\n            if num in d and i - d[num] &lt;= k:\n                return True\n            d[num] = i\n\n        return False\n</code></pre>"},{"location":"problems/21_merge_two_sorted_lists/","title":"21. Merge Two Sorted Lists","text":"<p>Easy</p> <p>Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p>"},{"location":"problems/21_merge_two_sorted_lists/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def mergeTwoLists(\n        self, list1: Optional[ListNode], list2: Optional[ListNode]\n    ) -&gt; Optional[ListNode]:\n        if list1 is None:\n            return list2\n\n        if list2 is None:\n            return list1\n\n        if list1.val &lt;= list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/225_implement_stack_using_queues/","title":"225. Implement Stack using Queues","text":"<p>Easy</p> <p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).</p> <p>Implement the <code>MyStack</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns true if the stack is empty, false otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations. \"\"\"</li> </ul> <pre><code>from collections import deque\n\n\nclass MyStack:\n    def __init__(self):\n        self.left = deque()\n        self.right = deque()\n\n    def push(self, x: int) -&gt; None:\n        self.right.append(x)\n        while len(self.left) &gt; 0:\n            self.right.append(self.left.popleft())\n\n        self.left, self.right = self.right, self.left\n\n    def pop(self) -&gt; int:\n        return self.left.popleft()\n\n    def top(self) -&gt; int:\n        return self.left[0]\n\n    def empty(self) -&gt; bool:\n        return len(self.left) == 0\n</code></pre>"},{"location":"problems/226_invert_binary_tree/","title":"226. Invert Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, invert the tree, and return its root.</p>"},{"location":"problems/226_invert_binary_tree/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n</code></pre>"},{"location":"problems/226_invert_binary_tree/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [2,1,3]\nOutput: [2,3,1]\n</code></pre>"},{"location":"problems/226_invert_binary_tree/#example-3","title":"Example 3:","text":"<pre><code>Input: root = []\nOutput: []\n</code></pre>"},{"location":"problems/226_invert_binary_tree/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is in the range [0, 100].</li> <li>-100 &lt;= Node.val &lt;= 100</li> </ul>"},{"location":"problems/226_invert_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:\n        if root is None:\n            return None\n\n        return TreeNode(\n            root.val, self.invertTree(root.right), self.invertTree(root.left)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/228_summary_ranges/","title":"228. Summary Ranges","text":"<p>Easy</p> <p>You are given a sorted unique integer array nums.</p> <p>Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.</p> <p>Each range [a,b] in the list should be output as:</p> <ul> <li>\"a-&gt;b\" if a != b</li> <li>\"a\" if a == b</li> </ul> <pre><code>class Solution:\n    def summaryRanges(self, nums: List[int]) -&gt; List[str]:\n        res = []\n        tmp = []\n\n        for num in nums:\n            if len(tmp) == 0 or tmp[-1] + 1 == num:\n                tmp.append(num)\n            else:\n                res.append(tmp)\n                tmp = [num]\n\n        if len(tmp) != 0:\n            res.append(tmp)\n\n        return [f\"{tmp[0]}-&gt;{tmp[-1]}\" if len(tmp) &gt; 1 else str(tmp[0]) for tmp in res]\n</code></pre>"},{"location":"problems/2296_design_a_text_editor/","title":"2296. Design a Text Editor","text":"<p>Hard</p> <p>Design a text editor with a cursor that can do the following:</p> <ul> <li>Add text to where the cursor is.</li> <li>Delete text from where the cursor is (simulating the backspace key).</li> <li>Move the cursor either left or right.</li> </ul> <p>When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that 0 &lt;= cursor.position &lt;= currentText.length always holds.</p> <p>Implement the TextEditor class:</p> <ul> <li>TextEditor() Initializes the object with empty text.</li> <li>void addText(string text) Appends text to where the cursor is. The cursor ends   to the right of text.</li> <li>int deleteText(int k) Deletes k characters to the left of the cursor. Returns   the number of characters actually deleted.</li> <li>string cursorLeft(int k) Moves the cursor to the left k times. Returns the   last min(10, len) characters to the left of the cursor, where len is the   number of characters to the left of the cursor.</li> <li>string cursorRight(int k) Moves the cursor to the right k times. Returns the   last min(10, len) characters to the left of the cursor, where len is the   number of characters to the left of the cursor.</li> </ul>"},{"location":"problems/2296_design_a_text_editor/#solution","title":"Solution","text":"<pre><code>class TextEditor:\n    def __init__(self):\n        self.buffer = []\n        self.stack = []\n\n    def addText(self, text: str) -&gt; None:\n        self.buffer.extend([c for c in text])\n\n    def deleteText(self, k: int) -&gt; int:\n        l = len(self.buffer)\n        num_deleted = min(l, k)\n        self.buffer = self.buffer[: l - num_deleted]\n        return num_deleted\n\n    def cursorLeft(self, k: int) -&gt; str:\n        while len(self.buffer) &gt; 0 and k &gt; 0:\n            self.stack.append(self.buffer.pop())\n            k -= 1\n\n        return \"\".join(self.buffer[max(len(self.buffer) - 10, 0) :])\n\n    def cursorRight(self, k: int) -&gt; str:\n        while len(self.stack) &gt; 0 and k &gt; 0:\n            self.buffer.append(self.stack.pop())\n            k -= 1\n\n        return \"\".join(self.buffer[max(len(self.buffer) - 10, 0) :])\n</code></pre>"},{"location":"problems/22_generate_parenthesis/","title":"22. Generate Parentheses","text":"<p>Medium</p> <p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>"},{"location":"problems/22_generate_parenthesis/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def generateParenthesis(self, n: int) -&gt; List[str]:\n        return self.helper(n, n, [])\n\n    def helper(self, m, n, ps):\n        if m == 0 and n == 0:\n            return [\"\".join(ps)]\n\n        ps1, ps2 = [], []\n        if m &gt; 0:\n            ps1 = self.helper(m - 1, n, ps + [\"(\"])\n        if n &gt; m:\n            ps2 = self.helper(m, n - 1, ps + [\")\"])\n\n        return ps1 + ps2\n</code></pre>"},{"location":"problems/230_kth_smallest_element_in_a_bst/","title":"230. Kth Smallest Element in a BST","text":"<p>Medium</p> <p>Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.</p>"},{"location":"problems/230_kth_smallest_element_in_a_bst/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [3,1,4,null,2], k = 1\nOutput: 1\n</code></pre>"},{"location":"problems/230_kth_smallest_element_in_a_bst/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n</code></pre>"},{"location":"problems/230_kth_smallest_element_in_a_bst/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is n.</li> <li>1 &lt;= k &lt;= n &lt;= 104</li> <li>0 &lt;= Node.val &lt;= 104</li> </ul> <p>Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>"},{"location":"problems/230_kth_smallest_element_in_a_bst/#solution","title":"Solution","text":"<pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -&gt; int:\n        def to_array(root: Optional[TreeNode]):\n            if not root:\n                return []\n\n            return to_array(root.left) + [root.val] + to_array(root.right)\n\n        return to_array(root)[k - 1]\n</code></pre>"},{"location":"problems/231_power_of_two/","title":"231. Power of Two","text":"<p>Easy</p> <p>Given an integer <code>n</code>, return true if it is a power of two. Otherwise, return false.</p> <p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2 ** x</code>.</p> <pre><code>class Solution:\n    def isPowerOfTwo(self, n: int) -&gt; bool:\n        if n &lt;= 0:\n            return False\n\n        return format(n, \"b\").count(\"1\") == 1\n</code></pre>"},{"location":"problems/232_implement_queue_using_stacks/","title":"232 implement queue using stacks","text":"<p>\"\"\"</p>"},{"location":"problems/232_implement_queue_using_stacks/#232-implement-queue-using-stacks","title":"232. Implement Queue using Stacks","text":"<p>Easy</p> <p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).</p> <p>Implement the <code>MyQueue</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the back of the queue.</li> <li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code> Returns the element at the front of the queue.</li> <li><code>boolean empty()</code> Returns true if the queue is empty, false otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> </ul> <p>Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.</p> <pre><code>class MyQueue:\n    def __init__(self):\n        self.left = []\n        self.right = []\n\n    def push(self, x: int) -&gt; None:\n        self.left.append(x)\n\n    def pop(self) -&gt; int:\n        self.rebalance()\n        return self.right.pop()\n\n    def peek(self) -&gt; int:\n        self.rebalance()\n        return self.right[len(self.right) - 1]\n\n    def empty(self) -&gt; bool:\n        return len(self.left) == 0 and len(self.right) == 0\n\n    def rebalance(self) -&gt; None:\n        if len(self.right) == 0:\n            while len(self.left) &gt; 0:\n                self.right.append(self.left.pop())\n</code></pre>"},{"location":"problems/234_palindrome_linked_list/","title":"234. Palindrome Linked List","text":"<p>Easy</p> <p>Given the head of a singly linked list, return true if it is a palindrome.</p> <pre><code>class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -&gt; bool:\n        a = self.to_array(head)\n        return a == a[::-1]\n\n    def to_array(self, head: Optional[ListNode]) -&gt; List[int]:\n        res = []\n        while head is not None:\n            res.append(head.val)\n            head = head.next\n\n        return res\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/","title":"235. Lowest Common Ancestor of a Binary Search Tree","text":"<p>Medium</p> <p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p> <p>According to the definition of LCA on Wikipedia: \"The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\"</p>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n</code></pre>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</code></pre>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/#example-3","title":"Example 3:","text":"<pre><code>Input: root = [2,1], p = 2, q = 1\nOutput: 2\n</code></pre>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is in the range [2, 105].</li> <li>-109 &lt;= Node.val &lt;= 109</li> <li>All Node.val are unique.</li> <li>p != q</li> <li>p and q will exist in the BST.</li> </ul>"},{"location":"problems/235_lowest_common_ancestor_of_a_bst/#solution","title":"Solution","text":"<pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def lowestCommonAncestor(\n        self, root: TreeNode, p: TreeNode, q: TreeNode\n    ) -&gt; TreeNode:\n        if root.val &gt; max(p.val, q.val):\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif root.val &lt; min(p.val, q.val):\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root\n</code></pre>"},{"location":"problems/237_delete_node_in_a_linked_list/","title":"237. Delete Node in a Linked List","text":"<p>Easy</p> <p>Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.</p> <p>It is guaranteed that the node to be deleted is not a tail node in the list.</p>"},{"location":"problems/237_delete_node_in_a_linked_list/#solution","title":"Solution","text":"<pre><code># class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def deleteNode(self, node):\n        prev = node\n        curr = node.next\n        prev.val = curr.val\n\n        while curr.next is not None:\n            curr = curr.next\n            prev = prev.next\n            prev.val = curr.val\n\n        prev.next = None\n</code></pre>"},{"location":"problems/238_product_of_array_except_self/","title":"238. Product of Array Except Self","text":"<p>Medium</p> <p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p>"},{"location":"problems/238_product_of_array_except_self/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n</code></pre>"},{"location":"problems/238_product_of_array_except_self/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n</code></pre>"},{"location":"problems/238_product_of_array_except_self/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= nums.length &lt;= 105</li> <li>-30 &lt;= nums[i] &lt;= 30</li> <li>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</li> </ul> <p>Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)</p>"},{"location":"problems/238_product_of_array_except_self/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n        lps = [1] * n\n        rps = [1] * n\n\n        for i in range(1, n):\n            lps[i] = lps[i - 1] * nums[i - 1]\n\n        for i in reversed(range(n - 1)):\n            rps[i] = rps[i + 1] * nums[i + 1]\n\n        return [lps[i] * rps[i] for i in range(n)]\n</code></pre>"},{"location":"problems/23_merge_k_sorted_lists/","title":"23. Merge k Sorted Lists","text":"<p>Hard</p> <p>You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.</p> <p>Merge all the linked-lists into one sorted linked-list and return it.</p>"},{"location":"problems/23_merge_k_sorted_lists/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -&gt; Optional[ListNode]:\n        res = []\n        for l in lists:\n            res.extend(self.to_array(l))\n\n        res.sort()\n\n        return self.to_list(res)\n\n    def to_array(self, head: ListNode) -&gt; List[int]:\n        res = []\n        while head is not None:\n            res.append(head.val)\n            head = head.next\n\n        return res\n\n    def to_list(self, list: List[int]) -&gt; Optional[ListNode]:\n        if len(list) == 0:\n            return None\n\n        head = ListNode(list[0])\n        curr = head\n        for v in list[1:]:\n            curr.next = ListNode(v)\n            curr = curr.next\n\n        return head\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/242_valid_anagram/","title":"242. Valid Anagram","text":"<p>Easy</p> <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>"},{"location":"problems/242_valid_anagram/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\n</code></pre>"},{"location":"problems/242_valid_anagram/#example-2","title":"Example 2:","text":"<p>Input: s = \"rat\", t = \"car\" Output: false <pre><code>#### Constraints:\n\n- 1 &lt;= s.length, t.length &lt;= 5 * 104\n- s and t consist of lowercase English letters.\n\n## Solution\n\n```python\nclass Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        def freq(s):\n            d = {}\n            for c in s:\n                d[c] = d.get(c, 0) + 1\n            return d\n\n        return freq(s) == freq(t)\n</code></pre></p>"},{"location":"problems/24_swap_nodes_in_pairs/","title":"24. Swap Nodes in Pairs","text":"<p>Medium</p> <p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)</p>"},{"location":"problems/24_swap_nodes_in_pairs/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n\n        prev = head\n        curr = head.next\n\n        next = None\n        if curr.next is not None:\n            next = self.swapPairs(curr.next)\n\n        prev.next = next\n        curr.next = prev\n\n        return curr\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/257_binary_tree_paths/","title":"257. Binary Tree Paths","text":"<p>Easy</p> <p>Given the root of a binary tree, return all root-to-leaf paths in any order.</p> <p>A leaf is a node with no children.</p> <pre><code>class Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -&gt; List[str]:\n        if root is None:\n            return []\n\n        return self.helper(root, [])\n\n    def helper(self, root, paths):\n        if len(paths) == 0:\n            new_paths = [str(root.val)]\n        else:\n            new_paths = [p + f\"-&gt;{root.val}\" for p in paths]\n\n        if root.left is None and root.right is None:\n            return new_paths\n\n        left = []\n        if root.left is not None:\n            left = self.helper(root.left, new_paths)\n\n        right = []\n        if root.right is not None:\n            right = self.helper(root.right, new_paths)\n\n        return left + right\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/263_ugly_number/","title":"263. Ugly Number","text":"<p>Easy</p> <p>An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.</p> <p>Given an integer n, return true if n is an ugly number.</p> <pre><code>class Solution:\n    def isUgly(self, n: int) -&gt; bool:\n        if n &lt;= 0:\n            return False\n\n        while n % 2 == 0:\n            n /= 2\n\n        while n % 3 == 0:\n            n /= 3\n\n        while n % 5 == 0:\n            n /= 5\n\n        return n == 1\n</code></pre>"},{"location":"problems/268_missing_number/","title":"268. Missing Number","text":"<p>Easy</p> <p>Given an array nums containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p> <p>Follow up: Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>"},{"location":"problems/268_missing_number/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</code></pre>"},{"location":"problems/268_missing_number/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</code></pre>"},{"location":"problems/268_missing_number/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</code></pre>"},{"location":"problems/268_missing_number/#constraints","title":"Constraints:","text":"<ul> <li>n == nums.length</li> <li>1 &lt;= n &lt;= 104</li> <li>0 &lt;= nums[i] &lt;= n</li> <li>All the numbers of nums are unique.</li> </ul> <p>Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?</p>"},{"location":"problems/268_missing_number/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def missingNumber(self, nums: List[int]) -&gt; int:\n        a = [0] * (len(nums) + 1)\n\n        for num in nums:\n            a[num] = 1\n\n        return a.index(0)\n</code></pre>"},{"location":"problems/26_remove_duplicates_from_sorted_array/","title":"26. Remove Duplicates from Sorted Array","text":"<p>Easy</p> <p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</p> <p>Return k after placing the final result in the first k slots of nums.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p>"},{"location":"problems/26_remove_duplicates_from_sorted_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        i = 0\n\n        for num in nums:\n            if nums[i] != num:\n                i += 1\n                nums[i] = num\n\n        return i + 1\n</code></pre>"},{"location":"problems/2710_remove_trailing_zeros_from_a_string/","title":"2710. Remove Trailing Zeros From a String","text":"<p>Easy</p> <p>Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.</p>"},{"location":"problems/2710_remove_trailing_zeros_from_a_string/#example-1","title":"Example 1:","text":"<pre><code>Input: num = \"51230100\"\nOutput: \"512301\"\nExplanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n</code></pre>"},{"location":"problems/2710_remove_trailing_zeros_from_a_string/#example-2","title":"Example 2:","text":"<pre><code>Input: num = \"123\"\nOutput: \"123\"\nExplanation: Integer \"123\" has no trailing zeros, we return integer \"123\".\n</code></pre>"},{"location":"problems/2710_remove_trailing_zeros_from_a_string/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= num.length &lt;= 1000</li> <li>num consists of only digits.</li> <li>num doesn't have any leading zeros.</li> </ul>"},{"location":"problems/2710_remove_trailing_zeros_from_a_string/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeTrailingZeros(self, num: str) -&gt; str:\n        return num.rstrip(\"0\")\n</code></pre>"},{"location":"problems/2716_minimize_string_length/","title":"2716. Minimize String Length","text":"<p>Easy</p> <p>Given a 0-indexed string s, repeatedly perform the following operation any number of times:</p> <p>Choose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if any) and the closest occurrence of c to the right of i (if any). Your task is to minimize the length of s by performing the above operation any number of times.</p> <p>Return an integer denoting the length of the minimized string.</p>"},{"location":"problems/2716_minimize_string_length/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"aaabc\"\nOutput: 3\nExplanation: In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.\n</code></pre>"},{"location":"problems/2716_minimize_string_length/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"cbbd\"\nOutput: 3\nExplanation: For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3.\n</code></pre>"},{"location":"problems/2716_minimize_string_length/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"dddaaa\"\nOutput: 2\nExplanation: For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2.\n</code></pre>"},{"location":"problems/2716_minimize_string_length/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 100</li> <li>s contains only lowercase English letters</li> </ul>"},{"location":"problems/2716_minimize_string_length/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minimizedStringLength(self, s: str) -&gt; int:\n        f = set()\n        for c in s:\n            f.add(c)\n\n        return len(f)\n</code></pre>"},{"location":"problems/2717_semi-ordered_permutation/","title":"2717. Semi-Ordered Permutation","text":"<p>Easy</p> <p>You are given a 0-indexed permutation of n integers nums.</p> <p>A permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:</p> <p>Pick two adjacent elements in nums, then swap them. Return the minimum number of operations to make nums a semi-ordered permutation.</p> <p>A permutation is a sequence of integers from 1 to n of length n containing each number exactly once.</p>"},{"location":"problems/2717_semi-ordered_permutation/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,1,4,3]\nOutput: 2\nExplanation: We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation.\n</code></pre>"},{"location":"problems/2717_semi-ordered_permutation/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [2,4,1,3]\nOutput: 3\nExplanation: We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n</code></pre>"},{"location":"problems/2717_semi-ordered_permutation/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [1,3,4,2,5]\nOutput: 0\nExplanation: The permutation is already a semi-ordered permutation.\n</code></pre>"},{"location":"problems/2717_semi-ordered_permutation/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= nums.length == n &lt;= 50</li> <li>1 &lt;= nums[i] &lt;= 50</li> <li>nums is a permutation.</li> </ul>"},{"location":"problems/2717_semi-ordered_permutation/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        idx_1 = nums.index(1)\n        idx_n = nums.index(n)\n\n        return idx_1 + (n - 1 - idx_n) - int(idx_1 &gt; idx_n)\n</code></pre>"},{"location":"problems/2729_check_if_the_number_is_fascinating/","title":"2729. Check if The Number is Fascinating","text":"<p>Easy</p> <p>You are given an integer n that consists of exactly 3 digits.</p> <p>We call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's:</p> <ul> <li>Concatenate n with the numbers 2 * n and 3 * n.</li> </ul> <p>Return true if n is fascinating, or false otherwise.</p> <p>Concatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.</p>"},{"location":"problems/2729_check_if_the_number_is_fascinating/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 192\nOutput: true\nExplanation: We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once.\n</code></pre>"},{"location":"problems/2729_check_if_the_number_is_fascinating/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 100\nOutput: false\nExplanation: We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions.\n</code></pre>"},{"location":"problems/2729_check_if_the_number_is_fascinating/#constraints","title":"Constraints:","text":"<ul> <li>100 &lt;= n &lt;= 999</li> </ul>"},{"location":"problems/2729_check_if_the_number_is_fascinating/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isFascinating(self, n: int) -&gt; bool:\n        return \"123456789\" == \"\".join(sorted(str(n) + str(2 * n) + str(3 * n)))\n</code></pre>"},{"location":"problems/2731_movement_of_robots/","title":"2731. Movement of Robots","text":"<p>Medium</p> <p>Some robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array nums and will start moving once given the command to move. The robots will move a unit distance each second.</p> <p>You are given a string s denoting the direction in which robots will move on command. 'L' means the robot will move towards the left side or negative side of the number line, whereas 'R' means the robot will move towards the right side or positive side of the number line.</p> <p>If two robots collide, they will start moving in opposite directions.</p> <p>Return the sum of distances between all the pairs of robots d seconds after the command. Since the sum can be very large, return it modulo 109 + 7.</p>"},{"location":"problems/2731_movement_of_robots/#note","title":"Note:","text":"<ul> <li>For two robots at the index i and j, pair (i,j) and pair (j,i) are considered   the same pair.</li> <li>When robots collide, they instantly change their directions without wasting   any time.</li> <li>Collision happens when two robots share the same place in a moment.</li> <li>For example, if a robot is positioned in 0 going to the right and another is     positioned in 2 going to the left, the next second they'll be both in 1 and     they will change direction and the next second the first one will be in 0,     heading left, and another will be in 2, heading right.</li> <li>For example, if a robot is positioned in 0 going to the right and another is     positioned in 1 going to the left, the next second the first one will be in     0, heading left, and another will be in 1, heading right.</li> </ul>"},{"location":"problems/2731_movement_of_robots/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [-2,0,2], s = \"RLL\", d = 3\nOutput: 8\nExplanation: \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n</code></pre>"},{"location":"problems/2731_movement_of_robots/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1,0], s = \"RL\", d = 2\nOutput: 5\nExplanation: \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n</code></pre>"},{"location":"problems/2731_movement_of_robots/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= nums.length &lt;= 105</li> <li>-2 * 109 &lt;= nums[i] &lt;= 2 * 109</li> <li>0 &lt;= d &lt;= 109</li> <li>nums.length == s.length</li> <li>s consists of 'L' and 'R' only</li> <li>nums[i] will be unique.</li> </ul>"},{"location":"problems/2731_movement_of_robots/#craigs-notes","title":"Craig's notes","text":"<ul> <li>Based on how collisions work you can ignore them</li> <li>The calculation of res is the sum of differences of all pairs. Basically count   the number of times each element is added and subtracted involved in the total   sum.</li> </ul>"},{"location":"problems/2731_movement_of_robots/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -&gt; int:\n        m = 10**9 + 7\n\n        pos = sorted([n + d if c == \"R\" else n - d for (n, c) in zip(nums, s)])\n\n        res = 0\n        n = len(pos)\n\n        for i, p in enumerate(pos):\n            res = (res + (i * p) % m - ((n - 1 - i) * p) % m) % m\n\n        return res\n</code></pre>"},{"location":"problems/2733_neither_minimum_nor_maximum/","title":"2733. Neither Minimum nor Maximum","text":"<p>Easy</p> <p>Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.</p> <p>Return the selected integer.</p>"},{"location":"problems/2733_neither_minimum_nor_maximum/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [3,2,1,4]\nOutput: 2\nExplanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.\n</code></pre>"},{"location":"problems/2733_neither_minimum_nor_maximum/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1,2]\nOutput: -1\nExplanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.\n</code></pre>"},{"location":"problems/2733_neither_minimum_nor_maximum/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [2,1,3]\nOutput: 2\nExplanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. \n</code></pre>"},{"location":"problems/2733_neither_minimum_nor_maximum/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 100</li> <li>1 &lt;= nums[i] &lt;= 100</li> <li>All values in nums are distinct</li> </ul>"},{"location":"problems/2733_neither_minimum_nor_maximum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findNonMinOrMax(self, nums: List[int]) -&gt; int:\n        if len(nums) &lt; 3:\n            return -1\n\n        return sorted(nums)[:2][1]\n</code></pre>"},{"location":"problems/2739_total_distance_travelled/","title":"2739. Total Distance Traveled","text":"<p>Easy</p> <p>A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters.</p> <p>The truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get used up in the main tank, if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank.</p> <p>Return the maximum distance which can be traveled.</p> <p>Note: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.</p>"},{"location":"problems/2739_total_distance_travelled/#example-1","title":"Example 1:","text":"<pre><code>Input: mainTank = 5, additionalTank = 10\nOutput: 60\nExplanation: \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km.\n</code></pre>"},{"location":"problems/2739_total_distance_travelled/#example-2","title":"Example 2:","text":"<pre><code>Input: mainTank = 1, additionalTank = 2\nOutput: 10\nExplanation: \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km.\n</code></pre>"},{"location":"problems/2739_total_distance_travelled/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= mainTank, additionalTank &lt;= 100</li> </ul>"},{"location":"problems/2739_total_distance_travelled/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -&gt; int:\n        return 10 * (mainTank + min((mainTank - 1) // 4, additionalTank))\n</code></pre>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/","title":"2744. Find Maximum Number of String Pairs","text":"<p>Easy</p> <p>You are given a 0-indexed array words consisting of distinct strings.</p> <p>The string words[i] can be paired with the string words[j] if:</p> <ul> <li>The string words[i] is equal to the reversed string of words[j].</li> <li>0 &lt;= i &lt; j &lt; words.length.</li> </ul> <p>Return the maximum number of pairs that can be formed from the array words.</p> <p>Note that each string can belong in at most one pair.</p>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/#example-1","title":"Example 1:","text":"<pre><code>Input: words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]\nOutput: 2\nExplanation: In this example, we can form 2 pair of strings in the following way:\n- We pair the 0th string with the 2nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1st string with the 3rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed.\n</code></pre>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/#example-2","title":"Example 2:","text":"<pre><code>Input: words = [\"ab\",\"ba\",\"cc\"]\nOutput: 1\nExplanation: In this example, we can form 1 pair of strings in the following way:\n- We pair the 0th string with the 1st string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed.\n</code></pre>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/#example-3","title":"Example 3:","text":"<pre><code>Input: words = [\"aa\",\"ab\"]\nOutput: 0\nExplanation: In this example, we are unable to form any pair of strings.\n</code></pre>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= words.length &lt;= 50</li> <li>words[i].length == 2</li> <li>words consists of distinct strings.</li> <li>words[i] contains only lowercase English letters.</li> </ul>"},{"location":"problems/2744_find_maximum_number_of_string_pairs/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maximumNumberOfStringPairs(self, words: List[str]) -&gt; int:\n        s = set()\n        res = 0\n        for word in words:\n            if word in s:\n                res += 1\n            else:\n                s.add(word[::-1])\n\n        return res\n</code></pre>"},{"location":"problems/2748_number_of_beautiful_pairs/","title":"2748. Number of Beautiful Pairs","text":"<p>Easy</p> <p>You are given a 0-indexed integer array nums. A pair of indices i, j where 0 &lt;= i &lt; j &lt; nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime.</p> <p>Return the total number of beautiful pairs in nums.</p> <p>Two integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.</p>"},{"location":"problems/2748_number_of_beautiful_pairs/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,5,1,4]\nOutput: 5\nExplanation: There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5.\n</code></pre>"},{"location":"problems/2748_number_of_beautiful_pairs/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [11,21,12]\nOutput: 2\nExplanation: There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2.\n</code></pre>"},{"location":"problems/2748_number_of_beautiful_pairs/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= nums.length &lt;= 100</li> <li>1 &lt;= nums[i] &lt;= 9999</li> <li>nums[i] % 10 != 0</li> </ul>"},{"location":"problems/2748_number_of_beautiful_pairs/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def countBeautifulPairs(self, nums: List[int]) -&gt; int:\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if math.gcd(int(str(nums[i])[0]), nums[j] % 10) == 1:\n                    res += 1\n\n        return res\n</code></pre>"},{"location":"problems/278_first_bad_version/","title":"278. First Bad Version","text":"<p>Easy</p> <p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previousversion, all the versions after a bad version are also bad.</p> <p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p> <p>You are given an API <code>bool isBadVersion(version)</code> which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p> <pre><code># The isBadVersion API is already defined for you.\n# def isBadVersion(version: int) -&gt; bool:\n\n\nclass Solution:\n    def firstBadVersion(self, n: int) -&gt; int:\n        return self.helper(1, n)\n\n    def helper(self, low, high):\n        if low == high:\n            return low\n\n        mid = low + (high - low) // 2\n        if isBadVersion(mid):\n            return self.helper(low, mid)\n        else:\n            return self.helper(mid + 1, high)\n</code></pre>"},{"location":"problems/27_remove_element/","title":"27. Remove Element","text":"<p>Easy</p> <p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</p> <p>Return k after placing the final result in the first k slots of nums.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p>"},{"location":"problems/27_remove_element/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        i = 0\n\n        for num in nums:\n            if num != val:\n                nums[i] = num\n                i += 1\n\n        return i\n</code></pre>"},{"location":"problems/283_move_zeros/","title":"283. Move Zeroes","text":"<p>Easy</p> <p>Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <pre><code>class Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:\n        j = 0\n        for num in nums:\n            if num != 0:\n                nums[j] = num\n                j += 1\n\n        for i in range(j, len(nums)):\n            nums[i] = 0\n</code></pre>"},{"location":"problems/28_find_the_index_of_the_first_occurrence_in_a_string/","title":"28. Find the Index of the First Occurrence in a String","text":"<p>Medium</p> <p>Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>"},{"location":"problems/28_find_the_index_of_the_first_occurrence_in_a_string/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def strStr(self, haystack: str, needle: str) -&gt; int:\n        if needle in haystack:\n            return haystack.index(needle)\n\n        return -1\n</code></pre>"},{"location":"problems/290_word_pattern/","title":"290. Word Pattern","text":"<p>Easy</p> <p>Given a pattern and a string s, find if s follows the same pattern.</p> <p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.</p>"},{"location":"problems/290_word_pattern/#example-1","title":"Example 1","text":"<pre><code>Input: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true\n</code></pre>"},{"location":"problems/290_word_pattern/#example-2","title":"Example 2","text":"<pre><code>Input: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\n</code></pre>"},{"location":"problems/290_word_pattern/#example-3","title":"Example 3","text":"<pre><code>Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false\n</code></pre>"},{"location":"problems/290_word_pattern/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def wordPattern(self, pattern: str, s: str) -&gt; bool:\n        d = {}\n        seen_words = set()\n        words = s.split(\" \")\n\n        if len(pattern) != len(words):\n            return False\n\n        for i, c in enumerate(pattern):\n            if c in d:\n                if d[c] != words[i]:\n                    return False\n            else:\n                if words[i] in seen_words:\n                    return False\n\n                d[c] = words[i]\n                seen_words.add(words[i])\n\n        return True\n</code></pre>"},{"location":"problems/292_nim_game/","title":"292. Nim Game","text":"<p>Easy</p> <p>You are playing the following Nim Game with your friend:</p> <ul> <li>Initially, there is a heap of stones on the table.</li> <li>You and your friend will alternate taking turns, and you go first.</li> <li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li> <li>The one who removes the last stone is the winner.</li> </ul> <p>Given <code>n</code>, the number of stones in the heap, return<code>true</code> if you can win the game assuming both you and your friend play optimally, otherwise return <code>false</code>.</p> <pre><code>class Solution:\n    def canWinNim(self, n: int) -&gt; bool:\n        return n % 4 != 0\n</code></pre>"},{"location":"problems/295_find_median_from_data_stream/","title":"295. Find Median from Data Stream","text":"<p>Link</p> <p>Hard</p> <p>The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p> <ul> <li>For example, for arr = [2,3,4], the median is 3.</li> <li>For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.</li> </ul> <p>Implement the MedianFinder class:</p> <ul> <li>MedianFinder() initializes the MedianFinder object.</li> <li>void addNum(int num) adds the integer num from the data stream to the data structure.</li> <li>double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.</li> </ul>"},{"location":"problems/295_find_median_from_data_stream/#example-1","title":"Example 1:","text":"<pre><code>Input\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</code></pre>"},{"location":"problems/295_find_median_from_data_stream/#constraints","title":"Constraints:","text":"<ul> <li>-105 &lt;= num &lt;= 105</li> <li>There will be at least one element in the data structure before calling findMedian.</li> <li>At most 5 * 104 calls will be made to addNum and findMedian.</li> </ul>"},{"location":"problems/295_find_median_from_data_stream/#follow-up","title":"Follow up:","text":"<p>If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution? If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?</p>"},{"location":"problems/295_find_median_from_data_stream/#craigs-notes","title":"Craig's notes:","text":"<ul> <li>The left (max) heap contains at most one element more than the right (min) heap.</li> <li>If the heaps are different sizes the median is at the top of the left heap.</li> <li>If the heaps are the same sizes the median is the sum divided by 2 of the top elements of the heaps.</li> </ul>"},{"location":"problems/295_find_median_from_data_stream/#solution","title":"Solution","text":"<pre><code>class MedianFinder:\n    def __init__(self):\n        self.left_heap = []  # max heap\n        self.right_heap = []  # min heap\n\n    def addNum(self, num: int) -&gt; None:\n        if self.left_heap == []:\n            heapq.heappush(self.left_heap, -num)\n            return\n\n        m = -self.left_heap[0]\n        if num &lt;= m:\n            heapq.heappush(self.left_heap, -num)\n        else:\n            heapq.heappush(self.right_heap, num)\n\n        self.rebalance()\n\n    def rebalance(self):\n        if len(self.left_heap) &lt; len(self.right_heap):\n            heapq.heappush(self.left_heap, -heapq.heappop(self.right_heap))\n\n        if len(self.left_heap) &gt; len(self.right_heap) + 1:\n            heapq.heappush(self.right_heap, -heapq.heappop(self.left_heap))\n\n    def findMedian(self) -&gt; float:\n        if len(self.left_heap) &gt; len(self.right_heap):\n            return -self.left_heap[0]\n\n        return (-self.left_heap[0] + self.right_heap[0]) / 2\n</code></pre>"},{"location":"problems/299_bulls_and_cows/","title":"299. Bulls and Cows","text":"<p>Medium</p> <p>You are playing the Bulls and Cows game with your friend.</p> <p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p> <ul> <li>The number of \"bulls\", which are digits in the guess that are in the correct position.</li> <li>The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li> </ul> <p>Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.</p> <p>The hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.</p> <pre><code>class Solution:\n    def getHint(self, secret: str, guess: str) -&gt; str:\n        bulls, cows = 0, 0\n        seen = [0] * 10\n\n        for i in range(len(secret)):\n            s, g = int(secret[i]), int(guess[i])\n\n            if s == g:\n                bulls += 1\n            else:\n                if seen[s] &lt; 0:\n                    cows += 1\n                if seen[g] &gt; 0:\n                    cows += 1\n                seen[s] += 1\n                seen[g] -= 1\n\n        return f\"{bulls}A{cows}B\"\n</code></pre>"},{"location":"problems/2_add_two_numbers/","title":"2. Add Two Numbers","text":"<p>Link</p> <p>Medium</p> <p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>"},{"location":"problems/2_add_two_numbers/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def addTwoNumbers(\n        self, l1: Optional[ListNode], l2: Optional[ListNode]\n    ) -&gt; Optional[ListNode]:\n        return self.add_two_numbers_with_carry(l1, l2, 0)\n\n    def add_two_numbers_with_carry(\n        self, l1: Optional[ListNode], l2: Optional[ListNode], carry: int\n    ) -&gt; Optional[ListNode]:\n        if l1 is None and l2 is None:\n            if carry &gt; 0:\n                return ListNode(carry)\n        elif l1 is None:\n            v = l2.val + carry\n            return ListNode(v % 10, add_two_numbers_with_carry(None, l2.next, v // 10))\n        elif l2 is None:\n            v = l1.val + carry\n            return ListNode(v % 10, add_two_numbers_with_carry(l1.next, None, v // 10))\n        else:\n            v = l1.val + l2.val + carry\n            return ListNode(\n                v % 10, add_two_numbers_with_carry(l1.next, l2.next, v // 10)\n            )\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/300_longest_increasing_subsequence/","title":"300. Longest Increasing Subsequence","text":"<p>Medium</p> <p>Given an integer array nums, return the length of the longest strictly increasing  subsequence.</p>"},{"location":"problems/300_longest_increasing_subsequence/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</code></pre>"},{"location":"problems/300_longest_increasing_subsequence/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [0,1,0,3,2,3]\nOutput: 4\n</code></pre>"},{"location":"problems/300_longest_increasing_subsequence/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [7,7,7,7,7,7,7]\nOutput: 1\n</code></pre>"},{"location":"problems/300_longest_increasing_subsequence/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 2500</li> <li>-104 &lt;= nums[i] &lt;= 104</li> </ul> <p>Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?</p>"},{"location":"problems/300_longest_increasing_subsequence/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        dp = [1] * len(nums)\n\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[j] &lt; nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        return max(dp)\n</code></pre>"},{"location":"problems/303_range_sum_query/","title":"303. Range Sum Query - Immutable","text":"<p>Easy</p> <p>Given an integer array nums, handle multiple queries of the following type:</p> <ul> <li>Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;= right.</li> </ul> <p>Implement the NumArray class:</p> <ul> <li>NumArray(int[] nums) Initializes the object with the integer array nums.</li> <li>int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).</li> </ul> <pre><code>class NumArray:\n    def __init__(self, nums: List[int]):\n        self.sums = [0] * (len(nums) + 1)\n        for i, num in enumerate(nums):\n            self.sums[i + 1] = nums[i] + self.sums[i]\n\n    def sumRange(self, left: int, right: int) -&gt; int:\n        return self.sums[right + 1] - self.sums[left]\n</code></pre>"},{"location":"problems/31_next_permutation/","title":"31. Next Permutation","text":"<p>Medium</p> <p>A permutation of an array of integers is an arrangement of its members into a sequence or linear order.</p> <ul> <li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of   <code>arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li> </ul> <p>The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p> <ul> <li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li> <li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li> <li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code>   does not have a lexicographical larger rearrangement.</li> </ul> <p>Given an array of integers nums, find the next permutation of nums.</p> <p>The replacement must be in place and use only constant extra memory.</p>"},{"location":"problems/31_next_permutation/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def nextPermutation(self, nums: List[int]) -&gt; None:\n        if len(nums) == 1:\n            return\n\n        # Find the pivot.\n        i = len(nums) - 2\n        while i &gt;= 0 and nums[i] &gt;= nums[i + 1]:\n            i -= 1\n\n        if i &lt; 0:\n            nums.reverse()\n        else:\n            # Find what we will swap the pivot with\n            j = len(nums) - 1\n            while j &gt; i and nums[j] &lt;= nums[i]:\n                j -= 1\n\n            # Swap with the pivot\n            nums[i], nums[j] = nums[j], nums[i]\n\n            # Reverse the remainder of the list\n            nums[i + 1 :] = nums[i + 1 :][::-1]\n</code></pre>"},{"location":"problems/326_power_of_three/","title":"326. Power of Three","text":"<p>Easy</p> <p>Given an integer <code>n</code>, return true if it is a power of three. Otherwise, return false.</p> <p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3^x</code>.</p> <pre><code>class Solution:\n    def isPowerOfThree(self, n: int) -&gt; bool:\n        m = 1\n        while m &lt; n:\n            m *= 3\n\n        return m == n\n</code></pre>"},{"location":"problems/338_counting_bits/","title":"338. Counting Bits","text":"<p>Easy</p> <p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> <code>(0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the number of 1's in the binary representation of <code>i</code>.</p>"},{"location":"problems/338_counting_bits/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</code></pre>"},{"location":"problems/338_counting_bits/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</code></pre>"},{"location":"problems/338_counting_bits/#constraints","title":"Constraints:","text":"<ul> <li>0 &lt;= n &lt;= 105</li> </ul>"},{"location":"problems/338_counting_bits/#follow-up","title":"Follow up:","text":"<ul> <li>It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?</li> <li>Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?</li> </ul>"},{"location":"problems/338_counting_bits/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def countBits(self, n: int) -&gt; List[int]:\n        res = []\n        for i in range(n + 1):\n            res.append(format(n, \"b\").count(1))\n\n        return res\n</code></pre>"},{"location":"problems/33_search_in_rotated_sorted_array/","title":"33. Search in Rotated Sorted Array","text":"<p>Medium</p> <p>There is an integer array nums sorted in ascending order (with distinct values).</p> <p>Prior to being passed to your function, <code>nums</code> is rotated at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index 3 and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or <code>-1</code> if it is not in nums.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>"},{"location":"problems/33_search_in_rotated_sorted_array/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n</code></pre>"},{"location":"problems/33_search_in_rotated_sorted_array/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n</code></pre>"},{"location":"problems/33_search_in_rotated_sorted_array/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [1], target = 0\nOutput: -1\n</code></pre>"},{"location":"problems/33_search_in_rotated_sorted_array/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 5000</li> <li>-104 &lt;= nums[i] &lt;= 104</li> <li>All values of nums are unique.</li> <li>nums is an ascending array that is possibly rotated.</li> <li>-104 &lt;= target &lt;= 104</li> </ul>"},{"location":"problems/33_search_in_rotated_sorted_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; int:\n        pivot = self.find_pivot(nums, 0, len(nums) - 1)\n\n        if pivot == -1:\n            return self.bsearch(nums, target)\n\n        if target &gt;= nums[0]:\n            # Search the first (larger) half.\n            return self.bsearch(nums[:pivot], target)\n\n        # Search the second (smaller) half and offset.\n        res = self.bsearch(nums[pivot:], target)\n        if res == -1:\n            return -1\n\n        return pivot + res\n\n    def find_pivot(self, nums, left, right):\n        if right &lt; left:\n            return -1\n\n        mid = left + (right - left) // 2\n\n        if mid &lt; right and nums[mid] &gt; nums[mid + 1]:\n            return mid + 1\n        elif mid &gt; left and nums[mid - 1] &gt; nums[mid]:\n            return mid\n        elif nums[left] &gt; nums[mid]:\n            # Left side is not sorted; search there\n            return self.find_pivot(nums, left, mid - 1)\n        else:\n            return self.find_pivot(nums, mid + 1, right)\n\n    def bsearch(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n\n        while left &lt;= right:\n            mid = left + (right - left) // 2\n\n            if nums[mid] == target:\n                return mid\n\n            if target &gt; nums[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return -1\n</code></pre>"},{"location":"problems/342_power_of_four/","title":"342. Power of Four","text":"<p>Easy</p> <p>Given an integer <code>n</code>, return true if it is a power of four. Otherwise, return false.</p> <p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4^x</code>.</p> <pre><code>class Solution:\n    def isPowerOfFour(self, n: int) -&gt; bool:\n        m = 1\n        while m &lt; n:\n            m *= 4\n\n        return m == n\n</code></pre>"},{"location":"problems/344_reverse_string/","title":"344. Reverse String","text":"<p>Easy</p> <p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>You must do this by modifying the input array in-place with O(1) extra memory.</p> <pre><code>class Solution:\n    def reverseString(self, s: List[str]) -&gt; None:\n        s.reverse()\n</code></pre>"},{"location":"problems/345_reverse_vowels_of_a_string/","title":"345. Reverse Vowels of a String","text":"<p>Easy</p> <p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p> <p>The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.</p> <pre><code>class Solution:\n    def reverseVowels(self, s: str) -&gt; str:\n        vowels = []\n        ss = list(s)\n\n        for c in ss:\n            if c.lower() in \"aeiou\":\n                vowels.append(c)\n\n        for i, c in enumerate(ss):\n            if c.lower() in \"aeiou\":\n                ss[i] = vowels.pop()\n\n        return \"\".join(ss)\n</code></pre>"},{"location":"problems/347_top_k_frequent_elements/","title":"347. Top K Frequent Elements","text":"<p>Medium</p> <p>Given an integer array nums and an integer <code>k</code>, return the <code>k</code> most frequent elements. You may return the answer in any order.</p>"},{"location":"problems/347_top_k_frequent_elements/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n</code></pre>"},{"location":"problems/347_top_k_frequent_elements/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1], k = 1\nOutput: [1]\n</code></pre>"},{"location":"problems/347_top_k_frequent_elements/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 105</li> <li>-104 &lt;= nums[i] &lt;= 104</li> <li>k is in the range [1, the number of unique elements in the array].</li> <li>It is guaranteed that the answer is unique.</li> </ul> <p>Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.</p>"},{"location":"problems/347_top_k_frequent_elements/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:\n        counts = {}\n        for n in nums:\n            counts[n] = counts.get(n, 0) + 1\n\n        return sorted(counts.keys(), key=counts.get)[-k:]\n</code></pre>"},{"location":"problems/349_intersection_of_two_arrays/","title":"349. Intersection of Two Arrays","text":"<p>Easy</p> <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</p> <pre><code>class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n        d = set()\n        for num in set(nums1):\n            d.add(num)\n\n        res = []\n        for num in set(nums2):\n            if num in d:\n                res.append(num)\n\n        return res\n</code></pre>"},{"location":"problems/34_find_first_and_last_position_of_element_in_sorted_array/","title":"34. Find First and Last Position of Element in Sorted Array","text":"<p>Medium</p> <p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p> <p>If target is not found in the array, return [-1, -1].</p> <p>You must write an algorithm with O(log n) runtime complexity.</p> <pre><code>class Solution:\n    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        m = bsearch(nums, target, 0, len(nums) - 1)\n        if m == -1:\n            return [-1, -1]\n\n        l = m\n        while True:\n            tmp = bsearch(nums, target, 0, l - 1)\n            if tmp == -1:\n                break\n            l = tmp\n\n        r = m\n        while True:\n            tmp = bsearch(nums, target, r + 1, len(nums) - 1)\n            if tmp == -1:\n                break\n            r = tmp\n\n        return [l, r]\n\n\ndef bsearch(nums, target, left, right):\n    if left &gt; right:\n        return -1\n\n    mid = left + (right - left) // 2\n    if nums[mid] == target:\n        return mid\n\n    if target &gt; nums[mid]:\n        return bsearch(nums, target, mid + 1, right)\n\n    return bsearch(nums, target, left, mid - 1)\n</code></pre>"},{"location":"problems/350_intersection_of_two_arrays_2/","title":"350. Intersection of Two Arrays II","text":"<p>Easy</p> <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p> <pre><code>class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n        d = {}\n        for num in nums1:\n            d[num] = d.get(num, 0) + 1\n\n        res = []\n        for num in nums2:\n            if num in d and d[num] &gt; 0:\n                res.append(num)\n                d[num] -= 1\n\n        return res\n</code></pre>"},{"location":"problems/35_search_insert_position/","title":"35. Search Insert Position","text":"<p>Easy</p> <p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <pre><code>class Solution:\n    def searchInsert(self, nums: List[int], target: int) -&gt; int:\n        left = 0\n        right = len(nums)\n\n        while left &lt; right:\n            mid = left + (right - left) // 2\n\n            if nums[mid] == target:\n                return mid\n\n            if target &lt; nums[mid]:\n                right = mid\n            else:\n                left = mid + 1\n\n        return right\n</code></pre>"},{"location":"problems/367_valid_perfect_square/","title":"367. Valid Perfect Square","text":"<p>Easy</p> <p>Given a positive integer <code>num</code>, write a function which returns <code>True</code> if <code>num</code> is a perfect square else <code>False</code>.</p> <p>Follow up: Do not use any built-in library function such as <code>sqrt</code>.</p> <pre><code># The sum of the first odd numbers is always a perfect square.\nclass Solution:\n    def isPerfectSquare(self, num: int) -&gt; bool:\n        acc = 1\n\n        while num &gt; 0:\n            num -= acc\n            acc += 2\n\n        return num == 0\n</code></pre>"},{"location":"problems/36_valid_sudoku/","title":"36. Valid Sudoku","text":"<p>Medium</p> <p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p> <ul> <li>Each row must contain the digits 1-9 without repetition.</li> <li>Each column must contain the digits 1-9 without repetition.</li> <li>Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9   without repetition.</li> </ul> <p>Note:</p> <ul> <li>A Sudoku board (partially filled) could be valid but is not necessarily   solvable.</li> <li>Only the filled cells need to be validated according to the mentioned rules.</li> </ul> <pre><code>FULL_BLOCK = set(map(lambda x: str(x), range(1, 10)))\n\n\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -&gt; bool:\n        return check_rows(board) and check_cols(board) and check_boxes(board)\n\n\n# Check only 1-9 without repetition\ndef verify(block: List[str]) -&gt; bool:\n    no_dots = list(filter(lambda x: x != \".\", block))\n    s = set(no_dots)\n\n    if len(s) != len(no_dots) or not (s &lt;= FULL_BLOCK):\n        return False\n\n    return True\n\n\ndef check_rows(board: List[List[str]]) -&gt; bool:\n    for row in board:\n        if not verify(row):\n            return False\n\n    return True\n\n\ndef check_cols(board: List[List[str]]) -&gt; bool:\n    l = len(board)\n    for i in range(l):\n        col = []\n        for j in range(l):\n            col.append(board[j][i])\n\n        if not verify(col):\n            return False\n\n    return True\n\n\ndef check_boxes(board: List[List[str]]) -&gt; bool:\n    for i in [0, 3, 6]:\n        for j in [0, 3, 6]:\n            box = []\n            for x in range(3):\n                for y in range(3):\n                    box.append(board[i + x][j + y])\n            if not verify(box):\n                return False\n\n    return True\n</code></pre>"},{"location":"problems/374_guess_number_higher_or_lower/","title":"374. Guess Number Higher or Lower","text":"<p>Easy</p> <p>We are playing the Guess Game. The game is as follows:</p> <p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p> <p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p> <p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p> <ul> <li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li> <li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li> <li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li> </ul> <p>Return the number that I picked.</p> <pre><code># The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if num is higher than the picked number\n#          1 if num is lower than the picked number\n#          otherwise return 0\n# def guess(num: int) -&gt; int:\n\n\nclass Solution:\n    def guessNumber(self, n: int) -&gt; int:\n        return self.helper(1, n)\n\n    def helper(self, low, high):\n        mid = low + (high - low) // 2\n        n = guess(mid)\n\n        if n &lt; 0:\n            return self.helper(low, mid)\n        elif n == 0:\n            return mid\n        else:\n            return self.helper(mid + 1, high)\n</code></pre>"},{"location":"problems/383_ransom_note/","title":"383. Ransom Note","text":"<p>Easy</p> <p>Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.</p> <p>Each letter in magazine can only be used once in ransomNote.</p> <pre><code>class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -&gt; bool:\n        d = {}\n\n        for c in magazine:\n            d[c] = d.get(c, 0) + 1\n\n        for c in ransomNote:\n            if c not in d or d[c] == 0:\n                return False\n            d[c] -= 1\n\n        return True\n</code></pre>"},{"location":"problems/387_first_unique_character_in_a_string/","title":"387. First Unique Character in a String","text":"<p>Easy</p> <p>Given a string <code>s</code>, find the first non-repeating character in it and return its index. If it does not exist, return <code>-1</code>.</p> <pre><code>class Solution:\n    def firstUniqChar(self, s: str) -&gt; int:\n        d = {}\n\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n\n        for i, c in enumerate(s):\n            if d[c] == 1:\n                return i\n\n        return -1\n</code></pre>"},{"location":"problems/389_find_the_difference/","title":"389. Find the Difference","text":"<p>Easy</p> <p>You are given two strings <code>s</code> and <code>t</code>.</p> <p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p> <p>Return the letter that was added to <code>t</code>.</p> <pre><code>class Solution:\n    def findTheDifference(self, s: str, t: str) -&gt; str:\n        fs = self.freq(s)\n        ft = self.freq(t)\n\n        for k, v in ft.items():\n            if k not in fs or fs[k] &lt; v:\n                return k\n\n    def freq(self, s):\n        d = {}\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n        return d\n</code></pre>"},{"location":"problems/38_count_and_say/","title":"38. Count and Say","text":"<p>Medium</p> <p>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:</p> <ul> <li>countAndSay(1) = \"1\"</li> <li>countAndSay(n) is the way you would \"say\" the digit string from   countAndSay(n-1), which is then converted into a different digit string.</li> </ul> <p>To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</p> <p>For example, the saying and conversion for digit string \"3322251\": \"23321511\"</p> <p>Given a positive integer n, return the nth term of the count-and-say sequence.</p> <pre><code>class Solution:\n    def countAndSay(self, n: int) -&gt; str:\n        if n == 1:\n            return \"1\"\n\n        return \"\".join(\n            [str(len(list(g))) + e for e, g in groupby(self.countAndSay(n - 1))]\n        )\n</code></pre>"},{"location":"problems/392_is_subsequence/","title":"392. Is Subsequence","text":"<p>Easy</p> <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>s</code> is a subsequence of <code>t</code>, or <code>false</code> otherwise.</p> <p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).</p> <pre><code>class Solution:\n    def isSubsequence(self, s: str, t: str) -&gt; bool:\n        if s == \"\":\n            return True\n\n        ss = list(s)\n        i = 0\n        for c in t:\n            if i &gt;= len(ss):\n                break\n            if c == ss[i]:\n                i += 1\n\n        return i == len(ss)\n</code></pre>"},{"location":"problems/394_decode_string/","title":"394. Decode String","text":"<p>Medium</p> <p>Given an encoded string, return its decoded string.</p> <p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p> <p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p> <p>The test cases are generated so that the length of the output will never exceed 105.</p> <pre><code>class Solution:\n    def decodeString(self, s: str) -&gt; str:\n        stack = []\n        curNum = 0\n        curString = \"\"\n\n        for c in s:\n            if c == \"[\":\n                stack.append(curString)\n                stack.append(curNum)\n                curString = \"\"\n                curNum = 0\n            elif c == \"]\":\n                n = stack.pop()\n                prevString = stack.pop()\n                curString = prevString + n * curString\n            elif c.isdigit():\n                curNum = 10 * curNum + int(c)\n            else:\n                curString += c\n\n        return curString\n</code></pre>"},{"location":"problems/39_combination_sum/","title":"39. Combination Sum","text":"<p>Medium</p> <p>Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.</p> <p>The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p> <p>It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.</p>"},{"location":"problems/39_combination_sum/#example-1","title":"Example 1:","text":"<pre><code>Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</code></pre>"},{"location":"problems/39_combination_sum/#example-2","title":"Example 2:","text":"<pre><code>Input: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n</code></pre>"},{"location":"problems/39_combination_sum/#example-3","title":"Example 3:","text":"<pre><code>Input: candidates = [2], target = 1\nOutput: []\n</code></pre>"},{"location":"problems/39_combination_sum/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= candidates.length &lt;= 30</li> <li>2 &lt;= candidates[i] &lt;= 40</li> <li>All elements of candidates are distinct.</li> <li>1 &lt;= target &lt;= 40</li> </ul>"},{"location":"problems/39_combination_sum/#craigs-notes","title":"Craig's notes","text":"<p>This is basically the knapsack problem.</p>"},{"location":"problems/39_combination_sum/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n        return self.helper(sorted(candidates), target, [])\n\n    def helper(\n        self, candidates: List[int], target: int, res: List[int]\n    ) -&gt; List[List[int]]:\n        if target == 0:\n            return [res]\n\n        if len(candidates) == 0:\n            return []\n\n        c = candidates[0]\n        if c &gt; target:\n            return []\n\n        return self.helper(candidates, target - c, res + [c]) + self.helper(\n            candidates[1:], target, res\n        )\n</code></pre>"},{"location":"problems/3_longest_substring_without_repeating_characters/","title":"3. Longest Substring Without Repeating Characters","text":"<p>Link</p> <p>Medium</p> <p>Given a string <code>s</code>, find the length of the longest substring without repeating characters.</p>"},{"location":"problems/3_longest_substring_without_repeating_characters/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</code></pre>"},{"location":"problems/3_longest_substring_without_repeating_characters/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</code></pre>"},{"location":"problems/3_longest_substring_without_repeating_characters/#example-3","title":"Example 3:","text":"<pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre>"},{"location":"problems/3_longest_substring_without_repeating_characters/#constraints","title":"Constraints:","text":"<ul> <li>0 &lt;= s.length &lt;= 5 * 104</li> <li>s consists of English letters, digits, symbols and spaces.</li> </ul>"},{"location":"problems/3_longest_substring_without_repeating_characters/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        seen = {}\n        start = 0\n        cur = 0\n        max = 0\n\n        for i, c in enumerate(s):\n            if c in seen and seen[c] &gt;= start:\n                start = seen[c] + 1\n                if cur &gt; max:\n                    max = cur\n                cur = i - start + 1\n            else:\n                cur += 1\n\n            seen[c] = i\n\n        if cur &gt; max:\n            max = cur\n\n        return max\n</code></pre>"},{"location":"problems/404_sum_of_left_leaves/","title":"404. Sum of Left Leaves","text":"<p>Easy</p> <p>Given the root of a binary tree, return the sum of all left leaves.</p> <p>A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.</p> <pre><code>class Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return 0\n\n        return helper(root, False)\n\n\ndef helper(root: Optional[TreeNode], is_left: bool) -&gt; int:\n    if root is None:\n        return 0\n\n    if is_left and root.left is None and root.right is None:\n        return root.val\n\n    return helper(root.left, True) + helper(root.right, False)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/405_convert_a_number_to_hexidecimal/","title":"405. Convert a Number to Hexadecimal","text":"<p>Easy</p> <p>Given an integer num, return a string representing its hexadecimal representation. For negative integers, two's complement method is used.</p> <p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p> <p>Note: You are not allowed to use any built-in library method to directly solve this problem.</p> <pre><code>class Solution:\n    def toHex(self, num: int) -&gt; str:\n        if num == 0:\n            return \"0\"\n\n        decToHex = \"0123456789abcdef\"\n        res = \"\"\n\n        for _ in range(8):\n            res = decToHex[num % 16] + res\n            num = num &gt;&gt; 4\n\n        return res.lstrip(\"0\")\n</code></pre>"},{"location":"problems/409_longest_palindrome/","title":"409. Longest Palindrome","text":"<p>Easy</p> <p>Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.</p> <p>Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.</p> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; int:\n        d = {}\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n\n        res = 0\n        rem = 0\n        for v in d.values():\n            if v % 2 == 0:\n                res += v\n            else:\n                res += v - 1\n                rem = 1\n\n        return res + rem\n</code></pre>"},{"location":"problems/40_combination_sum_ii/","title":"40. Combination Sum II","text":"<p>Medium</p> <p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.</p> <p>Each number in candidates may only be used once in the combination.</p> <p>Note: The solution set must not contain duplicate combinations.</p> <pre><code>class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n        return self.helper(sorted(candidates), target, [])\n\n    def helper(\n        self, candidates: List[int], target: int, res: List[List[int]]\n    ) -&gt; List[List[int]]:\n        if target == 0:\n            return [res]\n\n        if len(candidates) == 0:\n            return []\n\n        c = candidates[0]\n\n        withC = []\n        if target &gt;= c:\n            withC = self.helper(candidates[1:], target - c, [c] + res)\n\n        i = 1\n        while i &lt; len(candidates) and candidates[i] == c:\n            i += 1\n        withoutC = self.helper(candidates[i:], target, res)\n\n        return withC + withoutC\n</code></pre>"},{"location":"problems/412_fizz_buzz/","title":"412. Fizz Buzz","text":"<p>Easy</p> <p>Given an integer n, return a string array answer (1-indexed) where: - <code>answer[i] == \"FizzBuzz\"</code> if <code>i</code> is divisible by 3 and 5. - <code>answer[i] == \"Fizz\"</code> if <code>i</code> is divisible by 3. - <code>answer[i] == \"Buzz\"</code> if <code>i</code> is divisible by 5. - <code>answer[i] == i</code> (as a string) if none of the above conditions are true.</p> <pre><code>class Solution:\n    def fizzBuzz(self, n: int) -&gt; List[str]:\n        return [fb(n) for n in range(1, n + 1)]\n\n\ndef fb(n: int) -&gt; str:\n    if n % 3 == 0 and n % 5 == 0:\n        return \"FizzBuzz\"\n    elif n % 3 == 0:\n        return \"Fizz\"\n    elif n % 5 == 0:\n        return \"Buzz\"\n    else:\n        return str(n)\n</code></pre>"},{"location":"problems/414_third_maximum_number/","title":"414. Third Maximum Number","text":"<p>Easy</p> <p>Given integer array nums, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.</p> <pre><code>class Solution:\n    def thirdMax(self, nums: List[int]) -&gt; int:\n        s = sorted(set(nums), reverse=True)\n        if len(s) &gt; 2:\n            return s[2]\n\n        return s[0]\n</code></pre>"},{"location":"problems/415_add_strings/","title":"415. Add Strings","text":"<p>Easy</p> <p>Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.</p> <p>You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.</p> <pre><code>class Solution:\n    def addStrings(self, num1: str, num2: str) -&gt; str:\n        l1 = len(num1)\n        l2 = len(num2)\n        if l1 &lt;= l2:\n            num1 = num1.zfill(l2)\n        else:\n            num2 = num2.zfill(l1)\n\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n\n        res = \"\"\n        carry = 0\n        for i in range(len(num1)):\n            temp = int(num1[i]) + int(num2[i]) + carry\n            carry = temp // 10\n            res += str(temp % 10)\n\n        if carry &gt; 0:\n            res += str(carry)\n\n        return res[::-1]\n</code></pre>"},{"location":"problems/41_first_missing_positive/","title":"41. First Missing Positive","text":"<p>Hard</p> <p>Given an unsorted integer array nums, return the smallest missing positive integer.</p> <p>You must implement an algorithm that runs in O(n) time and uses constant extra space.</p> <pre><code>class Solution:\n    def firstMissingPositive(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n\n        # Get rid of any non-positives.\n        for i in range(n):\n            if nums[i] &lt;= 0:\n                nums[i] = n + 1\n\n        # Fill holes where we can.\n        i = 0\n        while i &lt; n:\n            index = nums[i] - 1\n            while index &gt;= 0 and index &lt; n:\n                nums[index], index = -1, nums[index] - 1\n            i += 1\n\n        # Find the first hole.\n        for i, num in enumerate(nums):\n            if num &gt; 0:\n                return i + 1\n\n        # No hole.\n        return n + 1\n</code></pre>"},{"location":"problems/424_longest_repeating_character_replacement/","title":"424. Longest Repeating Character Replacement","text":"<p>Medium</p> <p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p> <p>Return the length of the longest substring containing the same letter you can get after performing the above operations.</p> <pre><code>class Solution:\n    def characterReplacement(self, s: str, k: int) -&gt; int:\n        d = {}\n        left = 0\n        maxf = 0\n        res = 0\n\n        for right in range(len(s)):\n            c = s[right]\n            d[c] = d.get(c, 0) + 1\n            maxf = max(maxf, d[c])\n\n            while right - left + 1 - maxf &gt; k:\n                d[s[left]] -= 1\n                left += 1\n\n            res = max(res, right - left + 1)\n\n        return res\n</code></pre>"},{"location":"problems/434_number_of_segments_in_a_string/","title":"434. Number of Segments in a String","text":"<p>Easy</p> <p>Given a string s, return the number of segments in the string.</p> <p>A segment is defined to be a contiguous sequence of non-space characters.</p> <pre><code>class Solution:\n    def countSegments(self, s: str) -&gt; int:\n        return len(s.split())\n</code></pre>"},{"location":"problems/438_find_all_anagrams_in_a_string/","title":"438. Find All Anagrams in a String","text":"<p>Medium</p> <p>Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <pre><code>class Solution:\n    def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n        if len(s) &lt; len(p):\n            return []\n\n        ds = {}\n        dp = {}\n        for c in s:\n            ds[c], dp[c] = 0, 0\n        for c in p:\n            ds[c], dp[c] = 0, 0\n\n        for c in p:\n            dp[c] += 1\n\n        lens = len(s)\n        lenp = len(p)\n\n        for i in range(lenp):\n            ds[s[i]] += 1\n\n        res = []\n        for i in range(lenp, lens + 1):\n            if ds == dp:\n                res.append(i - lenp)\n\n            if i == lens:\n                break\n\n            ds[s[i - lenp]] -= 1\n            ds[s[i]] += 1\n\n        return res\n</code></pre>"},{"location":"problems/43_multiply_strings/","title":"43. Multiply Strings","text":"<p>Medium</p> <p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p> <p>Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.</p> <pre><code>class Solution:\n    def multiply(self, num1: str, num2: str) -&gt; str:\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n\n        n1 = list(num1)\n        n2 = list(num2)\n\n        ln1 = len(n1)\n        ln2 = len(n2)\n        res = [0] * (ln1 + ln2)\n\n        for i in reversed(range(ln1)):\n            for j in reversed(range(ln2)):\n                tmp = int(n1[i]) * int(n2[j]) + res[i + j + 1]\n                res[i + j + 1] = tmp % 10\n                res[i + j] += tmp // 10\n\n        return \"\".join([str(i) for i in res]).lstrip(\"0\")\n</code></pre>"},{"location":"problems/441_arranging_coins/","title":"441. Arranging Coins","text":"<p>Easy</p> <p>You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.</p> <p>Given the integer n, return the number of complete rows of the staircase you will build.</p> <pre><code>import math\n\n\nclass Solution:\n    def arrangeCoins(self, n: int) -&gt; int:\n        # x^2 + x - 2n &gt;= 0\n        return math.floor((-1 + math.sqrt(1 + 8 * n)) / 2)\n</code></pre>"},{"location":"problems/443_string_compression/","title":"443. String Compression","text":"<p>Medium</p> <p>Given an array of characters chars, compress it using the following algorithm:</p> <p>Begin with an empty string s. For each group of consecutive repeating characters in chars:</p> <ul> <li>If the group's length is 1, append the character to s.</li> <li>Otherwise, append the character followed by the group's length.</li> </ul> <p>The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.</p> <p>After you are done modifying the input array, return the new length of the array.</p> <p>You must write an algorithm that uses only constant extra space.</p>"},{"location":"problems/443_string_compression/#example-1","title":"Example 1:","text":"<pre><code>Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n</code></pre>"},{"location":"problems/443_string_compression/#example-2","title":"Example 2:","text":"<pre><code>Input: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n</code></pre>"},{"location":"problems/443_string_compression/#example-3","title":"Example 3:","text":"<pre><code>Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n</code></pre>"},{"location":"problems/443_string_compression/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= chars.length &lt;= 2000</li> <li>chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.</li> </ul>"},{"location":"problems/443_string_compression/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def compress(self, chars: List[str]) -&gt; int:\n        stuff = [(a, len(list(b))) for a, b in itertools.groupby(chars)]\n        i = 0\n        for v, l in stuff:\n            chars[i] = v\n            i += 1\n\n            if l != 1:\n                for d in str(l):\n                    chars[i] = d\n                    i += 1\n\n        return i\n</code></pre>"},{"location":"problems/448_find_all_numbers_disappeared_in_an_array/","title":"448. Find All Numbers Disappeared in an Array","text":"<p>Easy</p> <p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return an array of all the integers in the range <code>[1, n]</code> that do not appear in nums.</p> <pre><code>class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -&gt; List[int]:\n        seen = [0] * len(nums)\n\n        for i in nums:\n            seen[i - 1] = 1\n\n        res = []\n        for i in range(len(seen)):\n            if seen[i] == 0:\n                res.append(i + 1)\n\n        return res\n</code></pre>"},{"location":"problems/455_assign_cookies/","title":"455. Assign Cookies","text":"<p>Easy</p> <p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p> <p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p> <pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        g.sort()\n        s.sort()\n        leng = len(g)\n\n        i = 0\n        for cookieSize in s:\n            if g[i] &lt;= cookieSize:\n                i += 1\n            if i == leng:\n                break\n\n        return i\n</code></pre>"},{"location":"problems/459_repeated_substring_pattern/","title":"459. Repeated Substring Pattern","text":"<p>Easy</p> <p>Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p> <pre><code>class Solution:\n    def repeatedSubstringPattern(self, s: str) -&gt; bool:\n        return s in (s + s)[1:-1]\n</code></pre>"},{"location":"problems/461_hamming_distance/","title":"461. Hamming Distance","text":"<p>Easy</p> <p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p> <p>Given two integers <code>x</code> and <code>y</code>, return the Hamming distance between them.</p> <pre><code>class Solution:\n    def hammingDistance(self, x: int, y: int) -&gt; int:\n        return format(x ^ y, \"b\").count(\"1\")\n</code></pre>"},{"location":"problems/463_island_parameter/","title":"463. Island Perimeter","text":"<p>Easy</p> <p>You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.</p> <p>Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p> <p>The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.</p> <pre><code>class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -&gt; int:\n        m = len(grid)\n        n = len(grid[0])\n        land = 0\n        overlap = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    land += 1\n\n                    if i + 1 &lt; m and grid[i + 1][j] == 1:\n                        overlap += 1\n\n                    if j + 1 &lt; n and grid[i][j + 1] == 1:\n                        overlap += 1\n\n        return 4 * land - 2 * overlap\n</code></pre>"},{"location":"problems/46_permutations/","title":"46. Permutations","text":"<p>Medium</p> <p>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.</p> <pre><code>class Solution:\n    def permute(self, nums: List[int]) -&gt; List[List[int]]:\n        return self.permutations([], nums)\n\n    def permutations(self, prefix: List[int], nums: List[int]) -&gt; List[List[int]]:\n        n = len(nums)\n        if n == 0:\n            return [prefix]\n\n        res = []\n        for i in range(n):\n            res += self.permutations(prefix + [nums[i]], nums[:i] + nums[i + 1 :])\n\n        return res\n</code></pre>"},{"location":"problems/476_number_complement/","title":"476. Number Complement","text":"<p>Easy</p> <p>The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.</p> <ul> <li>For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.</li> </ul> <p>Given an integer num, return its complement.</p> <pre><code>class Solution:\n    def findComplement(self, num: int) -&gt; int:\n        mask = num\n        mask |= mask &gt;&gt; 1\n        mask |= mask &gt;&gt; 2\n        mask |= mask &gt;&gt; 4\n        mask |= mask &gt;&gt; 8\n        mask |= mask &gt;&gt; 16\n\n        return num ^ mask\n</code></pre>"},{"location":"problems/482_license_key_formatting/","title":"482. License Key Formatting","text":"<p>Easy</p> <p>You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.</p> <p>We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.</p> <p>Return the reformatted license key.</p> <pre><code>class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -&gt; str:\n        t = s.replace(\"-\", \"\").upper()[::-1]\n        return \"-\".join(t[i : i + k] for i in range(0, len(t), k))[::-1]\n</code></pre>"},{"location":"problems/485_max_consecutive_ones/","title":"485. Max Consecutive Ones","text":"<p>Easy</p> <p>Given a binary array nums, return the maximum number of consecutive 1's in the array.</p> <pre><code>class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -&gt; int:\n        res, cur = 0, 0\n\n        for num in nums:\n            if num == 1:\n                cur += 1\n            else:\n                if cur &gt; res:\n                    res = cur\n                cur = 0\n\n        if cur &gt; res:\n            res = cur\n\n        return res\n</code></pre>"},{"location":"problems/48_rotate_image/","title":"48. Rotate Image","text":"<p>Medium</p> <p>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</p> <p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>"},{"location":"problems/48_rotate_image/#example-1","title":"Example 1:","text":"<pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n</code></pre>"},{"location":"problems/48_rotate_image/#example-2","title":"Example 2:","text":"<pre><code>Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</code></pre>"},{"location":"problems/48_rotate_image/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= strs.length &lt;= 104</li> <li>0 &lt;= strs[i].length &lt;= 100</li> <li>strs[i] consists of lowercase English letters.</li> </ul>"},{"location":"problems/48_rotate_image/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def rotate(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n\n        # Flip the matrix horizontally\n        for i in range(n // 2):\n            matrix[i], matrix[n - 1 - i] = matrix[n - 1 - i], matrix[i]\n\n        # Then transpose the matrix\n        for i in range(n):\n            for j in range(i + 1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n</code></pre>"},{"location":"problems/492_construct_the_rectangle/","title":"492. Construct the Rectangle","text":"<p>Easy</p> <p>A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p> <ol> <li>The area of the rectangular web page you designed must equal to the given target area.</li> <li>The width W should not be larger than the length L, which means L &gt;= W.</li> <li>The difference between length L and width W should be as small as possible.</li> </ol> <p>Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.</p> <pre><code>import math\n\n\nclass Solution:\n    def constructRectangle(self, area: int) -&gt; List[int]:\n        for w in range(math.floor(math.sqrt(area)), 0, -1):\n            l = area // w\n            if l * w == area:\n                return [l, w]\n</code></pre>"},{"location":"problems/495_teemo_attacking/","title":"495. Teemo Attacking","text":"<p>Easy</p> <p>Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.</p> <p>You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.</p> <p>Return the total number of seconds that Ashe is poisoned.</p> <pre><code>class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -&gt; int:\n        res = duration\n        for i in range(len(timeSeries) - 1):\n            res += min(timeSeries[i + 1] - timeSeries[i], duration)\n\n        return res\n</code></pre>"},{"location":"problems/496_next_greater_element_i/","title":"496. Next Greater Element I","text":"<p>Easy</p> <p>The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.</p> <p>You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.</p> <p>For each 0 &lt;= i &lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.</p> <p>Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.</p> <pre><code>class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n        l = len(nums2)\n        d = {}\n        for i in range(l - 1):\n            for j in range(i + 1, l):\n                if nums2[j] &gt; nums2[i]:\n                    d[nums2[i]] = nums2[j]\n                    break\n\n        res = []\n        for num in nums1:\n            res.append(d.get(num, -1))\n\n        return res\n</code></pre>"},{"location":"problems/498_diagonal_traverse/","title":"498. Diagonal Traverse","text":"<p>Medium</p> <p>Given an m x n matrix mat, return an array of all the elements of the array in a zig-zag diagonal order.</p>"},{"location":"problems/498_diagonal_traverse/#example","title":"Example","text":"<pre><code>[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]  --&gt;  [1, 2, 4, 7, 5, 3, 6, 8, 9]\n</code></pre>"},{"location":"problems/498_diagonal_traverse/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -&gt; List[int]:\n        if len(mat) == 0:\n            return []\n\n        m = len(mat)\n        n = len(mat[0])\n\n        res = []\n        for s in range(m + n - 1):\n            tmp = []\n\n            if s &lt; n:\n                i, j = 0, s\n            else:\n                i, j = s - n + 1, n - 1\n\n            while i &lt; m and j &gt;= 0:\n                tmp.append(mat[i][j])\n                i += 1\n                j -= 1\n\n            if s % 2 == 0:\n                tmp.reverse()\n\n            res.extend(tmp)\n\n        return res\n</code></pre>"},{"location":"problems/49_group_anagrams/","title":"49. Group Anagrams","text":"<p>Medium</p> <p>Given an array of strings strs, group the anagrams together. You can return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>"},{"location":"problems/49_group_anagrams/#example-1","title":"Example 1:","text":"<pre><code>Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</code></pre>"},{"location":"problems/49_group_anagrams/#example-2","title":"Example 2:","text":"<pre><code>Input: strs = [\"\"]\nOutput: [[\"\"]]\n</code></pre>"},{"location":"problems/49_group_anagrams/#example-3","title":"Example 3:","text":"<pre><code>Input: strs = [\"a\"]\nOutput: [[\"a\"]]\n</code></pre>"},{"location":"problems/49_group_anagrams/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= strs.length &lt;= 104</li> <li>0 &lt;= strs[i].length &lt;= 100</li> <li>strs[i] consists of lowercase English letters.</li> </ul>"},{"location":"problems/49_group_anagrams/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        d = {}\n\n        for str in strs:\n            t = tuple(sorted(str))\n            d[t] = d.get(t, []) + [str]\n\n        return d.values()\n</code></pre>"},{"location":"problems/4_median_of_two_sorted_arrays/","title":"4. Median of Two Sorted Arrays","text":"<p>Link</p> <p>Hard</p> <p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return the median of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>"},{"location":"problems/4_median_of_two_sorted_arrays/#solution","title":"Solution","text":"<pre><code># Not a O(log (m+n)), but rather an O(m+n). The simplicity of the solution\n# versus the complexity of the recursive chopping the lists in half at each\n# step solution justifies it... I guess.\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\n        nums = self.merge(nums1, nums2, [])\n\n        n = len(nums)\n        if n % 2 == 0:\n            return (nums[n // 2 - 1] + nums[n // 2]) / 2\n        else:\n            return nums[n // 2]\n\n    def merge(self, nums1: List[int], nums2: List[int], res: List[int]) -&gt; List[int]:\n        if len(nums1) == 0 and len(nums2) == 0:\n            return res\n\n        if len(nums1) == 0:\n            return res + nums2\n\n        if len(nums2) == 0:\n            return res + nums1\n\n        if nums1[0] &lt;= nums2[0]:\n            res.append(nums1[0])\n            return self.merge(nums1[1:], nums2, res)\n        else:\n            res.append(nums2[0])\n            return self.merge(nums1, nums2[1:], res)\n</code></pre>"},{"location":"problems/500_keyboard_row/","title":"500. Keyboard Row","text":"<p>Easy</p> <p>Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.</p> <p>In the American keyboard:</p> <ul> <li>the first row consists of the characters \"qwertyuiop\",</li> <li>the second row consists of the characters \"asdfghjkl\", and</li> <li>the third row consists of the characters \"zxcvbnm\".</li> </ul>"},{"location":"problems/500_keyboard_row/#solution","title":"Solution","text":"<pre><code>import re\n\n\nclass Solution:\n    def findWords(self, words: List[str]) -&gt; List[str]:\n        r = re.compile(\"^[qwertyuiop]+$|^[asdfghjkl]+$|^[zxcvbnm]+$\")\n        return [word for word in words if r.match(word.lower())]\n</code></pre>"},{"location":"problems/501_find_mode_in_binary_search_tree/","title":"501. Find Mode in Binary Search Tree","text":"<p>Easy</p> <p>Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.</p> <p>If the tree has more than one mode, return them in any order.</p> <p>Assume a BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than or equal to   the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than or   equal to the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul>"},{"location":"problems/501_find_mode_in_binary_search_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findMode(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        d = {}\n        stack = [root]\n\n        while len(stack) &gt; 0:\n            node = stack.pop()\n            d[node.val] = d.get(node.val, 0) + 1\n\n            if node.left is not None:\n                stack.append(node.left)\n            if node.right is not None:\n                stack.append(node.right)\n\n        m = max(d.values())\n\n        return [k for k, v in d.items() if v == m]\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/504_base_7/","title":"504. Base 7","text":"<p>Easy</p> <p>Given an integer num, return a string of its base 7 representation.</p>"},{"location":"problems/504_base_7/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def convertToBase7(self, num: int) -&gt; str:\n        if num == 0:\n            return \"0\"\n\n        sign = \"-\" if num &lt; 0 else \"\"\n        num = abs(num)\n\n        res = []\n        while num != 0:\n            res.append(str(num % 7))\n            num = num // 7\n\n        return sign + \"\".join(res)[::-1]\n</code></pre>"},{"location":"problems/506_relative_ranks/","title":"506. Relative Ranks","text":"<p>Easy</p> <p>You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.</p> <p>The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:</p> <ul> <li>The 1st place athlete's rank is \"Gold Medal\".</li> <li>The 2nd place athlete's rank is \"Silver Medal\".</li> <li>The 3rd place athlete's rank is \"Bronze Medal\".</li> <li>For the 4th place to the nth place athlete, their rank is their placement   number (i.e., the xth place athlete's rank is \"x\").</li> </ul> <p>Return an array answer of size n where answer[i] is the rank of the ith athlete.</p>"},{"location":"problems/506_relative_ranks/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findRelativeRanks(self, score: List[int]) -&gt; List[str]:\n        d = {}\n        sscores = sorted(score, reverse=True)\n        for i, s in enumerate(sscores):\n            if i == 0:\n                d[s] = \"Gold Medal\"\n            elif i == 1:\n                d[s] = \"Silver Medal\"\n            elif i == 2:\n                d[s] = \"Bronze Medal\"\n            else:\n                d[s] = str(i + 1)\n\n        return [d[s] for s in score]\n</code></pre>"},{"location":"problems/507_perfect_number/","title":"507. Perfect Number","text":"<p>Easy</p> <p>A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.</p> <p>Given an integer n, return true if n is a perfect number, otherwise return false.</p>"},{"location":"problems/507_perfect_number/#solution","title":"Solution","text":"<pre><code>import math\n\n\nclass Solution:\n    def checkPerfectNumber(self, num: int) -&gt; bool:\n        if num == 1:\n            return False\n\n        divisors = set([1])\n        for m in range(2, math.ceil(math.sqrt(num))):\n            k = num // m\n            if k * m == num:\n                divisors.add(m)\n                divisors.add(k)\n\n        if sum(list(divisors)) == num:\n            return True\n\n        return False\n</code></pre>"},{"location":"problems/509_fibonacci_number/","title":"509. Fibonacci Number","text":"<p>Easy</p> <p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,</p> <ul> <li><code>F(0) = 0</code>, <code>F(1) = 1</code></li> <li><code>F(n) = F(n - 1) + F(n - 2)</code>, for <code>n &gt; 1.</code></li> </ul> <p>Given <code>n</code>, calculate <code>F(n)</code>.</p>"},{"location":"problems/509_fibonacci_number/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        a = 0\n        b = 1\n\n        if n == 0:\n            return a\n        if n == 1:\n            return b\n\n        for i in range(2, n + 1):\n            a, b = b, a + b\n\n        return b\n</code></pre>"},{"location":"problems/50_pow_x_n/","title":"50. Pow(x, n)","text":"<p>Medium</p> <p>Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).</p> <pre><code>class Solution:\n    def myPow(self, x: float, n: int) -&gt; float:\n        if n &lt; 0:\n            return 1 / self.myPow(x, -n)\n        elif n == 0:\n            return 1.0\n        elif n % 2 == 1:\n            return x * self.myPow(x, n - 1)\n        else:\n            return self.myPow(x * x, n // 2)\n</code></pre>"},{"location":"problems/520_detect_capital/","title":"520. Detect Capital","text":"<p>Easy</p> <p>We define the usage of capitals in a word to be right when one of the following cases holds:</p> <ul> <li>All letters in this word are capitals, like \"USA\".</li> <li>All letters in this word are not capitals, like \"leetcode\".</li> <li>Only the first letter in this word is capital, like \"Google\".</li> </ul> <p>Given a string word, return true if the usage of capitals in it is right.</p>"},{"location":"problems/520_detect_capital/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def detectCapitalUse(self, word: str) -&gt; bool:\n        if word == word.upper() or word == word.lower() or word == word.title():\n            return True\n\n        return False\n</code></pre>"},{"location":"problems/521_longest_uncommon_subsequence_i/","title":"521. Longest Uncommon Subsequence I","text":"<p>Easy</p> <p>Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.</p> <p>An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.</p> <p>A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.</p> <ul> <li>For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the   underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\"   include \"aebdc\", \"aeb\", and \"\" (empty string).</li> </ul>"},{"location":"problems/521_longest_uncommon_subsequence_i/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findLUSlength(self, a: str, b: str) -&gt; int:\n        if a == b:\n            return -1\n\n        return max(len(a), len(b))\n</code></pre>"},{"location":"problems/530_minimum_absolute_difference_in_bst/","title":"530. Minimum Absolute Difference in BST","text":"<p>Easy</p> <p>Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.</p>"},{"location":"problems/530_minimum_absolute_difference_in_bst/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -&gt; int:\n        o = self.reverse_inorder(root)\n        pairs = zip(o[:-1], o[1:])\n        return min([x - y for x, y in pairs])\n\n    def reverse_inorder(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            self.reverse_inorder(root.right)\n            + [root.val]\n            + self.reverse_inorder(root.left)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/53_maximum_subarray/","title":"53. Maximum Subarray","text":"<p>Medium</p> <p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p> <p>A subarray is a contiguous part of an array.</p>"},{"location":"problems/53_maximum_subarray/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n</code></pre>"},{"location":"problems/53_maximum_subarray/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n</code></pre>"},{"location":"problems/53_maximum_subarray/#example-3","title":"Example 3:","text":"<pre><code>Input: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n</code></pre>"},{"location":"problems/53_maximum_subarray/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 105</li> <li>-104 &lt;= nums[i] &lt;= 104</li> </ul> <p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>"},{"location":"problems/53_maximum_subarray/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        cur = 0\n        max = -10000\n\n        for num in nums:\n            if num &gt; cur + num:\n                cur = num\n            else:\n                cur += num\n\n            if cur &gt; max:\n                max = cur\n\n        return max\n</code></pre>"},{"location":"problems/541_reverse_string_ii/","title":"541. Reverse String II","text":"<p>Easy</p> <p>Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.</p> <p>If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.</p>"},{"location":"problems/541_reverse_string_ii/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseStr(self, s: str, k: int) -&gt; str:\n        ss = list(s)\n        l = len(ss)\n\n        for i in range(0, l, 2 * k):\n            ss[i : i + k] = reversed(ss[i : i + k])\n\n        return \"\".join(ss)\n</code></pre>"},{"location":"problems/543_diameter_of_binary_tree/","title":"543. Diameter of Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, return the length of the diameter of the tree.</p> <p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p> <p>The length of a path between two nodes is represented by the number of edges between them.</p>"},{"location":"problems/543_diameter_of_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return 0\n\n        return self.helper(root)[1]\n\n    def helper(self, root: Optional[TreeNode]) -&gt; (int, int):\n        if root is None:\n            return 0, 0\n\n        lh, ld = self.helper(root.left)\n        rh, rd = self.helper(root.right)\n\n        return 1 + max(lh, rh), max(ld, rd, lh + rh)\n</code></pre>"},{"location":"problems/54_spiral_matrix/","title":"54. Spiral Matrix","text":"<p>Medium</p> <p>Given an <code>m x n</code> matrix, return all elements of the matrix in spiral order.</p>"},{"location":"problems/54_spiral_matrix/#example-1","title":"Example 1:","text":"<pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n</code></pre>"},{"location":"problems/54_spiral_matrix/#example-2","title":"Example 2:","text":"<pre><code>Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n</code></pre>"},{"location":"problems/54_spiral_matrix/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -&gt; List[int]:\n        if matrix == []:\n            return []\n\n        # Pop the first row, then rotate the remainder and recurse\n        # https://stackoverflow.com/questions/8421337/rotating-a-two-dimensional-array-in-python\n        return list(matrix.pop(0)) + self.spiralOrder(list(zip(*matrix))[::-1])\n</code></pre>"},{"location":"problems/551_student_attendence_i/","title":"551. Student Attendance Record I","text":"<p>Easy</p> <p>You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p> <ul> <li>'A': Absent.</li> <li>'L': Late.</li> <li>'P': Present.</li> </ul> <p>The student is eligible for an attendance award if they meet both of the following criteria:</p> <ul> <li>The student was absent ('A') for strictly fewer than 2 days total.</li> <li>The student was never late ('L') for 3 or more consecutive days.</li> </ul> <p>Return true if the student is eligible for an attendance award, or false otherwise.</p>"},{"location":"problems/551_student_attendence_i/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def checkRecord(self, s: str) -&gt; bool:\n        lates = 0\n        absents = 0\n\n        for c in s:\n            if c == \"L\":\n                lates += 1\n                if lates == 3:\n                    return False\n            else:\n                if c == \"A\":\n                    absents += 1\n                    if absents == 2:\n                        return False\n                lates = 0\n\n        return True\n</code></pre>"},{"location":"problems/557_reverse_words/","title":"557. Reverse Words in a String III","text":"<p>Easy</p> <p>Given a string <code>s</code>, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>"},{"location":"problems/557_reverse_words/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseWords(self, s: str) -&gt; str:\n        res = []\n        for word in s.split(\" \"):\n            res.append(word[::-1])\n\n        return \" \".join(res)\n</code></pre>"},{"location":"problems/559_maximum_depth_of_n_ary_tree/","title":"559. Maximum Depth of N-ary Tree","text":"<p>Easy</p> <p>Given a n-ary tree, find its maximum depth.</p> <p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>"},{"location":"problems/559_maximum_depth_of_n_ary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maxDepth(self, root: \"Node\") -&gt; int:\n        if root is None:\n            return 0\n\n        return self.helper(root, 1)\n\n    def helper(self, root: \"Node\", depth: int) -&gt; int:\n        if len(root.children) == 0:\n            return depth\n\n        return max([self.helper(child, depth + 1) for child in root.children])\n\n\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n</code></pre>"},{"location":"problems/55_jump_game/","title":"55. Jump Game","text":"<p>Medium</p> <p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return true if you can reach the last index, or false otherwise.</p>"},{"location":"problems/55_jump_game/#example-1","title":"Example 1:","text":"<pre><code>Input: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</code></pre>"},{"location":"problems/55_jump_game/#example-2","title":"Example 2:","text":"<pre><code>Input: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</code></pre>"},{"location":"problems/55_jump_game/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= nums.length &lt;= 104</li> <li>0 &lt;= nums[i] &lt;= 105</li> </ul>"},{"location":"problems/55_jump_game/#solution","title":"Solution","text":"<pre><code>class Solution:\n  def canJump(self, nums: List[int]) -&gt; bool:\n    n = len(nums)\n    i = 0\n    reach = 0\n\n    while i &lt; n and i &lt;= reach:\n      reach = max(reach, i + nums[i])\n      i += 1\n\n    return i == n\n</code></pre>"},{"location":"problems/561_array_partition/","title":"561. Array Partition","text":"<p>Easy</p> <p>Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.</p>"},{"location":"problems/561_array_partition/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def arrayPairSum(self, nums: List[int]) -&gt; int:\n        return sum([x for i, x in enumerate(sorted(nums)) if i % 2 == 0])\n</code></pre>"},{"location":"problems/563_binary_tree_tilt/","title":"563. Binary Tree Tilt","text":"<p>Easy</p> <p>Given the root of a binary tree, return the sum of every tree node's tilt.</p> <p>The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.</p>"},{"location":"problems/563_binary_tree_tilt/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def __init__(self):\n        self.tilt = 0\n\n    def findTilt(self, root: Optional[TreeNode]) -&gt; int:\n        self.helper(root)\n        return self.tilt\n\n    def helper(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return 0\n\n        left = self.helper(root.left)\n        right = self.helper(root.right)\n\n        self.tilt += abs(right - left)\n\n        return root.val + left + right\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/566_reshape_the_matrix/","title":"566. Reshape the Matrix","text":"<p>Easy</p> <p>In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.</p> <p>You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.</p> <p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p> <p>If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p>"},{"location":"problems/566_reshape_the_matrix/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -&gt; List[List[int]]:\n        if len(mat) * len(mat[0]) != r * c:\n            return mat\n\n        flat = [x for row in mat for x in row]\n        res = []\n        m = 0\n\n        for i in range(r):\n            row = []\n            for j in range(c):\n                row.append(flat[m])\n                m += 1\n            res.append(row)\n\n        return res\n</code></pre>"},{"location":"problems/56_merge_intervals/","title":"56. Merge Intervals","text":"<p>Medium</p> <p>Given an array of intervals where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>"},{"location":"problems/56_merge_intervals/#example-1","title":"Example 1:","text":"<pre><code>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</code></pre>"},{"location":"problems/56_merge_intervals/#example-2","title":"Example 2:","text":"<pre><code>Input: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n</code></pre>"},{"location":"problems/56_merge_intervals/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= intervals.length &lt;= 104</li> <li>intervals[i].length == 2</li> <li>0 &lt;= starti &lt;= endi &lt;= 104</li> </ul>"},{"location":"problems/56_merge_intervals/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n        res = []\n\n        for interval in sorted(intervals):\n            if not res or res[-1][1] &lt; interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n\n        return res\n</code></pre>"},{"location":"problems/572_subtree_of_another_tree/","title":"572. Subtree of Another Tree","text":"<p>Easy</p> <p>Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.</p> <p>A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.</p>"},{"location":"problems/572_subtree_of_another_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -&gt; bool:\n        if subRoot is None:\n            return True\n\n        if root is None:\n            return False\n\n        if self.isSameTree(root, subRoot):\n            return True\n\n        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)\n\n    def isSameTree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -&gt; bool:\n        if root is None and subRoot is None:\n            return True\n\n        if root is None or subRoot is None:\n            return False\n\n        if root.val != subRoot.val:\n            return False\n\n        return self.isSameTree(root.left, subRoot.left) and self.isSameTree(\n            root.right, subRoot.right\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/575_distribute_candies/","title":"575. Distribute Candies","text":"<p>Easy</p> <p>Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.</p> <p>The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.</p> <p>Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.</p>"},{"location":"problems/575_distribute_candies/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def distributeCandies(self, candyType: List[int]) -&gt; int:\n        types = len(set(candyType))\n        return min(len(candyType) // 2, types)\n</code></pre>"},{"location":"problems/57_insert_interval/","title":"57. Insert Interval","text":"<p>Medium</p> <p>You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.</p> <p>Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).</p> <p>Return intervals after the insertion.</p>"},{"location":"problems/57_insert_interval/#example-1","title":"Example 1:","text":"<pre><code>Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n</code></pre>"},{"location":"problems/57_insert_interval/#example-2","title":"Example 2:","text":"<pre><code>Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n</code></pre>"},{"location":"problems/57_insert_interval/#constraints","title":"Constraints:","text":"<ul> <li>0 &lt;= intervals.length &lt;= 10^4</li> <li>intervals[i].length == 2</li> <li>0 &lt;= start_i &lt;= end_i &lt;= 105</li> <li>intervals is sorted by start_i in ascending order.</li> <li>newInterval.length == 2</li> <li>0 &lt;= start &lt;= end &lt;= 10^5</li> </ul>"},{"location":"problems/57_insert_interval/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:\n        i, n = 0, len(intervals)\n        res = []\n\n        while i &lt; n and intervals[i][1] &lt; newInterval[0]:\n            res.append(intervals[i])\n            i += 1\n\n        while i &lt; n and intervals[i][0] &lt;= newInterval[1]:\n            newInterval[0] = min(newInterval[0], intervals[i][0])\n            newInterval[1] = max(newInterval[1], intervals[i][1])\n            i += 1\n\n        res.append(newInterval)\n\n        while i &lt; n:\n            res.append(intervals[i])\n            i += 1\n\n        return res\n</code></pre>"},{"location":"problems/589_n-ary_tree_preorder_traversal/","title":"589. N-ary Tree Preorder Traversal","text":"<p>Easy</p> <p>Given the root of an n-ary tree, return the preorder traversal of its nodes' values.</p>"},{"location":"problems/589_n-ary_tree_preorder_traversal/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def preorder(self, root: \"Node\") -&gt; List[int]:\n        if root is None:\n            return []\n\n        res = [root.val]\n        for child in root.children:\n            res.extend(self.preorder(child))\n\n        return res\n\n\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n</code></pre>"},{"location":"problems/58_length_of_last_word/","title":"58. Length of Last Word","text":"<p>Easy</p> <p>Given a string s consisting of words and spaces, return the length of the last word in the string.</p> <p>A word is a maximal substring consisting of non-space characters only.</p> <pre><code>class Solution:\n    def lengthOfLastWord(self, s: str) -&gt; int:\n        return len(s.strip().split(\" \")[-1])\n</code></pre>"},{"location":"problems/590_n-ary_tree_postorder_traversal/","title":"590. N-ary Tree Postorder Traversal","text":"<p>Easy</p> <p>Given the root of an n-ary tree, return the postorder traversal of its nodes' values.</p>"},{"location":"problems/590_n-ary_tree_postorder_traversal/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def postorder(self, root: \"Node\") -&gt; List[int]:\n        if root is None:\n            return []\n\n        res = []\n        for child in root.children:\n            res.extend(self.postorder(child))\n\n        return res + [root.val]\n\n\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n</code></pre>"},{"location":"problems/594_longest_harmonious_subsequence/","title":"594. Longest Harmonious Subsequence","text":"<p>Easy</p> <p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.</p> <p>Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.</p> <p>A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>"},{"location":"problems/594_longest_harmonious_subsequence/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findLHS(self, nums: List[int]) -&gt; int:\n        d = {}\n        for num in nums:\n            d[num] = d.get(num, 0) + 1\n\n        res = 0\n        for num in d:\n            if num + 1 in d:\n                res = max(res, d[num] + d[num + 1])\n\n        return res\n</code></pre>"},{"location":"problems/599_minimum_index_sum_of_two_lists/","title":"599. Minimum Index Sum of Two Lists","text":"<p>Easy</p> <p>Given two arrays of strings list1 and list2, find the common strings with the least index sum.</p> <p>A common string is a string that appeared in both list1 and list2.</p> <p>A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.</p> <p>Return all the common strings with the least index sum. Return the answer in any order.</p>"},{"location":"problems/599_minimum_index_sum_of_two_lists/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findRestaurant(self, list1: List[str], list2: List[str]) -&gt; List[str]:\n        d = {}\n        for i, w in enumerate(list1):\n            d[w] = i\n\n        e = {}\n        for i, w in enumerate(list2):\n            if w in d:\n                e[w] = d[w] + i\n\n        m = min(e.values())\n\n        return [k for k, v in e.items() if v == m]\n</code></pre>"},{"location":"problems/59_spiral_matrix_ii/","title":"59. Spiral Matrix II","text":"<p>Medium</p> <p>Given a positive integer <code>n</code>, generate an <code>n x n</code> matrix filled with elements from <code>1</code> to <code>n^2</code> in spiral order.</p> <pre><code>class Solution:\n    def generateMatrix(self, n: int) -&gt; List[List[int]]:\n        matrix = [[0] * n for _ in range(n)]\n        v = 1\n        top, right, bottom, left = 0, n - 1, n - 1, 0\n\n        while v &lt;= n * n:\n            for i in range(left, right + 1):\n                matrix[top][i] = v\n                v += 1\n            top += 1\n\n            for i in range(top, bottom + 1):\n                matrix[i][right] = v\n                v += 1\n            right -= 1\n\n            for i in reversed(range(left, right + 1)):\n                matrix[bottom][i] = v\n                v += 1\n            bottom -= 1\n\n            for i in reversed(range(top, bottom + 1)):\n                matrix[i][left] = v\n                v += 1\n            left += 1\n\n        return matrix\n</code></pre>"},{"location":"problems/5_longest_palindromic_substring/","title":"5. Longest Palindromic Substring","text":"<p>Medium</p> <p>Given a string s, return the longest palindromic substring in s.</p>"},{"location":"problems/5_longest_palindromic_substring/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        res = \"\"\n\n        for i in range(len(s)):\n            temp = expand(s, i, i)\n            if len(temp) &gt; len(res):\n                res = temp\n            temp = expand(s, i, i + 1)\n            if len(temp) &gt; len(res):\n                res = temp\n\n        return res\n\n\ndef expand(s, start, end):\n    while start &gt;= 0 and end &lt; len(s) and s[start] == s[end]:\n        start -= 1\n        end += 1\n\n    return s[start + 1 : end]\n</code></pre>"},{"location":"problems/605_can_place_flowers/","title":"605. Can Place Flowers","text":"<p>Easy</p> <p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.</p> <p>Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.</p>"},{"location":"problems/605_can_place_flowers/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -&gt; bool:\n        if n == 0:\n            return True\n\n        l = len(flowerbed)\n        res = 0\n        i = 0\n\n        while i &lt; l:\n            if flowerbed[i] == 0:\n                empty_left = i == 0 or flowerbed[i - 1] == 0\n                empty_right = i + 1 == l or flowerbed[i + 1] == 0\n\n                if empty_left and empty_right:\n                    res += 1\n                    i += 1\n\n                if res &gt;= n:\n                    return True\n\n            i += 1\n\n        return False\n</code></pre>"},{"location":"problems/606_construct_string_from_binary_tree/","title":"606. Construct String from Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.</p> <p>Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.</p>"},{"location":"problems/606_construct_string_from_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def tree2str(self, root: Optional[TreeNode]) -&gt; str:\n        if root is None:\n            return \"\"\n\n        res = str(root.val)\n\n        left = \"\"\n        if root.left is not None:\n            left = \"(\" + self.tree2str(root.left) + \")\"\n        elif root.left is None and root.right is not None:\n            left = \"()\"\n\n        right = \"\"\n        if root.right is not None:\n            right = \"(\" + self.tree2str(root.right) + \")\"\n\n        return res + left + right\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/617_merge_two_binary_trees/","title":"617. Merge Two Binary Trees","text":"<p>Easy</p> <p>You are given two binary trees root1 and root2.</p> <p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p> <p>Return the merged tree.</p> <p>Note: The merging process must start from the root nodes of both trees.</p>"},{"location":"problems/617_merge_two_binary_trees/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def mergeTrees(\n        self, root1: Optional[TreeNode], root2: Optional[TreeNode]\n    ) -&gt; Optional[TreeNode]:\n        if root1 is None and root2 is None:\n            return None\n\n        val = 0\n        root1_left = None\n        root1_right = None\n        root2_left = None\n        root2_right = None\n\n        if root1 is not None:\n            val += root1.val\n            root1_left = root1.left\n            root1_right = root1.right\n\n        if root2 is not None:\n            val += root2.val\n            root2_left = root2.left\n            root2_right = root2.right\n\n        return TreeNode(\n            val,\n            self.mergeTrees(root1_left, root2_left),\n            self.mergeTrees(root1_right, root2_right),\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/61_rotate_list/","title":"61. Rotate List","text":"<p>Medium</p> <p>Given the head of a linked list, rotate the list to the right by <code>k</code> places.</p> <pre><code>class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -&gt; Optional[ListNode]:\n        if head is None or k == 0:\n            return head\n\n        curr = head\n        length = 1\n        while curr.next is not None:\n            length += 1\n            curr = curr.next\n\n        k = k % length\n        if k == length:\n            return head\n\n        curr.next = head  # wrap the list\n\n        # now cut off the end\n        target = length - k - 1\n        curr = head\n        for _ in range(target):\n            curr = curr.next\n\n        head = curr.next\n        curr.next = None\n\n        return head\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/628_maximum_product_of_three_numbers/","title":"628. Maximum Product of Three Numbers","text":"<p>Easy</p> <p>Given an integer array nums, find three numbers whose product is maximum and return the maximum product.</p>"},{"location":"problems/628_maximum_product_of_three_numbers/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def maximumProduct(self, nums: List[int]) -&gt; int:\n        # need the max of the product of the 3 largest numbers or\n        # the product of the largest and the 2 smallest numbers.\n        s = sorted(nums, reverse=True)\n        l = len(s)\n\n        return max(s[0] * s[1] * s[2], s[0] * s[l - 2] * s[l - 1])\n</code></pre>"},{"location":"problems/62_unique_paths/","title":"62. Unique Paths","text":"<p>Medium</p> <p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10^9</code>.</p>"},{"location":"problems/62_unique_paths/#example-1","title":"Example 1:","text":"<pre><code>Input: m = 3, n = 7\nOutput: 28\n</code></pre>"},{"location":"problems/62_unique_paths/#example-2","title":"Example 2:","text":"<pre><code>Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</code></pre>"},{"location":"problems/62_unique_paths/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= m, n &lt;= 100</li> </ul>"},{"location":"problems/62_unique_paths/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        matrix = [[1] * n] * m\n\n        for i in reversed(range(m - 1)):\n            for j in reversed(range(n - 1)):\n                matrix[i][j] = matrix[i + 1][j] + matrix[i][j + 1]\n\n        return matrix[0][0]\n</code></pre>"},{"location":"problems/637_average_of_levels_in_binary_tree/","title":"637. Average of Levels in Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10^(-5) of the actual answer will be accepted.</p>"},{"location":"problems/637_average_of_levels_in_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -&gt; List[float]:\n        if root is None:\n            return []\n\n        res = []\n        queue = deque([[root]])\n\n        while len(queue) &gt; 0:\n            row = queue.popleft()\n            next_row = []\n            vals = []\n\n            for node in row:\n                if node.left is not None:\n                    next_row.append(node.left)\n                if node.right is not None:\n                    next_row.append(node.right)\n                vals.append(node.val)\n\n            res.append(sum(vals) / len(vals))\n\n            if len(next_row) &gt; 0:\n                queue.append(next_row)\n\n        return res\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/63_unique_paths_ii/","title":"63. Unique Paths II","text":"<p>Medium</p> <p>You are given an <code>m x n</code> integer array grid. There is a robot initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in grid. A path that the robot takes cannot include any square that is an obstacle.</p> <p>Return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The testcases are generated so that the answer will be less than or equal to <code>2 * 10^9</code>.</p> <pre><code>class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -&gt; int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        paths = [[0] * n] * m\n\n        if obstacleGrid[m - 1][n - 1] != 0:\n            return 0\n        else:\n            paths[m - 1][n - 1] = 1\n\n        for i in reversed(range(m)):\n            for j in reversed(range(n)):\n                if i == m - 1 and j == n - 1:\n                    continue\n\n                if obstacleGrid[i][j] == 1:\n                    paths[i][j] = 0\n                else:\n                    right = 0\n                    if i + 1 &lt; m and obstacleGrid[i + 1][j] != 1:\n                        right = paths[i + 1][j]\n\n                    down = 0\n                    if j + 1 &lt; n and obstacleGrid[i][j + 1] != 1:\n                        down = paths[i][j + 1]\n\n                    paths[i][j] = right + down\n\n        return paths[0][0]\n</code></pre>"},{"location":"problems/643_maximum_average_subarray_i/","title":"643. Maximum Average Subarray I","text":"<p>Easy</p> <p>You are given an integer array nums consisting of n elements, and an integer k.</p> <p>Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.</p>"},{"location":"problems/643_maximum_average_subarray_i/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -&gt; float:\n        curr = sum(nums[:k])\n        max_curr = curr\n\n        for i in range(1, len(nums) - k + 1):\n            curr = curr + nums[i + k - 1] - nums[i - 1]\n            if curr &gt; max_curr:\n                max_curr = curr\n\n        return max_curr / k\n</code></pre>"},{"location":"problems/645_set_mismatch/","title":"645. Set Mismatch","text":"<p>Easy</p> <p>You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.</p> <p>You are given an integer array nums representing the data status of this set after the error.</p> <p>Find the number that occurs twice and the number that is missing and return them in the form of an array.</p>"},{"location":"problems/645_set_mismatch/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findErrorNums(self, nums: List[int]) -&gt; List[int]:\n        mask = [0] * len(nums)\n        repeated = 0\n\n        for num in nums:\n            if mask[num - 1] == 1:\n                repeated = num\n            mask[num - 1] = 1\n\n        return [repeated, mask.index(0) + 1]\n</code></pre>"},{"location":"problems/647_palindromic_substrings/","title":"647. Palindromic Substrings","text":"<p>Medium</p> <p>Given a string s, return the number of palindromic substrings in it.</p> <p>A string is a palindrome when it reads the same backward as forward.</p> <p>A substring is a contiguous sequence of characters within the string.</p>"},{"location":"problems/647_palindromic_substrings/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n</code></pre>"},{"location":"problems/647_palindromic_substrings/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n</code></pre>"},{"location":"problems/647_palindromic_substrings/#constraints","title":"Constraints:","text":"<pre><code>- 1 &lt;= s.length &lt;= 1000\n- s consists of lowercase English letters.\n</code></pre>"},{"location":"problems/647_palindromic_substrings/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def countSubstrings(self, s: str) -&gt; int:\n        def expand(l: int, r: int) -&gt; int:\n            count = 0\n\n            while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\n                count += 1\n                l -= 1\n                r += 1\n\n            return count\n\n        res = 0\n\n        for i in range(len(s)):\n            res += expand(i, i)\n            res += expand(i, i + 1)\n\n        return res\n</code></pre>"},{"location":"problems/64_minimum_path_sum/","title":"64. Minimum Path Sum","text":"<p>Medium</p> <p>Given a <code>m x n</code> grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p> <p>Note: You can only move either down or right at any point in time.</p> <pre><code>class Solution:\n    def minPathSum(self, grid: List[List[int]]) -&gt; int:\n        m = len(grid)\n        n = len(grid[0])\n\n        for i in reversed(range(m)):\n            for j in reversed(range(n)):\n                right = None\n                if j + 1 &lt; n:\n                    right = grid[i][j + 1]\n\n                down = None\n                if i + 1 &lt; m:\n                    down = grid[i + 1][j]\n\n                grid[i][j] += self.min_with_none(right, down)\n\n        return grid[0][0]\n\n    def min_with_none(self, x, y):\n        if x is None and y is None:\n            return 0\n        elif x is None:\n            return y\n        elif y is None:\n            return x\n        else:\n            return min(x, y)\n</code></pre>"},{"location":"problems/653_two_sum_iv_input_is_a_bst/","title":"653. Two Sum IV - Input is a BST","text":"<p>Easy</p> <p>Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>"},{"location":"problems/653_two_sum_iv_input_is_a_bst/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findTarget(self, root: Optional[TreeNode], k: int) -&gt; bool:\n        if root is None:\n            return False\n\n        s = self.helper(root, set())\n\n        for v in s:\n            target = k - v\n            if target == v:\n                continue\n            if target in s:\n                return True\n\n        return False\n\n    # all values in the tree are unique so don't need a frequency\n    def helper(self, root: Optional[TreeNode], s: set[int]) -&gt; set[int]:\n        if root is None:\n            return s\n\n        s.add(root.val)\n\n        if root.left is not None:\n            s = self.helper(root.left, s)\n\n        if root.right is not None:\n            s = self.helper(root.right, s)\n\n        return s\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/66_plus_one/","title":"66. Plus One","text":"<p>Easy</p> <p>Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.</p> <p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p> <p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p> <pre><code>class Solution:\n    def plusOne(self, digits: List[int]) -&gt; List[int]:\n        return [int(s) for s in str(int(\"\".join([str(digit) for digit in digits])) + 1)]\n</code></pre>"},{"location":"problems/671_second_minimum_node_in_a_binary_tree/","title":"671. Second Minimum Node In a Binary Tree","text":"<p>Easy</p> <p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.</p> <p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.</p> <p>If no such second minimum value exists, output -1 instead.</p>"},{"location":"problems/671_second_minimum_node_in_a_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -&gt; int:\n        if root is None:\n            return -1\n\n        if root.left is None:  # then root.right is None\n            return -1\n\n        return self.helper(root)\n\n    def helper(self, root: TreeNode) -&gt; int:\n        if root.left is None:\n            return -1\n\n        if root.left.val != root.val:\n            left = root.left.val\n        else:\n            left = self.helper(root.left)\n\n        if root.right.val != root.val:\n            right = root.right.val\n        else:\n            right = self.helper(root.right)\n\n        if left == -1:\n            return right\n        elif right == -1:\n            return left\n        else:\n            return min(left, right)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/674_longest_continuous_increasing_subsequence/","title":"674. Longest Continuous Increasing Subsequence","text":"<p>Easy</p> <p>Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.</p> <p>A continuous increasing subsequence is defined by two indices l and r (l &lt; r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l &lt;= i &lt; r, nums[i] &lt; nums[i + 1].</p>"},{"location":"problems/674_longest_continuous_increasing_subsequence/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -&gt; int:\n        res = 1\n        cur = 1\n\n        for i in range(1, len(nums)):\n            if nums[i - 1] &lt; nums[i]:\n                cur += 1\n                res = max(res, cur)\n            else:\n                cur = 1\n\n        return res\n</code></pre>"},{"location":"problems/67_add_binary/","title":"67. Add Binary","text":"<p>Easy</p> <p>Given two binary strings a and b, return their sum as a binary string.</p> <pre><code>class Solution:\n    def addBinary(self, a: str, b: str) -&gt; str:\n        return format(int(a, 2) + int(b, 2), \"b\")\n</code></pre>"},{"location":"problems/680_valid_palindrome_ii/","title":"680. Valid Palindrome II","text":"<p>Easy</p> <p>Given a string <code>s</code>, return true if the <code>s</code> can be palindrome after deleting at most one character from it.</p>"},{"location":"problems/680_valid_palindrome_ii/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def validPalindrome(self, s: str) -&gt; bool:\n        return self.helper(s, 1)\n\n    def helper(self, s: str, remaining: int) -&gt; bool:\n        l = len(s)\n        if l == 0 or l == 1:\n            return True\n\n        if s[0] == s[l - 1]:\n            return self.helper(s[1:-1], remaining)\n\n        if remaining &gt; 0:\n            return self.helper(s[0:-1], 0) or self.helper(s[1:], 0)\n\n        return False\n</code></pre>"},{"location":"problems/682_baseball_game/","title":"682. Baseball Game","text":"<p>Easy</p> <p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p> <p>You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:</p> <ul> <li>An integer x.</li> <li>Record a new score of x.</li> <li>'+'.</li> <li>Record a new score that is the sum of the previous two scores.</li> <li>'D'.</li> <li>Record a new score that is the double of the previous score.</li> <li>'C'.</li> <li>Invalidate the previous score, removing it from the record.</li> </ul> <p>Return the sum of all the scores on the record after applying all the operations.</p> <p>The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.</p>"},{"location":"problems/682_baseball_game/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def calPoints(self, operations: List[str]) -&gt; int:\n        scores = []\n\n        for operation in operations:\n            match operation:\n                case \"+\":\n                    scores.append(scores[-1] + scores[-2])\n                case \"D\":\n                    scores.append(2 * scores[-1])\n                case \"C\":\n                    scores.pop()\n                case _:\n                    scores.append(int(operation))\n\n        return sum(scores)\n</code></pre>"},{"location":"problems/692_top_k_frequent_words/","title":"692. Top K Frequent Words","text":"<p>Medium</p> <p>Given an array of strings words and an integer k, return the k most frequent strings.</p> <p>Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.</p>"},{"location":"problems/692_top_k_frequent_words/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def topKFrequent(self, words: List[str], k: int) -&gt; List[str]:\n        def cmp(pair1, pair2):\n            w1, n1 = pair1\n            w2, n2 = pair2\n\n            if n1 &lt; n2:\n                return -1\n            elif n1 &gt; n2:\n                return 1\n            else:\n                if w1 &lt; w2:\n                    return 1\n                elif w1 &gt; w2:\n                    return -1\n                else:\n                    return 0\n\n        d = {}\n        for word in words:\n            d[word] = d.get(word, 0) + 1\n\n        return [x for x, _ in sorted(d.items(), key=cmp_to_key(cmp), reverse=True)[:k]]\n</code></pre>"},{"location":"problems/693_binary_number_with_alternating_bits/","title":"693. Binary Number with Alternating Bits","text":"<p>Easy</p> <p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>"},{"location":"problems/693_binary_number_with_alternating_bits/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def hasAlternatingBits(self, n: int) -&gt; bool:\n        bits = format(n, \"b\")\n\n        for i in range(1, len(bits)):\n            if bits[i - 1] == bits[i]:\n                return False\n\n        return True\n</code></pre>"},{"location":"problems/697_degree_of_an_array/","title":"697. Degree of an Array","text":"<p>Easy</p> <p>Given a non-empty array of non-negative integers <code>nums</code>, the degree of this array is defined as the maximum frequency of any one of its elements.</p> <p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>"},{"location":"problems/697_degree_of_an_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findShortestSubArray(self, nums: List[int]) -&gt; int:\n        left_idx, freq = {}, {}\n        max_freq, l = 0, len(nums)\n\n        for i, num in enumerate(nums):\n            if num not in left_idx:\n                left_idx[num] = i\n            freq[num] = freq.get(num, 0) + 1\n\n            if freq[num] &gt; max_freq:\n                max_freq = freq[num]\n                l = i - left_idx[num] + 1\n            elif freq[num] == max_freq:\n                if l &gt; i - left_idx[num] + 1:\n                    l = i - left_idx[num] + 1\n\n        return l\n</code></pre>"},{"location":"problems/69_sqrt_x/","title":"69. Sqrt(x)","text":"<p>Easy</p> <p>Given a non-negative integer <code>x</code>, compute and return the square root of <code>x</code>.</p> <p>Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.</p> <p>Note: You are not allowed to use any built-in exponent function or operator, such as <code>pow(x, 0.5)</code> or <code>x ** 0.5</code>.</p> <pre><code># See https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_Newton's_method\nclass Solution:\n    def mySqrt(self, x: int) -&gt; int:\n\n        x0 = x &gt;&gt; 1\n        if x0 == 0:\n            return x\n\n        x1 = (x0 + x // x0) &gt;&gt; 1\n\n        while x1 &lt; x0:\n            x0 = x1\n            x1 = (x0 + x // x0) &gt;&gt; 1\n\n        return x0\n</code></pre>"},{"location":"problems/6_zigzag_conversion/","title":"6. ZigZag Conversion","text":"<p>Medium</p> <p>The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this:</p> <pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre> <p>And then read line by line: \"PAHNAPLSIIGYIR\"</p>"},{"location":"problems/6_zigzag_conversion/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def convert(self, s: str, numRows: int) -&gt; str:\n        if numRows == 1:\n            return s\n\n        rows = [\"\"] * numRows\n        down = False  # will change on the first iteration\n        i = 0\n\n        for c in s:\n            if i == numRows - 1 or i == 0:\n                down = not down\n\n            rows[i] += c\n\n            if down:\n                i += 1\n            else:\n                i -= 1\n\n        return \"\".join(rows)\n</code></pre>"},{"location":"problems/700_search_in_a_binary_search_tree/","title":"700. Search in a Binary Search Tree","text":"<p>Easy</p> <p>You are given the root of a binary search tree (BST) and an integer val.</p> <p>Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.</p>"},{"location":"problems/700_search_in_a_binary_search_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def searchBST(self, root: Optional[TreeNode], val: int) -&gt; Optional[TreeNode]:\n        if root is None:\n            return None\n\n        if val == root.val:\n            return root\n        elif val &lt; root.val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/703_kth_largest_element_in_a_stream/","title":"703. Kth Largest Element in a Stream","text":"<p>Easy</p> <p>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p> <p>Implement <code>KthLargest</code> class:</p> <ul> <li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer k and   the stream of integers nums.</li> <li><code>int add(int val)</code> Appends the integer val to the stream and returns the   element representing the kth largest element in the stream.</li> </ul>"},{"location":"problems/703_kth_largest_element_in_a_stream/#solution","title":"Solution","text":"<pre><code>from sortedcontainers import SortedList\n\n\nclass KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.nums = SortedList(nums)\n\n    def add(self, val: int) -&gt; int:\n        self.nums.add(val)\n        return self.nums[len(self.nums) - self.k]\n</code></pre>"},{"location":"problems/704_binary_search/","title":"704. Binary Search","text":"<p>Easy</p> <p>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</p> <p>You must write an algorithm with O(log n) runtime complexity.</p>"},{"location":"problems/704_binary_search/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; int:\n        i = 0\n        j = len(nums)\n\n        while i &lt; j:\n            m = i + (j - i) // 2\n            if target == nums[m]:\n                return m\n            elif target &lt; nums[m]:\n                j = m\n            else:\n                i = m + 1\n\n        return -1\n</code></pre>"},{"location":"problems/705_design_hashset/","title":"705. Design HashSet","text":"<p>Easy</p> <p>Design a HashSet without using any built-in hash table libraries.</p> <p>Implement <code>MyHashSet</code> class:</p> <ul> <li><code>void add(key)</code> Inserts the value key into the HashSet.</li> <li><code>bool contains(key)</code> Returns whether the value key exists in the HashSet or   not.</li> <li><code>void remove(key)</code> Removes the value key in the HashSet. If key does not exist   in the HashSet, do nothing.</li> </ul>"},{"location":"problems/705_design_hashset/#solution","title":"Solution","text":"<pre><code>class MyHashSet:\n    def __init__(self):\n        self.m = 100\n        self.base = [[] for _ in range(self.m)]\n        self.hash = lambda x: x % self.m\n\n    def add(self, key: int) -&gt; None:\n        hashed = self.hash(key)\n        if key not in self.base[hashed]:\n            self.base[hashed].append(key)\n\n    def remove(self, key: int) -&gt; None:\n        hashed = self.hash(key)\n        if key in self.base[hashed]:\n            self.base[hashed].remove(key)\n\n    def contains(self, key: int) -&gt; bool:\n        hashed = self.hash(key)\n        if key in self.base[hashed]:\n            return True\n        return False\n</code></pre>"},{"location":"problems/706_design_hashmap/","title":"706. Design HashMap","text":"<p>Easy</p> <p>Design a HashMap without using any built-in hash table libraries.</p> <p>Implement the <code>MyHashMap</code> class:</p> <ul> <li><code>MyHashMap()</code> initializes the object with an empty map.</li> <li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap.   If the <code>key</code> already exists in the map, update the corresponding value.</li> <li><code>int get(int key)</code> returns the value to which the specified <code>key</code> is mapped,   or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li> <li><code>void remove(key)</code> removes the <code>key</code> and its corresponding value if the map   contains the mapping for the <code>key</code>.</li> </ul>"},{"location":"problems/706_design_hashmap/#solution","title":"Solution","text":"<pre><code>class MyHashMap:\n    def __init__(self):\n        self.arr = [-1] * (10**6 + 1)\n\n    def put(self, key: int, value: int) -&gt; None:\n        self.arr[key] = value\n\n    def get(self, key: int) -&gt; int:\n        if self.arr[key] != -1:\n            return self.arr[key]\n        return -1\n\n    def remove(self, key: int) -&gt; None:\n        self.arr[key] = -1\n</code></pre>"},{"location":"problems/709_to_lower_case/","title":"709. To Lower Case","text":"<p>Easy</p> <p>Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.</p>"},{"location":"problems/709_to_lower_case/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def toLowerCase(self, s: str) -&gt; str:\n        return s.lower()\n</code></pre>"},{"location":"problems/70_climbing_stairs/","title":"70. Climbing Stairs","text":"<p>Easy</p> <p>You are climbing a staircase. It takes n steps to reach the top.</p> <p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>"},{"location":"problems/70_climbing_stairs/#example-1","title":"Example 1:","text":"<pre><code>Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</code></pre>"},{"location":"problems/70_climbing_stairs/#example-2","title":"Example 2:","text":"<pre><code>Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</code></pre>"},{"location":"problems/70_climbing_stairs/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= n &lt;= 45</li> </ul>"},{"location":"problems/70_climbing_stairs/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def climbStairs(self, n: int) -&gt; int:\n        d = [1, 2] + [0] * (n - 2)\n\n        for i in range(2, n):\n            d[i] = d[i - 1] + d[i - 2]\n\n        return d[n - 1]\n</code></pre>"},{"location":"problems/717_1-bit_and_2-bit_characters/","title":"717. 1-bit and 2-bit Characters","text":"<p>Easy</p> <p>We have two special characters:</p> <ul> <li>The first character can be represented by one bit 0.</li> <li>The second character can be represented by two bits (10 or 11).</li> </ul> <p>Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.</p>"},{"location":"problems/717_1-bit_and_2-bit_characters/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isOneBitCharacter(self, bits: List[int]) -&gt; bool:\n        l = len(bits)\n        if l == 0:\n            return False\n\n        if len(bits) == 1:\n            return True\n\n        if bits[0] == 1:\n            return self.isOneBitCharacter(bits[2:])\n\n        return self.isOneBitCharacter(bits[1:])\n</code></pre>"},{"location":"problems/724_find_pivot_index/","title":"724. Find Pivot Index","text":"<p>Easy</p> <p>Given an array of integers nums, calculate the pivot index of this array.</p> <p>The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.</p> <p>If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.</p> <p>Return the leftmost pivot index. If no such index exists, return -1.</p>"},{"location":"problems/724_find_pivot_index/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def pivotIndex(self, nums: List[int]) -&gt; int:\n        if len(nums) == 1:\n            return 0\n\n        left = 0\n        right = sum(nums)\n\n        for i in range(len(nums)):\n            left += nums[i - 1] if i &gt; 0 else 0\n            right -= nums[i]\n            if left == right:\n                return i\n\n        return -1\n</code></pre>"},{"location":"problems/728_self_dividing_numbers/","title":"728. Self Dividing Numbers","text":"<p>Easy</p> <p>A self-dividing number is a number that is divisible by every digit it contains.</p> <ul> <li>For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0,   and 128 % 8 == 0.</li> </ul> <p>A self-dividing number is not allowed to contain the digit zero.</p> <p>Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].</p>"},{"location":"problems/728_self_dividing_numbers/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def selfDividingNumbers(self, left: int, right: int) -&gt; List[int]:\n        res = []\n        for i in range(left, right + 1):\n            if self.self_divides(i):\n                res.append(i)\n\n        return res\n\n    def self_divides(self, n: int) -&gt; bool:\n        for i in str(n):\n            if i == \"0\" or n % int(i) != 0:\n                return False\n        return True\n</code></pre>"},{"location":"problems/733_flood_fill/","title":"733. Flood Fill","text":"<p>Easy</p> <p>An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.</p> <p>You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].</p> <p>To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.</p> <p>Return the modified image after performing the flood fill.</p>"},{"location":"problems/733_flood_fill/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def floodFill(\n        self, image: List[List[int]], sr: int, sc: int, color: int\n    ) -&gt; List[List[int]]:\n        if image[sr][sc] == color:\n            return image\n\n        self.m = len(image)\n        self.n = len(image[0])\n        self.image = image\n        self.originalColor = image[sr][sc]\n\n        self.helper(sr, sc, color)\n\n        return self.image\n\n    def helper(self, sr: int, sc: int, color: int):\n        if sr &lt; 0 or sr &gt;= self.m or sc &lt; 0 or sc &gt;= self.n:\n            return\n\n        if self.image[sr][sc] == self.originalColor:\n            self.image[sr][sc] = color\n\n            self.helper(sr - 1, sc, color)\n            self.helper(sr + 1, sc, color)\n            self.helper(sr, sc - 1, color)\n            self.helper(sr, sc + 1, color)\n</code></pre>"},{"location":"problems/735_asteroid_collision/","title":"735. Asteroid Collision","text":"<p>Medium</p> <p>We are given an array asteroids of integers representing asteroids in a row.</p> <p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p> <p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>"},{"location":"problems/735_asteroid_collision/#example-1","title":"Example 1:","text":"<pre><code>Input: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</code></pre>"},{"location":"problems/735_asteroid_collision/#example-2","title":"Example 2:","text":"<pre><code>Input: asteroids = [8,-8]\nOutput: []\nExplanation: The 8 and -8 collide exploding each other.\n</code></pre>"},{"location":"problems/735_asteroid_collision/#example-3","title":"Example 3:","text":"<pre><code>Input: asteroids = [10,2,-5]\nOutput: [10]\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</code></pre>"},{"location":"problems/735_asteroid_collision/#constraints","title":"Constraints:","text":"<ul> <li>2 &lt;= asteroids.length &lt;= 104</li> <li>-1000 &lt;= asteroids[i] &lt;= 1000</li> <li>asteroids[i] != 0</li> </ul>"},{"location":"problems/735_asteroid_collision/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -&gt; List[int]:\n        s = []\n\n        for a in asteroids:\n            if a &gt; 0:\n                s.append(a)\n            else:\n                while s and s[-1] &gt; 0 and s[-1] &lt; -a:\n                    s.pop()\n\n                if not s or s[-1] &lt; 0:\n                    s.append(a)\n                elif s[-1] == -a:\n                    s.pop()\n\n        return s\n</code></pre>"},{"location":"problems/73_set_matrix_zeros/","title":"73. Set Matrix Zeroes","text":"<p>Medium</p> <p>Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.</p> <p>You must do it in place.</p>"},{"location":"problems/73_set_matrix_zeros/#example-1","title":"Example 1:","text":"<pre><code>Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n</code></pre>"},{"location":"problems/73_set_matrix_zeros/#example-2","title":"Example 2:","text":"<pre><code>Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</code></pre>"},{"location":"problems/73_set_matrix_zeros/#constraints","title":"Constraints:","text":"<ul> <li>m == matrix.length</li> <li>n == matrix[0].length</li> <li>1 &lt;= m, n &lt;= 200</li> <li>-231 &lt;= matrix[i][j] &lt;= 231 - 1</li> </ul>"},{"location":"problems/73_set_matrix_zeros/#follow-up","title":"Follow up:","text":"<ul> <li>A straightforward solution using O(mn) space is probably a bad idea.</li> <li>A simple improvement uses O(m + n) space, but still not the best solution.</li> <li>Could you devise a constant space solution?</li> </ul>"},{"location":"problems/73_set_matrix_zeros/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n\n        zeros = self.find_zeros(matrix)\n        rows = set([r for r, c in zeros])\n        cols = set([c for r, c in zeros])\n\n        m = len(matrix)\n        n = len(matrix[0])\n\n        for r in rows:\n            for i in range(n):\n                matrix[r][i] = 0\n\n        for c in cols:\n            for i in range(m):\n                matrix[i][c] = 0\n\n    def find_zeros(self, matrix):\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    res.append((i, j))\n\n        return res\n</code></pre>"},{"location":"problems/744_find_smallest_letter_greater_than_target/","title":"744. Find Smallest Letter Greater Than Target","text":"<p>Easy</p> <p>Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.</p> <p>Note that the letters wrap around.</p> <p>For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.</p>"},{"location":"problems/744_find_smallest_letter_greater_than_target/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -&gt; str:\n        for letter in letters:\n            if target &lt; letter:\n                return letter\n\n        # We've wrapped around\n        return letters[0]\n</code></pre>"},{"location":"problems/746_min_cost_climbing_stairs/","title":"746. Min Cost Climbing Stairs","text":"<p>Easy</p> <p>You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index 0, or the step with index 1.</p> <p>Return the minimum cost to reach the top of the floor.</p>"},{"location":"problems/746_min_cost_climbing_stairs/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -&gt; int:\n        n = len(cost)\n        costs = [0] * n\n        costs[0] = cost[0]\n        costs[1] = cost[1]\n\n        for i in range(2, n):\n            costs[i] = cost[i] + min(costs[i - 1], costs[i - 2])\n\n        return min(costs[-1], costs[-2])\n</code></pre>"},{"location":"problems/747_largest_number_at_least_twice_of_others/","title":"747. Largest Number At Least Twice of Others","text":"<p>Easy</p> <p>You are given an integer array nums where the largest integer is unique.</p> <p>Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.</p>"},{"location":"problems/747_largest_number_at_least_twice_of_others/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def dominantIndex(self, nums: List[int]) -&gt; int:\n        m1 = max(nums)\n        idx = nums.index(m1)\n\n        nums.remove(m1)\n        m2 = max(nums)\n        if m1 &gt;= 2 * m2:\n            return idx\n\n        return -1\n</code></pre>"},{"location":"problems/748_shortest_completed_word/","title":"748. Shortest Completing Word","text":"<p>Easy</p> <p>Given a string licensePlate and an array of strings words, find the shortest completing word in words.</p> <p>A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.</p> <p>For example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".</p> <p>Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.</p>"},{"location":"problems/748_shortest_completed_word/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -&gt; str:\n        letters = []\n        for c in licensePlate.lower():\n            if c.isalpha():\n                letters.append(c)\n\n        words.sort(key=lambda x: len(x))\n\n        for word in words:\n            l = letters.copy()\n            for c in word:\n                if c in l:\n                    l.remove(c)\n            if l == []:\n                return word\n</code></pre>"},{"location":"problems/74_search_a_2d_matrix/","title":"74. Search a 2D Matrix","text":"<p>Medium</p> <p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p> <ul> <li>Integers in each row are sorted from left to right.</li> <li>The first integer of each row is greater than the last integer of the previous   row.</li> </ul> <pre><code>class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        return target in [e for row in matrix for e in row]\n</code></pre>"},{"location":"problems/75_sort_colors/","title":"75. Sort Colors","text":"<p>Medium</p> <p>Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p> <p>We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.</p> <p>You must solve this problem without using the library's sort function.</p> <pre><code>class Solution:\n    def sortColors(self, nums: List[int]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero = 0\n        one = 0\n        two = len(nums) - 1\n\n        while one &lt;= two:\n            if nums[one] == 0:\n                nums[zero], nums[one] = nums[one], nums[zero]\n                zero += 1\n                one += 1\n            elif nums[one] == 1:\n                one += 1\n            elif nums[one] == 2:\n                nums[two], nums[one] = nums[one], nums[two]\n                two -= 1\n</code></pre>"},{"location":"problems/762_prime_number_of_set_bits_in_binary_representation/","title":"762. Prime Number of Set Bits in Binary Representation","text":"<p>Easy</p> <p>Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.</p> <p>Recall that the number of set bits an integer has is the number of 1's present when written in binary.</p> <p>For example, 21 written in binary is 10101, which has 3 set bits.</p>"},{"location":"problems/762_prime_number_of_set_bits_in_binary_representation/#example-1","title":"Example 1:","text":"<pre><code>Input: left = 6, right = 10\nOutput: 4\nExplanation:\n6  -&gt; 110 (2 set bits, 2 is prime)\n7  -&gt; 111 (3 set bits, 3 is prime)\n8  -&gt; 1000 (1 set bit, 1 is not prime)\n9  -&gt; 1001 (2 set bits, 2 is prime)\n10 -&gt; 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n</code></pre>"},{"location":"problems/762_prime_number_of_set_bits_in_binary_representation/#example-2","title":"Example 2:","text":"<pre><code>Input: left = 10, right = 15\nOutput: 5\nExplanation:\n10 -&gt; 1010 (2 set bits, 2 is prime)\n11 -&gt; 1011 (3 set bits, 3 is prime)\n12 -&gt; 1100 (2 set bits, 2 is prime)\n13 -&gt; 1101 (3 set bits, 3 is prime)\n14 -&gt; 1110 (3 set bits, 3 is prime)\n15 -&gt; 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n</code></pre>"},{"location":"problems/762_prime_number_of_set_bits_in_binary_representation/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= left &lt;= right &lt;= 106</li> <li>0 &lt;= right - left &lt;= 104</li> </ul>"},{"location":"problems/762_prime_number_of_set_bits_in_binary_representation/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def __init__(self):\n        self.primes = set([2, 3, 5, 7, 11, 13, 17, 19])\n\n    def countPrimeSetBits(self, left: int, right: int) -&gt; int:\n        res = 0\n        for i in range(left, right + 1):\n            if format(i, \"b\").count(\"1\") in self.primes:\n                res += 1\n\n        return res\n</code></pre>"},{"location":"problems/766_toeplitz_matrix/","title":"766. Toeplitz Matrix","text":"<p>Easy</p> <p>Given an <code>m x n</code> matrix, return true if the matrix is Toeplitz. Otherwise, return false.</p> <p>A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.</p>"},{"location":"problems/766_toeplitz_matrix/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -&gt; bool:\n        m, n = len(matrix), len(matrix[0])\n\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] != matrix[i - 1][j - 1]:\n                    return False\n\n        return True\n</code></pre>"},{"location":"problems/771_jewels_and_stones/","title":"771. Jewels and Stones","text":"<p>Easy</p> <p>You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.</p> <p>Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".</p>"},{"location":"problems/771_jewels_and_stones/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -&gt; int:\n        sjewels = set(jewels)\n        res = 0\n\n        for stone in stones:\n            if stone in sjewels:\n                res += 1\n\n        return res\n</code></pre>"},{"location":"problems/783_minimum_distance_between_bst_nodes/","title":"783. Minimum Distance Between BST Nodes","text":"<p>Easy</p> <p>Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.</p>"},{"location":"problems/783_minimum_distance_between_bst_nodes/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minDiffInBST(self, root: Optional[TreeNode]) -&gt; int:\n        f = self.flatten(root)\n        diffs = []\n        for i in range(1, len(f)):\n            diffs.append(f[i] - f[i - 1])\n\n        return min(diffs)\n\n    def flatten(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return self.flatten(root.left) + [root.val] + self.flatten(root.right)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/78_subsets/","title":"78. Subsets","text":"<p>Medium</p> <p>Given an integer array nums of unique elements, return all possible subsets (the power set).</p> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <pre><code>class Solution:\n    def subsets(self, nums: List[int]) -&gt; List[List[int]]:\n        return self.helper([], nums)\n\n    def helper(self, bag: List[int], rest: List[int]) -&gt; List[List[int]]:\n        if len(rest) == 0:\n            return [bag]\n\n        res = [bag]\n        for i in range(len(rest)):\n            res.extend(self.helper(bag + [rest[i]], rest[i + 1 :]))\n\n        return res\n</code></pre>"},{"location":"problems/796_rotate_string/","title":"796. Rotate String","text":"<p>Easy</p> <p>Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.</p> <p>A shift on s consists of moving the leftmost character of s to the rightmost position.</p> <ul> <li>For example, if s = \"abcde\", then it will be \"bcdea\" after one shift.</li> </ul>"},{"location":"problems/796_rotate_string/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def rotateString(self, s: str, goal: str) -&gt; bool:\n        for i in range(len(s)):\n            if s[i:] + s[:i] == goal:\n                return True\n\n        return False\n</code></pre>"},{"location":"problems/79_word_search/","title":"79. Word Search","text":"<p>Medium</p> <p>Given an m x n grid of characters board and a string word, return true if word exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>"},{"location":"problems/79_word_search/#example-1","title":"Example 1:","text":"<pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n</code></pre>"},{"location":"problems/79_word_search/#example-2","title":"Example 2:","text":"<pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</code></pre>"},{"location":"problems/79_word_search/#example-3","title":"Example 3:","text":"<pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false\n</code></pre>"},{"location":"problems/79_word_search/#constraints","title":"Constraints:","text":"<ul> <li>m == board.length</li> <li>n = board[i].length</li> <li>1 &lt;= m, n &lt;= 6</li> <li>1 &lt;= word.length &lt;= 15</li> <li>board and word consists of only lowercase and uppercase English letters.</li> </ul> <p>Follow up: Could you use search pruning to make your solution faster with a larger board?</p>"},{"location":"problems/79_word_search/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def exist(self, board: List[List[str]], word: str) -&gt; bool:\n        m = len(board)\n        n = len(board[0])\n\n        def search(i: int, j: int, s: int) -&gt; bool:\n            if i &lt; 0 or i == m or j &lt; 0 or j == n:\n                return False\n            if board[i][j] != word[s] or board[i][j] == \"*\":\n                return False\n            if s == len(word) - 1:\n                return True\n\n            bij = board[i][j]\n            board[i][j] = \"*\"\n\n            exists = (\n                search(i + 1, j, s + 1)\n                or search(i - 1, j, s + 1)\n                or search(i, j + 1, s + 1)\n                or search(i, j - 1, s + 1)\n            )\n\n            board[i][j] = bij\n\n            return exists\n\n        for i in range(m):\n            for j in range(n):\n                if search(i, j, 0):\n                    return True\n\n        return False\n</code></pre>"},{"location":"problems/7_reverse_integer/","title":"7. Reverse Integer","text":"<p>Medium</p> <p>Given a signed 32-bit integer <code>x</code>, return x with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2**31, 2**31 - 1]</code>, then return <code>0</code>.</p>"},{"location":"problems/7_reverse_integer/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverse(self, x: int) -&gt; int:\n        res = 0\n        neg = False\n\n        if x &lt; 0:\n            neg = True\n            x = -x\n\n        while x &gt; 0:\n            res = (res * 10) + (x % 10)\n            x //= 10\n\n        if neg:\n            res = -res\n\n        if res &lt; -(2**31 - 1) or res &gt; 2**31:\n            return 0\n\n        return res\n</code></pre>"},{"location":"problems/804_unique_morse_code_words/","title":"804. Unique Morse Code Words","text":"<p>Easy</p> <p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:</p> <ul> <li>'a' maps to \".-\",</li> <li>'b' maps to \"-...\",</li> <li>'c' maps to \"-.-.\", and so on.</li> </ul> <p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p> <pre><code>[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n</code></pre> <p>Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.</p> <ul> <li>For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation   of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the   transformation of a word.</li> </ul> <p>Return the number of different transformations among all words we have.</p>"},{"location":"problems/804_unique_morse_code_words/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def __init__(self):\n        self.morse = [\n            \".-\",\n            \"-...\",\n            \"-.-.\",\n            \"-..\",\n            \".\",\n            \"..-.\",\n            \"--.\",\n            \"....\",\n            \"..\",\n            \".---\",\n            \"-.-\",\n            \".-..\",\n            \"--\",\n            \"-.\",\n            \"---\",\n            \".--.\",\n            \"--.-\",\n            \".-.\",\n            \"...\",\n            \"-\",\n            \"..-\",\n            \"...-\",\n            \".--\",\n            \"-..-\",\n            \"-.--\",\n            \"--..\",\n        ]\n\n    def uniqueMorseRepresentations(self, words: List[str]) -&gt; int:\n        translations = set()\n\n        for word in words:\n            translation = []\n            for c in word:\n                translation.append(self.morse[ord(c) - ord(\"a\")])\n\n            translations.add(\"\".join(translation))\n\n        return len(translations)\n</code></pre>"},{"location":"problems/806_number_of_lines_to_write_string/","title":"806. Number of Lines To Write String","text":"<p>Easy</p> <p>You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.</p> <p>You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.</p> <p>Return an array result of length 2 where:</p> <ul> <li>result[0] is the total number of lines.</li> <li>result[1] is the width of the last line in pixels.</li> </ul>"},{"location":"problems/806_number_of_lines_to_write_string/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def numberOfLines(self, widths: List[int], s: str) -&gt; List[int]:\n        lines = 1\n        lastLine = 0\n\n        for c in s:\n            width = widths[ord(c) - ord(\"a\")]\n            if lastLine + width &lt;= 100:\n                lastLine += width\n            else:\n                lines += 1\n                lastLine = width\n\n        return [lines, lastLine]\n</code></pre>"},{"location":"problems/812_largest_triangle_area/","title":"812. Largest Triangle Area","text":"<p>Easy</p> <p>Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.</p>"},{"location":"problems/812_largest_triangle_area/#example-1","title":"Example 1:","text":"<pre><code>Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\n</code></pre>"},{"location":"problems/812_largest_triangle_area/#example-2","title":"Example 2:","text":"<pre><code>Input: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000\n</code></pre>"},{"location":"problems/812_largest_triangle_area/#constraints","title":"Constraints:","text":"<ul> <li>3 &lt;= points.length &lt;= 50</li> <li>-50 &lt;= xi, yi &lt;= 50</li> <li>All the given points are unique.</li> </ul>"},{"location":"problems/812_largest_triangle_area/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -&gt; float:\n        res = 0\n        n = len(points)\n\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    ax,ay = points[i]\n                    bx,by = points[j]\n                    cx,cy = points[k]\n                    res = max(res, 0.5 * abs(ax*(by - cy) + bx*(cy-ay) + cx*(ay-by)))\n\n        return res\n</code></pre>"},{"location":"problems/819_most_common_word/","title":"819. Most Common Word","text":"<p>Easy</p> <p>Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.</p> <p>The words in paragraph are case-insensitive and the answer should be returned in lowercase.</p>"},{"location":"problems/819_most_common_word/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def mostCommonWord(self, paragraph: str, banned: List[str]) -&gt; str:\n        banned = set(banned)\n        paragraph = re.sub(\"[^a-z0-9 ]\", \" \", paragraph.lower()).split()\n        d = {}\n\n        for word in paragraph:\n            if word not in banned:\n                d[word] = d.get(word, 0) + 1\n\n        return max(d, key=d.get)\n</code></pre>"},{"location":"problems/821_shortest_distance_to_a_character/","title":"821. Shortest Distance to a Character","text":"<p>Easy</p> <p>Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.</p> <p>The distance between two indices i and j is abs(i - j), where abs is the absolute value function.</p>"},{"location":"problems/821_shortest_distance_to_a_character/#example-1","title":"Example 1:","text":"<pre><code>Input: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n</code></pre>"},{"location":"problems/821_shortest_distance_to_a_character/#example-2","title":"Example 2:","text":"<pre><code>Input: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]\n</code></pre>"},{"location":"problems/821_shortest_distance_to_a_character/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s.length &lt;= 104</li> <li>s[i] and c are lowercase English letters.</li> <li>It is guaranteed that c occurs at least once in s.</li> </ul>"},{"location":"problems/821_shortest_distance_to_a_character/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def shortestToChar(self, s: str, c: str) -&gt; List[int]:\n        res = [0] * len(s)\n        res[0] = s.index(c)\n\n        for i in range(1, len(s)):\n            if s[i] == c:\n                continue\n            try:\n                res[i] = min(res[i - 1] + 1, s.index(c, i) - i)\n            except:\n                res[i] = res[i - 1] + 1\n\n        return res\n</code></pre>"},{"location":"problems/824_goat_latin/","title":"824. Goat Latin","text":"<p>Easy</p> <p>You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p> <p>We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:</p> <ul> <li>If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the   end of the word.</li> <li>For example, the word \"apple\" becomes \"applema\".</li> <li>If a word begins with a consonant (i.e., not a vowel), remove the first letter   and append it to the end, then add \"ma\".</li> <li>For example, the word \"goat\" becomes \"oatgma\".</li> <li>Add one letter 'a' to the end of each word per its word index in the sentence,   starting with 1.</li> <li>For example, the first word gets \"a\" added to the end, the second word gets     \"aa\" added to the end, and so on.</li> </ul> <p>Return the final sentence representing the conversion from sentence to Goat Latin.</p>"},{"location":"problems/824_goat_latin/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def toGoatLatin(self, sentence: str) -&gt; str:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        words = []\n        for i, word in enumerate(sentence.split()):\n            if word[0].lower() not in vowels:\n                word = word[1:] + word[0]\n            word = word + \"ma\" + \"a\" * (i + 1)\n            words.append(word)\n\n        return \" \".join(words)\n</code></pre>"},{"location":"problems/830_positions_of_large_groups/","title":"830. Positions of Large Groups","text":"<p>Easy</p> <p>In a string s of lowercase letters, these letters form consecutive groups of the same character.</p> <p>For example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\".</p> <p>A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6].</p> <p>A group is considered large if it has 3 or more characters.</p> <p>Return the intervals of every large group sorted in increasing order by start index.</p>"},{"location":"problems/830_positions_of_large_groups/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def largeGroupPositions(self, s: str) -&gt; List[List[int]]:\n        n = len(s)\n        i = 0\n        res = []\n\n        while i &lt; n:\n            j = 1\n            while i + j &lt; n and s[i] == s[i + j]:\n                j += 1\n            if j &gt; 2:\n                res.append([i, i + j - 1])\n            i += j\n\n        return res\n</code></pre>"},{"location":"problems/832_flipping_an_image/","title":"832. Flipping an Image","text":"<p>Easy</p> <p>Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.</p> <p>To flip an image horizontally means that each row of the image is reversed.</p> <ul> <li>For example, flipping [1,1,0] horizontally results in [0,1,1].</li> </ul> <p>To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.</p> <ul> <li>For example, inverting [0,1,1] results in [1,0,0].</li> </ul>"},{"location":"problems/832_flipping_an_image/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -&gt; List[List[int]]:\n        for row in image:\n            row.reverse()\n\n            for i in range(len(row)):\n                if row[i] == 0:\n                    row[i] = 1\n                else:\n                    row[i] = 0\n\n        return image\n</code></pre>"},{"location":"problems/836_rectangle_overlap/","title":"836. Rectangle Overlap","text":"<p>Easy</p> <p>An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p> <p>Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p> <p>Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.</p>"},{"location":"problems/836_rectangle_overlap/#example-1","title":"Example 1:","text":"<pre><code>Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true\n</code></pre>"},{"location":"problems/836_rectangle_overlap/#example-2","title":"Example 2:","text":"<pre><code>Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false\n</code></pre>"},{"location":"problems/836_rectangle_overlap/#example-3","title":"Example 3:","text":"<pre><code>Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false\n</code></pre>"},{"location":"problems/836_rectangle_overlap/#constraints","title":"Constraints:","text":"<ul> <li>rec1.length == 4</li> <li>rec2.length == 4</li> <li>-109 &lt;= rec1[i], rec2[i] &lt;= 109</li> <li>rec1 and rec2 represent a valid rectangle with a non-zero area.</li> </ul>"},{"location":"problems/836_rectangle_overlap/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -&gt; bool:\n        if rec1[0] &gt; rec2[0]:\n            rec1, rec2 = rec2, rec1\n\n        x1, y1, x2, y2 = rec1\n        r1, s1, r2, s2 = rec2\n\n        return r1 &lt; x2 and s1 &lt; y2 and y1 &lt; s2\n</code></pre>"},{"location":"problems/83_remove_duplicates_from_sorted_list/","title":"83. Remove Duplicates from Sorted List","text":"<p>Easy</p> <p>Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p> <pre><code>class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prev = head\n        curr = head\n\n        while curr is not None:\n            while curr is not None and prev.val == curr.val:\n                curr = curr.next\n\n            prev.next = curr\n            prev = prev.next\n\n        return head\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/844_backspace_string_compare/","title":"844. Backspace String Compare","text":"<p>Easy</p> <p>Given two strings <code>s</code> and <code>t</code>, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.</p> <p>Note that after backspacing an empty text, the text will continue empty.</p>"},{"location":"problems/844_backspace_string_compare/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def backspaceCompare(self, s: str, t: str) -&gt; bool:\n        return self.sanitize(s) == self.sanitize(t)\n\n    def sanitize(self, s: str) -&gt; str:\n        res = []\n        for c in s:\n            if c != \"#\":\n                res.append(c)\n            elif len(res) &gt; 0:\n                res.pop()\n        return res\n</code></pre>"},{"location":"problems/859_buddy_strings/","title":"859. Buddy Strings","text":"<p>Easy</p> <p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> if you can swap two letters in <code>s</code> so the result is equal to <code>goal</code>, otherwise, return <code>false</code>.</p> <p>Swapping letters is defined as taking two indices <code>i</code> and <code>j</code> (0-indexed) such that <code>i != j</code> and swapping the characters at <code>s[i]</code> and <code>s[j]</code>.</p> <p>For example, swapping at indices <code>0</code> and <code>2</code> in <code>\"abcd\"</code> results in <code>\"cbad\"</code>.</p>"},{"location":"problems/859_buddy_strings/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def buddyStrings(self, s: str, goal: str) -&gt; bool:\n        if len(s) != len(goal):\n            return False\n\n        if s == goal:\n            # need to find a duplicate character to swap\n            seen = set()\n            for a in s:\n                if a in seen:\n                    return True\n                seen.add(a)\n            return False\n\n        pairs = []\n        for a, b in zip(s, goal):\n            if a != b:\n                pairs.append((a, b))\n\n        if len(pairs) != 2:\n            return False\n\n        if pairs[0] == pairs[1][::-1]:\n            return True\n\n        return False\n</code></pre>"},{"location":"problems/860_lemonade_change/","title":"860. Lemonade Change","text":"<p>Easy</p> <p>At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.</p> <p>Note that you do not have any change in hand at first.</p> <p>Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.</p>"},{"location":"problems/860_lemonade_change/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def lemonadeChange(self, bills: List[int]) -&gt; bool:\n        monies = {5:0, 10:0, 20:0}\n\n        for bill in bills:\n            match bill:\n                case 5:\n                    monies[5] += 1\n                case 10:\n                    monies[10] += 1\n                    monies[5] -= 1\n                case 20:\n                    monies[20] += 1\n                    if monies[10] &gt; 0:\n                        monies[10] -= 1\n                        monies[5] -= 1\n                    else:\n                        monies[5] -= 3\n            if monies[5] &lt; 0:\n                return False\n\n        return True\n</code></pre>"},{"location":"problems/867_transpose_matrix/","title":"867. Transpose Matrix","text":"<p>Easy</p> <p>Given a 2D integer array matrix, return the transpose of matrix.</p> <p>The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.</p>"},{"location":"problems/867_transpose_matrix/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def transpose(self, matrix: List[List[int]]) -&gt; List[List[int]]:\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n\n        for i in range(n):\n            new_row = []\n            for j in range(m):\n                new_row.append(matrix[j][i])\n\n            res.append(new_row)\n\n        return res\n</code></pre>"},{"location":"problems/868_binary_gap/","title":"868. Binary Gap","text":"<p>Easy</p> <p>Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.</p> <p>Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.</p>"},{"location":"problems/868_binary_gap/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def binaryGap(self, n: int) -&gt; int:\n        b = format(n, \"b\")\n        last = 0\n        gap = 0\n\n        for i in range(1, len(b)):\n            if b[i] == \"1\":\n                if i - last &gt; gap:\n                    gap = i - last\n\n                last = i\n\n        return gap\n</code></pre>"},{"location":"problems/86_partition_list/","title":"86. Partition List","text":"<p>Medium</p> <p>Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</p> <p>You should preserve the original relative order of the nodes in each of the two partitions.</p> <pre><code>class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]:\n        if head is None:\n            return None\n\n        ltHead = ListNode(-1)\n        lt = ltHead\n\n        gtHead = ListNode(-1)\n        gt = gtHead\n\n        curr = head\n        while curr is not None:\n            if curr.val &lt; x:\n                lt.next = curr\n                lt = lt.next\n            else:\n                gt.next = curr\n                gt = gt.next\n\n            curr = curr.next\n\n        gt.next = None\n        lt.next = gtHead.next\n\n        return ltHead.next\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/872_leaf-similar_trees/","title":"872. Leaf-Similar Trees","text":"<p>Easy</p> <p>Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.</p> <p>Two binary trees are considered leaf-similar if their leaf value sequence is the same.</p> <p>Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.</p>"},{"location":"problems/872_leaf-similar_trees/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -&gt; bool:\n        return self.leaves(root1) == self.leaves(root2)\n\n    def leaves(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        if root.left is None and root.right is None:\n            return [root.val]\n\n        return self.leaves(root.left) + self.leaves(root.right)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/874_walking_robot_simulation/","title":"874. Walking Robot Simulation","text":"<p>Medium</p> <p>A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:</p> <ul> <li>-2: Turn left 90 degrees.</li> <li>-1: Turn right 90 degrees.</li> <li>1 &lt;= k &lt;= 9: Move forward k units, one unit at a time. Some of the grid   squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi,   yi). If the robot runs into an obstacle, then it will instead stay in its   current location and move on to the next command.</li> </ul> <p>Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).</p>"},{"location":"problems/874_walking_robot_simulation/#note","title":"Note:","text":"<ul> <li>North means +Y direction.</li> <li>East means +X direction.</li> <li>South means -Y direction.</li> <li>West means -X direction. There can be obstacle in [0,0].</li> </ul>"},{"location":"problems/874_walking_robot_simulation/#example-1","title":"Example 1:","text":"<pre><code>Input: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\n</code></pre>"},{"location":"problems/874_walking_robot_simulation/#example-2","title":"Example 2:","text":"<pre><code>Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\n</code></pre>"},{"location":"problems/874_walking_robot_simulation/#example-3","title":"Example 3:","text":"<pre><code>Input: commands = [6,-1,-1,6], obstacles = []\nOutput: 36\nExplanation: The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\n</code></pre>"},{"location":"problems/874_walking_robot_simulation/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= commands.length &lt;= 104</li> <li>commands[i] is either -2, -1, or an integer in the range [1, 9].</li> <li>0 &lt;= obstacles.length &lt;= 104</li> <li>-3 * 104 &lt;= xi, yi &lt;= 3 * 104</li> <li>The answer is guaranteed to be less than 231.</li> </ul>"},{"location":"problems/874_walking_robot_simulation/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -&gt; int:\n        obs = set([(x, y) for [x,y] in obstacles])\n\n        x, y = 0, 0\n        dir = [0, 1]\n        max_distance = 0\n\n        for op in commands:\n            if op == -2:\n                dir = [-dir[1], dir[0]]\n            elif op == -1:\n                dir = [dir[1], -dir[0]]\n            else:\n                for i in range(op):\n                    newX, newY = x + dir[0], y + dir[1]\n                    if (newX, newY) in obs:\n                        break\n\n                    x, y = newX, newY\n                    d = x * x + y * y\n                    max_distance = max(d, max_distance)\n\n        return max_distance\n</code></pre>"},{"location":"problems/875_koko_eating_bananas/","title":"875. Koko Eating Bananas","text":"<p>Medium</p> <p>Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.</p> <p>Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.</p> <p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p> <p>Return the minimum integer k such that she can eat all the bananas within h hours.</p>"},{"location":"problems/875_koko_eating_bananas/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -&gt; int:\n        minE = 1\n        maxE = max(piles)\n\n        while minE &lt; maxE:\n            mid = (maxE + minE) // 2\n\n            if self.can_eat(piles, h, mid):\n                maxE = mid\n            else:\n                minE = mid + 1\n\n        return minE\n\n    def can_eat(self, piles: List[int], h: int, n: int) -&gt; bool:\n        hours = 0\n        for pile in piles:\n            hours += math.ceil(pile / n)\n\n        return hours &lt;= h\n</code></pre>"},{"location":"problems/876_middle_of_the_linked_list/","title":"876. Middle of the Linked List","text":"<p>Easy</p> <p>Given the head of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p>"},{"location":"problems/876_middle_of_the_linked_list/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = head\n        fast = head\n\n        while True:\n            if fast.next is None:\n                return slow\n            if fast.next.next is None:\n                return slow.next\n\n            slow = slow.next\n            fast = fast.next.next\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/883_projection_area_of_3D_shapes/","title":"883. Projection Area of 3D Shapes","text":"<p>Easy</p> <p>You are given an <code>n x n</code> grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the <code>x</code>, <code>y</code>, and <code>z</code> axes.</p> <p>Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of the cell <code>(i, j)</code>.</p> <p>We view the projection of these cubes onto the <code>xy</code>, <code>yz</code>, and <code>zx</code> planes.</p> <p>A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.</p> <p>Return the total area of all three projections.</p>"},{"location":"problems/883_projection_area_of_3D_shapes/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def projectionArea(self, grid: List[List[int]]) -&gt; int:\n        x = 0\n        for row in grid:\n            x += len(list(filter(lambda x: x != 0, row)))\n\n        y = sum(map(lambda row: max(row), grid))\n\n        z = 0\n        for i in range(len(grid[0])):\n            z += max(map(lambda row: row[i], grid))\n\n        return x + y + z\n</code></pre>"},{"location":"problems/884_uncommon_words_from_two_sentences/","title":"884. Uncommon Words from Two Sentences","text":"<p>Easy</p> <p>A sentence is a string of single-space separated words where each word consists only of lowercase letters.</p> <p>A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p> <p>Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.</p>"},{"location":"problems/884_uncommon_words_from_two_sentences/#example-1","title":"Example 1:","text":"<pre><code>Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\nOutput: [\"sweet\",\"sour\"]\n</code></pre>"},{"location":"problems/884_uncommon_words_from_two_sentences/#example-2","title":"Example 2:","text":"<pre><code>Input: s1 = \"apple apple\", s2 = \"banana\"\nOutput: [\"banana\"]\n</code></pre>"},{"location":"problems/884_uncommon_words_from_two_sentences/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= s1.length, s2.length &lt;= 200</li> <li>s1 and s2 consist of lowercase English letters and spaces.</li> <li>s1 and s2 do not have leading or trailing spaces.</li> <li>All the words in s1 and s2 are separated by a single space.</li> </ul>"},{"location":"problems/884_uncommon_words_from_two_sentences/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def uncommonFromSentences(self, s1: str, s2: str) -&gt; List[str]:\n        d = {}\n        for word in s1.split() + s2.split():\n            d[word] = d.get(word, 0) + 1\n\n        res = []\n        for k, v in d.items():\n            if v == 1:\n                res.append(k)\n\n        return res\n</code></pre>"},{"location":"problems/888_fair_candy_swap/","title":"888. Fair Candy Swap","text":"<p>Easy</p> <p>Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.</p> <p>Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.</p> <p>Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.</p>"},{"location":"problems/888_fair_candy_swap/#example-1","title":"Example 1:","text":"<pre><code>Input: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]\n</code></pre>"},{"location":"problems/888_fair_candy_swap/#example-2","title":"Example 2:","text":"<pre><code>Input: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]\n</code></pre>"},{"location":"problems/888_fair_candy_swap/#example-3","title":"Example 3:","text":"<pre><code>Input: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]\n</code></pre>"},{"location":"problems/888_fair_candy_swap/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= aliceSizes.length, bobSizes.length &lt;= 104</li> <li>1 &lt;= aliceSizes[i], bobSizes[j] &lt;= 105</li> <li>Alice and Bob have a different total number of candies.</li> <li>There will be at least one valid answer for the given input.</li> </ul>"},{"location":"problems/888_fair_candy_swap/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -&gt; List[int]:\n        diff = (sum(aliceSizes) - sum(bobSizes)) // 2\n        bobSizesSet = set(bobSizes)\n\n        for n in aliceSizes:\n            target = n - diff\n            if target in bobSizesSet:\n                return [n, target]\n</code></pre>"},{"location":"problems/88_merge_sorted_array/","title":"88. Merge Sorted Array","text":"<p>Easy</p> <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p> <p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p> <pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        if n == 0:\n            return\n\n        while n &gt; 0:\n            if m == 0 or nums1[m - 1] &lt;= nums2[n - 1]:\n                nums1[m + n - 1] = nums2[n - 1]\n                n -= 1\n            else:\n                nums1[m + n - 1] = nums1[m - 1]\n                m -= 1\n</code></pre>"},{"location":"problems/892_surface_area_of_3D_shapes/","title":"892. Surface Area of 3D Shapes","text":"<p>Easy</p> <p>You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).</p> <p>After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.</p> <p>Return the total surface area of the resulting shapes.</p> <p>Note: The bottom face of each shape counts toward its surface area.</p>"},{"location":"problems/892_surface_area_of_3D_shapes/#example-1","title":"Example 1:","text":"<pre><code>Input: grid = [[1,2],[3,4]]\nOutput: 34\n</code></pre>"},{"location":"problems/892_surface_area_of_3D_shapes/#example-2","title":"Example 2:","text":"<pre><code>Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32\n</code></pre>"},{"location":"problems/892_surface_area_of_3D_shapes/#example-3","title":"Example 3:","text":"<pre><code>Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46\n</code></pre>"},{"location":"problems/892_surface_area_of_3D_shapes/#constraints","title":"Constraints:","text":"<ul> <li>n == grid.length == grid[i].length</li> <li>1 &lt;= n &lt;= 50</li> <li>0 &lt;= grid[i][j] &lt;= 50</li> </ul>"},{"location":"problems/892_surface_area_of_3D_shapes/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def surfaceArea(self, grid: List[List[int]]) -&gt; int:\n        n = len(grid)\n        res = 0\n\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j]:\n                    res += 4 * grid[i][j] + 2\n\n                    if i &lt; n - 1:\n                        res -= 2 * min(grid[i + 1][j], grid[i][j])\n\n                    if j &lt; n - 1:\n                        res -= 2 * min(grid[i][j + 1], grid[i][j])\n\n        return res\n</code></pre>"},{"location":"problems/896_monotonic_array/","title":"896. Monotonic Array","text":"<p>Easy</p> <p>An array is monotonic if it is either monotone increasing or monotone decreasing.</p> <ul> <li>An array nums is monotone increasing if for all i &lt;= j, nums[i] &lt;= nums[j].</li> <li>An array nums is monotone decreasing if for all i &lt;= j, nums[i] &gt;= nums[j].</li> </ul> <p>Given an integer array nums, return true if the given array is monotonic, or false otherwise.</p>"},{"location":"problems/896_monotonic_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isMonotonic(self, nums: List[int]) -&gt; bool:\n        return self.monotonic(nums, lambda x, y: x &lt;= y) or self.monotonic(\n            nums, lambda x, y: x &gt;= y\n        )\n\n    def monotonic(self, nums, f):\n        for i in range(1, len(nums)):\n            if not f(nums[i - 1], nums[i]):\n                return False\n\n        return True\n</code></pre>"},{"location":"problems/897_increasing_order_search_tree/","title":"897. Increasing Order Search Tree","text":"<p>Easy</p> <p>Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>"},{"location":"problems/897_increasing_order_search_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def increasingBST(self, root: TreeNode) -&gt; TreeNode:\n        f = self.reverse_flatten(root)\n\n        root = None\n        for num in f:\n            root = TreeNode(num, None, root)\n\n        return root\n\n    def reverse_flatten(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            self.reverse_flatten(root.right)\n            + [root.val]\n            + self.reverse_flatten(root.left)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/8_string_to_integer/","title":"8. String to Integer (atoi)","text":"<p>Medium</p> <p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s <code>atoi</code> function).</p> <p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p> <ol> <li>Read in and ignore any leading whitespace.</li> <li>Check if the next character (if not already at the end of the string) is '-'    or '+'. Read this character in if it is either. This determines if the final    result is negative or positive respectively. Assume the result is positive if    neither is present.</li> <li>Read in next the characters until the next non-digit character or the end of    the input is reached. The rest of the string is ignored.</li> <li>Convert these digits into an integer (i.e. \"123\" -&gt; 123, \"0032\" -&gt; 32). If no    digits were read, then the integer is 0. Change the sign as necessary (from    step 2).</li> <li>If the integer is out of the 32-bit signed integer range [-231, 231 - 1],    then clamp the integer so that it remains in the range. Specifically,    integers less than -231 should be clamped to -231, and integers greater than    231 - 1 should be clamped to 231 - 1.</li> <li>Return the integer as the final result.</li> </ol> <p>Note:</p> <ul> <li>Only the space character ' ' is considered a whitespace character.</li> <li>Do not ignore any characters other than the leading whitespace or the rest of   the string after the digits.</li> </ul>"},{"location":"problems/8_string_to_integer/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def myAtoi(self, s: str) -&gt; int:\n        s = s.lstrip()\n\n        polarity = 1\n        if len(s) &gt; 0:\n            if s[0] == \"-\":\n                polarity = -1\n            if s[0] == \"-\" or s[0] == \"+\":\n                s = s[1:]\n\n        res = 0\n        for c in s:\n            if c.isnumeric():\n                res = 10 * res + int(c)\n            else:\n                break\n\n        res = polarity * res\n        if res &gt; 2147483647:\n            res = 2147483647\n        elif res &lt; -2147483648:\n            res = -2147483648\n\n        return res\n</code></pre> <p>nn</p>"},{"location":"problems/905_sort_array_by_parity/","title":"905. Sort Array By Parity","text":"<p>Easy</p> <p>Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.</p> <p>Return any array that satisfies this condition.</p>"},{"location":"problems/905_sort_array_by_parity/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def sortArrayByParity(self, nums: List[int]) -&gt; List[int]:\n        i = 0\n        for j in range(len(nums)):\n            if nums[j] % 2 == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n\n        return nums\n</code></pre>"},{"location":"problems/908_smallest_range_i/","title":"908. Smallest Range I","text":"<p>Easy</p> <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>In one operation, you can choose any index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code> and change <code>nums[i]</code> to <code>nums[i] + x</code> where <code>x</code> is an integer from the range <code>[-k, k]</code>. You can apply this operation at most once for each index <code>i</code>.</p> <p>The score of nums is the difference between the maximum and minimum elements in nums.</p> <p>Return the minimum score of nums after applying the mentioned operation at most once for each index in it.</p>"},{"location":"problems/908_smallest_range_i/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def smallestRangeI(self, nums: List[int], k: int) -&gt; int:\n        return max(max(nums) - min(nums) - 2 * k, 0)\n</code></pre>"},{"location":"problems/914_x_of_a_kind_in_a_deck_of_cards/","title":"914. X of a Kind in a Deck of Cards","text":"<p>Easy</p> <p>You are given an integer array <code>deck</code> where <code>deck[i]</code> represents the number written on the ith card.</p> <p>Partition the cards into one or more groups such that:</p> <ul> <li>Each group has exactly <code>x</code> cards where <code>x &gt; 1</code>, and</li> <li>All the cards in one group have the same integer written on them.</li> </ul> <p>Return <code>true</code> if such partition is possible, or <code>false</code> otherwise.</p>"},{"location":"problems/914_x_of_a_kind_in_a_deck_of_cards/#solution","title":"Solution","text":"<pre><code>import functools\nimport math\n\n\nclass Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -&gt; bool:\n        cards = {}\n        for card in deck:\n            cards[card] = cards.get(card, 0) + 1\n\n        if functools.reduce(math.gcd, set(cards.values())) &gt; 1:\n            return True\n\n        return False\n</code></pre>"},{"location":"problems/917_reverse_only_letters/","title":"917. Reverse Only Letters","text":"<p>Easy</p> <p>Given a string <code>s</code>, reverse the string according to the following rules:</p> <ul> <li>All the characters that are not English letters remain in the same position.</li> <li>All the English letters (lowercase or uppercase) should be reversed.</li> </ul> <p>Return <code>s</code> after reversing it.</p>"},{"location":"problems/917_reverse_only_letters/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def reverseOnlyLetters(self, s: str) -&gt; str:\n        l = list(s)\n        i = 0\n        j = len(s) - 1\n\n        while i &lt; j:\n            if l[i].isalpha() and l[j].isalpha():\n                l[i], l[j] = l[j], l[i]\n                i += 1\n                j -= 1\n            elif not l[i].isalpha():\n                i += 1\n            else:\n                j -= 1\n\n        return \"\".join(l)\n</code></pre>"},{"location":"problems/922_sort_array_by_parity_ii/","title":"922. Sort Array By Parity II","text":"<p>Easy</p> <p>Given an array of integers nums, half of the integers in nums are odd, and the other half are even.</p> <p>Sort the array so that whenever <code>nums[i]</code> is odd, <code>i</code> is odd, and whenever <code>nums[i]</code> is even, <code>i</code> is even.</p> <p>Return any answer array that satisfies this condition.</p>"},{"location":"problems/922_sort_array_by_parity_ii/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def sortArrayByParityII(self, nums: List[int]) -&gt; List[int]:\n        return [\n            x\n            for z in zip(\n                [x for x in nums if x % 2 == 0], [x for x in nums if x % 2 == 1]\n            )\n            for x in z\n        ]\n</code></pre>"},{"location":"problems/925_long_pressed_name/","title":"925. Long Pressed Name","text":"<p>Easy</p> <p>Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.</p> <p>You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>"},{"location":"problems/925_long_pressed_name/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isLongPressedName(self, name: str, typed: str) -&gt; bool:\n        n = len(name)\n        i = 0\n\n        for j in range(len(typed)):\n            if i &lt; n and name[i] == typed[j]:\n                i += 1\n            elif j == 0 or typed[j] != typed[j - 1]:\n                return False\n\n        return i == n\n</code></pre>"},{"location":"problems/929_unique_email_addresses/","title":"929. Unique Email Addresses","text":"<p>Easy</p> <p>Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.</p> <ul> <li>For example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name.</li> </ul> <p>If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.</p> <ul> <li>For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.</li> </ul> <p>If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.</p> <ul> <li>For example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\".</li> </ul> <p>It is possible to use both of these rules at the same time.</p> <p>Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.</p>"},{"location":"problems/929_unique_email_addresses/#example-1","title":"Example 1:","text":"<pre><code>Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\n</code></pre>"},{"location":"problems/929_unique_email_addresses/#example-2","title":"Example 2:","text":"<pre><code>Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\nOutput: 3\n</code></pre>"},{"location":"problems/929_unique_email_addresses/#constraints","title":"Constraints:","text":"<ul> <li>1 &lt;= emails.length &lt;= 100</li> <li>1 &lt;= emails[i].length &lt;= 100</li> <li>emails[i] consist of lowercase English letters, '+', '.' and '@'.</li> <li>Each emails[i] contains exactly one '@' character.</li> <li>All local and domain names are non-empty.</li> <li>Local names do not start with a '+' character.</li> <li>Domain names end with the \".com\" suffix.</li> </ul>"},{"location":"problems/929_unique_email_addresses/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def numUniqueEmails(self, emails: List[str]) -&gt; int:\n        def sanitize(email: str) -&gt; str:\n            local, domain = email.split(\"@\")\n            l = local.split(\"+\")[0].replace(\".\", \"\")\n\n            return l + \"@\" + domain\n\n        emailsSet = set()\n        for email in emails:\n            print(sanitize(email))\n            emailsSet.add(sanitize(email))\n\n        return len(emailsSet)\n</code></pre>"},{"location":"problems/92_reverse_linked_list_ii/","title":"92. Reverse Linked List II","text":"<p>Medium</p> <p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return the reversed list.</p> <pre><code>class Solution:\n    def reverseBetween(\n        self, head: Optional[ListNode], left: int, right: int\n    ) -&gt; Optional[ListNode]:\n        if left == right:\n            return head\n\n        curr = head\n        prev = None\n\n        i = 1\n        while i &lt; left:\n            prev = curr\n            curr = curr.next\n            i += 1\n\n        rtail = curr\n        rhead = None\n\n        while i &lt;= right:\n            temp = curr.next\n            curr.next = rhead\n            rhead = curr\n            curr = temp\n            i += 1\n\n        if prev is not None:\n            prev.next = rhead\n        else:\n            head = rhead\n\n        rtail.next = curr\n\n        return head\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"problems/933_number_of_recent_calls/","title":"933. Number of Recent Calls","text":"<p>Easy</p> <p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p> <p>Implement the <code>RecentCounter</code> class:</p> <ul> <li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li> <li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some   time in milliseconds, and returns the number of requests that has happened in   the past 3000 milliseconds (including the new request). Specifically, return   the number of requests that have happened in the inclusive range   <code>[t - 3000, t]</code>.</li> </ul> <p>It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.</p>"},{"location":"problems/933_number_of_recent_calls/#solution","title":"Solution","text":"<pre><code>class RecentCounter:\n    def __init__(self):\n        self.pings = deque()\n\n    def ping(self, t: int) -&gt; int:\n        self.pings.append(t)\n\n        while self.pings[0] &lt; t - 3000:\n            self.pings.popleft()\n\n        return len(self.pings)\n</code></pre>"},{"location":"problems/938_range_sum_of_bst/","title":"938. Range Sum of BST","text":"<p>Easy</p> <p>Given the root node of a binary search tree and two integers <code>low</code> and <code>high</code>, return the sum of values of all nodes with a value in the inclusive range <code>[low, high]</code>.</p>"},{"location":"problems/938_range_sum_of_bst/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -&gt; int:\n        if root is None:\n            return 0\n\n        if root.val &lt; low:\n            return self.rangeSumBST(root.right, low, high)\n\n        if root.val &gt; high:\n            return self.rangeSumBST(root.left, low, high)\n\n        return (\n            root.val\n            + self.rangeSumBST(root.left, low, high)\n            + self.rangeSumBST(root.right, low, high)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/941_valid_mountain_array/","title":"941. Valid Mountain Array","text":"<p>Easy</p> <p>Given an array of integers <code>arr</code>, return true if and only if it is a valid mountain array.</p> <p>Recall that <code>arr</code> is a mountain array if and only if:</p> <ul> <li>arr.length &gt;= 3</li> <li>There exists some i with 0 &lt; i &lt; arr.length - 1 such that:</li> <li>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</li> <li>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</li> </ul>"},{"location":"problems/941_valid_mountain_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def validMountainArray(self, arr: List[int]) -&gt; bool:\n        n = len(arr)\n\n        if n &lt; 3:\n            return False\n\n        i = 1\n        while i &lt; n:\n            if arr[i - 1] &lt; arr[i]:\n                i += 1\n            else:\n                break\n\n        if i == 1 or i == n:\n            return False  # need both an increasing and decreasing part\n\n        while i &lt; n:\n            if arr[i - 1] &gt; arr[i]:\n                i += 1\n            else:\n                return False\n\n        return i == n\n</code></pre>"},{"location":"problems/942_di_string_match/","title":"942. DI String Match","text":"<p>Easy</p> <p>A permutation perm of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> can be represented as a string <code>s</code> of length <code>n</code> where:</p> <ul> <li><code>s[i] == 'I'</code> if <code>perm[i] &lt; perm[i + 1]</code>, and</li> <li><code>s[i] == 'D'</code> if <code>perm[i] &gt; perm[i + 1]</code>.</li> </ul> <p>Given a string <code>s</code>, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.</p>"},{"location":"problems/942_di_string_match/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def diStringMatch(self, s: str) -&gt; List[int]:\n        low = 0\n        high = len(s)\n\n        res = []\n        for c in s:\n            if c == \"I\":\n                res.append(low)\n                low += 1\n            else:  # c == \"D\"\n                res.append(high)\n                high -= 1\n\n        res.append(low)\n\n        return res\n</code></pre>"},{"location":"problems/944_delete_columns_to_make_sorted/","title":"944. Delete Columns to Make Sorted","text":"<p>Easy</p> <p>You are given an array of n strings strs, all of the same length.</p> <p>The strings can be arranged such that there is one on each line, making a grid. For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as:</p> <pre><code>abc\nbce\ncae\n</code></pre> <p>You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted while column 1 ('b', 'c', 'a') is not, so you would delete column 1.</p> <p>Return the number of columns that you will delete.</p>"},{"location":"problems/944_delete_columns_to_make_sorted/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def minDeletionSize(self, strs: List[str]) -&gt; int:\n        res = 0\n\n        for i in range(len(strs[0])):\n            col = list(map(lambda s: s[i], strs))\n            if sorted(col) != col:\n                res += 1\n\n        return res\n</code></pre>"},{"location":"problems/94_binary_tree_inorder_traversal/","title":"94. Binary Tree Inorder Traversal","text":"<p>Easy</p> <p>Given the root of a binary tree, return the inorder traversal of its nodes' values.</p> <pre><code>class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return (\n            self.inorderTraversal(root.left)\n            + [root.val]\n            + self.inorderTraversal(root.right)\n        )\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/961_n-repeated_element_in_size_2n_array/","title":"961. N-Repeated Element in Size 2N Array","text":"<p>Easy</p> <p>You are given an integer array nums with the following properties:</p> <ul> <li>nums.length == 2 * n.</li> <li>nums contains n + 1 unique elements.</li> <li>Exactly one element of nums is repeated n times.</li> </ul> <p>Return the element that is repeated n times.</p>"},{"location":"problems/961_n-repeated_element_in_size_2n_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def repeatedNTimes(self, nums: List[int]) -&gt; int:\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return num\n            seen.add(num)\n</code></pre>"},{"location":"problems/965_univalued_binary_tree/","title":"965. Univalued Binary Tree","text":"<p>Easy</p> <p>A binary tree is uni-valued if every node in the tree has the same value.</p> <p>Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.</p>"},{"location":"problems/965_univalued_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isUnivalTree(self, root: Optional[TreeNode]) -&gt; bool:\n        if root is None:\n            return True\n\n        return self.helper(root, root.val)\n\n    def helper(self, root: Optional[TreeNode], val: int) -&gt; bool:\n        if root is None:\n            return True\n\n        if root.val != val:\n            return False\n\n        return self.helper(root.left, val) and self.helper(root.right, val)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/976_largest_perimeter_triangle/","title":"976. Largest Perimeter Triangle","text":"<p>Easy</p> <p>Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.</p>"},{"location":"problems/976_largest_perimeter_triangle/#example-1","title":"Example 1","text":"<pre><code>Input: nums = [2,1,2]\nOutput: 5\nExplanation: You can form a triangle with three side lengths: 1, 2, and 2.\n</code></pre>"},{"location":"problems/976_largest_perimeter_triangle/#example-2","title":"Example 2","text":"<pre><code>Input: nums = [1,2,1,10]\nOutput: 0\nExplanation:\nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\n</code></pre>"},{"location":"problems/976_largest_perimeter_triangle/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def largestPerimeter(self, nums: List[int]) -&gt; int:\n        nums.sort(reverse=True)\n        for i in range(len(nums) - 2):\n            a, b, c = nums[i], nums[i + 1], nums[i + 2]\n            if a &lt; b + c:\n                return a + b + c\n        return 0\n</code></pre>"},{"location":"problems/977_squares_of_a_sorted_array/","title":"977. Squares of a Sorted Array","text":"<p>Easy</p> <p>Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>"},{"location":"problems/977_squares_of_a_sorted_array/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def sortedSquares(self, nums: List[int]) -&gt; List[int]:\n        return list(sorted(map(lambda x: x * x, nums)))\n</code></pre>"},{"location":"problems/98_validate_binary_search_tree/","title":"98. Validate Binary Search Tree","text":"<p>Medium</p> <p>Given the root of a binary tree, determine if it is a valid binary search tree (BST).</p> <p>A valid BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's   key.</li> <li>The right subtree of a node contains only nodes with keys greater than the   node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul>"},{"location":"problems/98_validate_binary_search_tree/#example-1","title":"Example 1:","text":"<pre><code>Input: root = [2,1,3]\nOutput: true\n</code></pre>"},{"location":"problems/98_validate_binary_search_tree/#example-2","title":"Example 2:","text":"<pre><code>Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n</code></pre>"},{"location":"problems/98_validate_binary_search_tree/#constraints","title":"Constraints:","text":"<ul> <li>The number of nodes in the tree is in the range [1, 104].</li> <li>-231 &lt;= Node.val &lt;= 231 - 1</li> </ul>"},{"location":"problems/98_validate_binary_search_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -&gt; bool:\n        if root is None:\n            return True\n\n        tree = self.in_order(root)\n        return tree == sorted(set(tree))\n\n    def in_order(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if root is None:\n            return []\n\n        return self.in_order(root.left) + [root.val] + self.in_order(root.right)\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"problems/993_cousins_in_binary_tree/","title":"993. Cousins in Binary Tree","text":"<p>Easy</p> <p>Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.</p> <p>Two nodes of a binary tree are cousins if they have the same depth with different parents.</p> <p>Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.</p>"},{"location":"problems/993_cousins_in_binary_tree/#example-1","title":"Example 1","text":"<pre><code>Input: root = [1,2,3,4], x = 4, y = 3\nOutput: false\n</code></pre>"},{"location":"problems/993_cousins_in_binary_tree/#example-2","title":"Example 2","text":"<pre><code>Input: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true\n</code></pre>"},{"location":"problems/993_cousins_in_binary_tree/#example-3","title":"Example 3","text":"<pre><code>Input: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false\n</code></pre>"},{"location":"problems/993_cousins_in_binary_tree/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -&gt; bool:\n        if root is None:\n            return False\n\n        if root.val == x or root.val == y:\n            return False\n\n        xd, xp = self.find_depth_and_parent(root, x, 0)\n        if xd == -1:\n            return False\n\n        yd, yp = self.find_depth_and_parent(root, y, 0)\n\n        if xp == yp:\n            return False\n\n        if xd == yd:\n            return True\n\n        return False\n\n    def find_depth_and_parent(\n        self, root: Optional[TreeNode], x: int, depth: int\n    ) -&gt; [int, int]:\n        if root is None:\n            return -1, -1\n\n        if root.left and root.left.val == x:\n            return depth + 1, root.val\n\n        if root.right and root.right.val == x:\n            return depth + 1, root.val\n\n        [l, p] = self.find_depth_and_parent(root.left, x, depth + 1)\n        if l != -1:\n            return l, p\n\n        [r, p] = self.find_depth_and_parent(root.right, x, depth + 1)\n        if r != -1:\n            return r, p\n\n        return -1, -1\n</code></pre>"},{"location":"problems/997_find_the_town_judge/","title":"997. Find the Town Judge","text":"<p>Easy</p> <p>In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.</p> <p>If the town judge exists, then:</p> <ol> <li>The town judge trusts nobody.</li> <li>Everybody (except for the town judge) trusts the town judge.</li> <li>There is exactly one person that satisfies properties 1 and 2.</li> </ol> <p>You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.</p> <p>Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.</p>"},{"location":"problems/997_find_the_town_judge/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -&gt; int:\n        if n == 1:\n            return 1\n\n        people = set(range(1, n + 1))\n        trusts = set()\n        d = {}\n\n        for x, y in trust:\n            trusts.add(x)\n            if y in d:\n                d[y].add(x)\n            else:\n                d[y] = set([x])\n\n        for p in people - trusts:\n            if p in d and len(d[p]) == n - 1:\n                return p\n\n        return -1\n</code></pre>"},{"location":"problems/9_palindrome_number/","title":"9. Palindrome Number","text":"<p>Easy</p> <p>Given an integer x, return true if x is palindrome integer.</p> <p>An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.</p>"},{"location":"problems/9_palindrome_number/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def isPalindrome(self, x: int) -&gt; bool:\n        return str(x) == str(x)[::-1]\n</code></pre>"}]}